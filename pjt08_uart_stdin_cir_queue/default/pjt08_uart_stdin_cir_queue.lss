
pjt08_uart_stdin_cir_queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  00000e7c  00000f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800298  00800298  00000fa8  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  000023f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a87  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cbc  00000000  00000000  0000409f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc5  00000000  00000000  00004d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00005d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  000061b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb3  00000000  00000000  000066f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000076a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 39       	cpi	r26, 0x98	; 152
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	13 e0       	ldi	r17, 0x03	; 3
 112:	a8 e9       	ldi	r26, 0x98	; 152
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	aa 32       	cpi	r26, 0x2A	; 42
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 c1 02 	call	0x582	; 0x582 <main>
 124:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
// app.c

#include <stdio.h>
#include "led.h"

int is_prime(int n) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	fc 01       	movw	r30, r24
	int i;
	for(i = 2; i <= n/2; i++) 
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 5f 03 	call	0x6be	; 0x6be <__divmodhi4>
 13a:	eb 01       	movw	r28, r22
 13c:	22 e0       	ldi	r18, 0x02	; 2
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n % i) == 0) 
 142:	cf 01       	movw	r24, r30
 144:	b9 01       	movw	r22, r18
 146:	0e 94 5f 03 	call	0x6be	; 0x6be <__divmodhi4>
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include <stdio.h>
#include "led.h"

int is_prime(int n) {
	int i;
	for(i = 2; i <= n/2; i++) 
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	c2 17       	cp	r28, r18
 154:	d3 07       	cpc	r29, r19
 156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n % i) == 0) 
			return(0);
	return(1);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for(i = 2; i <= n/2; i++) 
		if((n % i) == 0) 
			return(0);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <app_prime>:

void app_prime(int t) 
{
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	7c 01       	movw	r14, r24
	int n, count = 0;
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 e0       	ldi	r17, 0x00	; 0
	for(n = 2; n <= t; n++) {
 17e:	c2 e0       	ldi	r28, 0x02	; 2
 180:	d0 e0       	ldi	r29, 0x00	; 0
		if(is_prime(n)) {
			count++;
			printf("%d is a prime, number !!!\n", n);
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	c2 2e       	mov	r12, r18
 186:	22 e0       	ldi	r18, 0x02	; 2
 188:	d2 2e       	mov	r13, r18
}

void app_prime(int t) 
{
	int n, count = 0;
	for(n = 2; n <= t; n++) {
 18a:	16 c0       	rjmp	.+44     	; 0x1b8 <app_prime+0x50>
		if(is_prime(n)) {
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	81 f0       	breq	.+32     	; 0x1b6 <app_prime+0x4e>
			count++;
 196:	0f 5f       	subi	r16, 0xFF	; 255
 198:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime, number !!!\n", n);
 19a:	00 d0       	rcall	.+0      	; 0x19c <app_prime+0x34>
 19c:	0f 92       	push	r0
 19e:	ed b7       	in	r30, 0x3d	; 61
 1a0:	fe b7       	in	r31, 0x3e	; 62
 1a2:	d2 82       	std	Z+2, r13	; 0x02
 1a4:	c1 82       	std	Z+1, r12	; 0x01
 1a6:	d4 83       	std	Z+4, r29	; 0x04
 1a8:	c3 83       	std	Z+3, r28	; 0x03
 1aa:	0e 94 15 04 	call	0x82a	; 0x82a <printf>
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
}

void app_prime(int t) 
{
	int n, count = 0;
	for(n = 2; n <= t; n++) {
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	ec 16       	cp	r14, r28
 1ba:	fd 06       	cpc	r15, r29
 1bc:	3c f7       	brge	.-50     	; 0x18c <app_prime+0x24>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime, number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <app_prime+0x58>
 1c0:	0f 92       	push	r0
 1c2:	8b e1       	ldi	r24, 0x1B	; 27
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	ed b7       	in	r30, 0x3d	; 61
 1c8:	fe b7       	in	r31, 0x3e	; 62
 1ca:	92 83       	std	Z+2, r25	; 0x02
 1cc:	81 83       	std	Z+1, r24	; 0x01
 1ce:	14 83       	std	Z+4, r17	; 0x04
 1d0:	03 83       	std	Z+3, r16	; 0x03
 1d2:	0e 94 15 04 	call	0x82a	; 0x82a <printf>
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	80 93 0b 01 	sts	0x010B, r24
 1f6:	80 93 0a 01 	sts	0x010A, r24
}
 1fa:	08 95       	ret

000001fc <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
 1fc:	10 92 0b 01 	sts	0x010B, r1
 200:	10 92 98 02 	sts	0x0298, r1
}
 204:	08 95       	ret

00000206 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	80 93 0b 01 	sts	0x010B, r24
 20c:	80 93 98 02 	sts	0x0298, r24
}
 210:	08 95       	ret

00000212 <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <led_on+0xa>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <led_on+0x6>
 220:	20 95       	com	r18
 222:	80 91 98 02 	lds	r24, 0x0298
 226:	28 23       	and	r18, r24
 228:	20 93 98 02 	sts	0x0298, r18
	PORTL = Leds;
 22c:	20 93 0b 01 	sts	0x010B, r18
}
 230:	08 95       	ret

00000232 <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <led_off+0xa>
 238:	22 0f       	add	r18, r18
 23a:	33 1f       	adc	r19, r19
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <led_off+0x6>
 240:	80 91 98 02 	lds	r24, 0x0298
 244:	82 2b       	or	r24, r18
 246:	80 93 98 02 	sts	0x0298, r24
	PORTL = Leds;
 24a:	80 93 0b 01 	sts	0x010B, r24
}
 24e:	08 95       	ret

00000250 <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
 250:	80 95       	com	r24
 252:	80 93 98 02 	sts	0x0298, r24
	PORTL = Leds;
 256:	80 93 0b 01 	sts	0x010B, r24
}
 25a:	08 95       	ret

0000025c <led_status_hex>:

void led_status_hex()
{
	printf("%.2x", Leds);
 25c:	00 d0       	rcall	.+0      	; 0x25e <led_status_hex+0x2>
 25e:	0f 92       	push	r0
 260:	ed b7       	in	r30, 0x3d	; 61
 262:	fe b7       	in	r31, 0x3e	; 62
 264:	31 96       	adiw	r30, 0x01	; 1
 266:	85 e2       	ldi	r24, 0x25	; 37
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	ad b7       	in	r26, 0x3d	; 61
 26c:	be b7       	in	r27, 0x3e	; 62
 26e:	12 96       	adiw	r26, 0x02	; 2
 270:	9c 93       	st	X, r25
 272:	8e 93       	st	-X, r24
 274:	11 97       	sbiw	r26, 0x01	; 1
 276:	80 91 98 02 	lds	r24, 0x0298
 27a:	82 83       	std	Z+2, r24	; 0x02
 27c:	13 82       	std	Z+3, r1	; 0x03
 27e:	0e 94 15 04 	call	0x82a	; 0x82a <printf>
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
}
 28a:	08 95       	ret

0000028c <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
 28c:	f8 94       	cli
		ch = qi_delete();
 28e:	0e 94 47 02 	call	0x48e	; 0x48e <qi_delete>
		
		sei();
 292:	78 94       	sei
	} while (ch == 0);
 294:	88 23       	and	r24, r24
 296:	d1 f3       	breq	.-12     	; 0x28c <uart_getchar>

	if (ch == E0T) return -1;
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	11 f0       	breq	.+4      	; 0x2a0 <uart_getchar+0x14>
	else 		   return ch;
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	08 95       	ret
		ch = qi_delete();
		
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return ch;
}
 2a4:	08 95       	ret

000002a6 <uart_putchar>:
	sbi(UCSR0B, RXEN0);				// RX enable
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
}

int uart_putchar(char ch, FILE *stream)
{
 2a6:	cf 93       	push	r28
 2a8:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
 2aa:	8a 30       	cpi	r24, 0x0A	; 10
 2ac:	19 f4       	brne	.+6      	; 0x2b4 <uart_putchar+0xe>
 2ae:	8d e0       	ldi	r24, 0x0D	; 13
 2b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <uart_putchar>
	cli();
 2b4:	f8 94       	cli
	if(!uart_busy) {
 2b6:	80 91 9b 02 	lds	r24, 0x029B
 2ba:	88 23       	and	r24, r24
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <uart_putchar+0x2e>
		UDR0 = ch;
 2be:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 9b 02 	sts	0x029B, r24
 2c8:	0a c0       	rjmp	.+20     	; 0x2de <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
 2ca:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	86 ef       	ldi	r24, 0xF6	; 246
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <uart_putchar+0x28>
			_delay_us(100);
			cli();
 2d2:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
 2d4:	8c 2f       	mov	r24, r28
 2d6:	0e 94 81 02 	call	0x502	; 0x502 <qo_insert>
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	b1 f3       	breq	.-20     	; 0x2ca <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
 2de:	78 94       	sei
	return 1;
}
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <uart_init>:
FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
 2e8:	89 e7       	ldi	r24, 0x79	; 121
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	90 93 25 03 	sts	0x0325, r25
 2f0:	80 93 24 03 	sts	0x0324, r24
 2f4:	87 e8       	ldi	r24, 0x87	; 135
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	90 93 27 03 	sts	0x0327, r25
 2fc:	80 93 26 03 	sts	0x0326, r24
	q_init();
 300:	0e 94 14 02 	call	0x428	; 0x428 <q_init>
	uart_busy = 0;
 304:	10 92 9b 02 	sts	0x029B, r1

	UBRR0H = 0x00; UBRR0L = 0x03;	// 115.2Kbps
 308:	10 92 c5 00 	sts	0x00C5, r1
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0B, TXEN0);				// TX enable
 312:	e1 ec       	ldi	r30, 0xC1	; 193
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	88 60       	ori	r24, 0x08	; 8
 31a:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);			// TX complete interrupt
 31c:	80 81       	ld	r24, Z
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);				// RX enable
 322:	80 81       	ld	r24, Z
 324:	80 61       	ori	r24, 0x10	; 16
 326:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
 328:	80 81       	ld	r24, Z
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	80 83       	st	Z, r24
}
 32e:	08 95       	ret

00000330 <uart_echo>:
	if (ch == E0T) return -1;
	else 		   return ch;
}

void uart_echo(char ch)
{
 330:	cf 93       	push	r28
 332:	c8 2f       	mov	r28, r24
	if (ch == '\n')	uart_echo( '\r' );
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	19 f4       	brne	.+6      	; 0x33e <uart_echo+0xe>
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	0e 94 98 01 	call	0x330	; 0x330 <uart_echo>
	if (!uart_busy) {
 33e:	80 91 9b 02 	lds	r24, 0x029B
 342:	88 23       	and	r24, r24
 344:	31 f4       	brne	.+12     	; 0x352 <uart_echo+0x22>
		UDR0 = ch;
 346:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 9b 02 	sts	0x029B, r24
 350:	03 c0       	rjmp	.+6      	; 0x358 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
 352:	8c 2f       	mov	r24, r28
 354:	0e 94 81 02 	call	0x502	; 0x502 <qo_insert>

}
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <__vector_27>:

////////////////////////////////////////////
ISR(USART0_TX_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	0b b6       	in	r0, 0x3b	; 59
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	char ch;
	if ((ch = qo_delete()) == 0)
 382:	0e 94 64 02 	call	0x4c8	; 0x4c8 <qo_delete>
 386:	88 23       	and	r24, r24
 388:	19 f4       	brne	.+6      	; 0x390 <__vector_27+0x34>
		uart_busy = 0;
 38a:	10 92 9b 02 	sts	0x029B, r1
 38e:	02 c0       	rjmp	.+4      	; 0x394 <__vector_27+0x38>
	else
		UDR0 = ch;
 390:	80 93 c6 00 	sts	0x00C6, r24
	
		
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0b be       	out	0x3b, r0	; 59
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <__vector_25>:

ISR(USART0_RX_vect)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	0b b6       	in	r0, 0x3b	; 59
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 93       	push	r18
 3ca:	3f 93       	push	r19
 3cc:	4f 93       	push	r20
 3ce:	5f 93       	push	r21
 3d0:	6f 93       	push	r22
 3d2:	7f 93       	push	r23
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	af 93       	push	r26
 3da:	bf 93       	push	r27
 3dc:	cf 93       	push	r28
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	char ch;
	ch = UDR0;
 3e2:	c0 91 c6 00 	lds	r28, 0x00C6
	if (ch != E0T) {
 3e6:	c4 30       	cpi	r28, 0x04	; 4
 3e8:	41 f0       	breq	.+16     	; 0x3fa <__vector_25+0x40>
		if (ch == '\r') ch = '\n';
 3ea:	cd 30       	cpi	r28, 0x0D	; 13
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <__vector_25+0x36>
 3ee:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
 3f0:	8c 2f       	mov	r24, r28
 3f2:	0e 94 98 01 	call	0x330	; 0x330 <uart_echo>
	}
	if(ch == 0x08){
 3f6:	c8 30       	cpi	r28, 0x08	; 8
 3f8:	19 f0       	breq	.+6      	; 0x400 <__vector_25+0x46>
		return;
	}
	else		
		qi_insert(ch);
 3fa:	8c 2f       	mov	r24, r28
 3fc:	0e 94 25 02 	call	0x44a	; 0x44a <qi_insert>
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	cf 91       	pop	r28
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0b be       	out	0x3b, r0	; 59
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
 428:	10 92 e1 02 	sts	0x02E1, r1
 42c:	10 92 e0 02 	sts	0x02E0, r1
 430:	10 92 df 02 	sts	0x02DF, r1
 434:	10 92 de 02 	sts	0x02DE, r1
 438:	10 92 e3 02 	sts	0x02E3, r1
 43c:	10 92 e2 02 	sts	0x02E2, r1
 440:	10 92 9d 02 	sts	0x029D, r1
 444:	10 92 9c 02 	sts	0x029C, r1
}
 448:	08 95       	ret

0000044a <qi_insert>:

int qi_insert(char ch)
{
 44a:	48 2f       	mov	r20, r24
	if ((ri + 1) % QI_SIZE == fi)
 44c:	20 91 e2 02 	lds	r18, 0x02E2
 450:	30 91 e3 02 	lds	r19, 0x02E3
 454:	2f 5f       	subi	r18, 0xFF	; 255
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	c9 01       	movw	r24, r18
 45a:	60 e4       	ldi	r22, 0x40	; 64
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	0e 94 5f 03 	call	0x6be	; 0x6be <__divmodhi4>
 462:	9c 01       	movw	r18, r24
 464:	80 91 9c 02 	lds	r24, 0x029C
 468:	90 91 9d 02 	lds	r25, 0x029D
 46c:	28 17       	cp	r18, r24
 46e:	39 07       	cpc	r19, r25
 470:	59 f0       	breq	.+22     	; 0x488 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
 472:	30 93 e3 02 	sts	0x02E3, r19
 476:	20 93 e2 02 	sts	0x02E2, r18
	qi[ri] = ch;
 47a:	2c 51       	subi	r18, 0x1C	; 28
 47c:	3d 4f       	sbci	r19, 0xFD	; 253
 47e:	f9 01       	movw	r30, r18
 480:	40 83       	st	Z, r20
	return 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri + 1) % QI_SIZE == fi)
		return 0;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
 48c:	08 95       	ret

0000048e <qi_delete>:

int qi_delete()
{
	if (ri == fi)
 48e:	80 91 9c 02 	lds	r24, 0x029C
 492:	90 91 9d 02 	lds	r25, 0x029D
 496:	20 91 e2 02 	lds	r18, 0x02E2
 49a:	30 91 e3 02 	lds	r19, 0x02E3
 49e:	28 17       	cp	r18, r24
 4a0:	39 07       	cpc	r19, r25
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	60 e4       	ldi	r22, 0x40	; 64
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	0e 94 5f 03 	call	0x6be	; 0x6be <__divmodhi4>
 4ae:	90 93 9d 02 	sts	0x029D, r25
 4b2:	80 93 9c 02 	sts	0x029C, r24
	return qi[fi];
 4b6:	8c 51       	subi	r24, 0x1C	; 28
 4b8:	9d 4f       	sbci	r25, 0xFD	; 253
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
 4c6:	08 95       	ret

000004c8 <qo_delete>:
	return 1;
}

int qo_delete()
{
	if(ro == fo)
 4c8:	80 91 de 02 	lds	r24, 0x02DE
 4cc:	90 91 df 02 	lds	r25, 0x02DF
 4d0:	20 91 e0 02 	lds	r18, 0x02E0
 4d4:	30 91 e1 02 	lds	r19, 0x02E1
 4d8:	28 17       	cp	r18, r24
 4da:	39 07       	cpc	r19, r25
 4dc:	79 f0       	breq	.+30     	; 0x4fc <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	60 e4       	ldi	r22, 0x40	; 64
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	0e 94 5f 03 	call	0x6be	; 0x6be <__divmodhi4>
 4e8:	90 93 df 02 	sts	0x02DF, r25
 4ec:	80 93 de 02 	sts	0x02DE, r24
	return qo[fo];
 4f0:	82 56       	subi	r24, 0x62	; 98
 4f2:	9d 4f       	sbci	r25, 0xFD	; 253
 4f4:	fc 01       	movw	r30, r24
 4f6:	80 81       	ld	r24, Z
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
 500:	08 95       	ret

00000502 <qo_insert>:
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}

int qo_insert(char ch)
{
 502:	48 2f       	mov	r20, r24
	if(ch == 0x08){
 504:	88 30       	cpi	r24, 0x08	; 8
 506:	e1 f4       	brne	.+56     	; 0x540 <qo_insert+0x3e>
		int temp;
		temp = qo_delete();
 508:	0e 94 64 02 	call	0x4c8	; 0x4c8 <qo_delete>
		printf("%d", temp);
 50c:	00 d0       	rcall	.+0      	; 0x50e <qo_insert+0xc>
 50e:	0f 92       	push	r0
 510:	25 e9       	ldi	r18, 0x95	; 149
 512:	32 e0       	ldi	r19, 0x02	; 2
 514:	ed b7       	in	r30, 0x3d	; 61
 516:	fe b7       	in	r31, 0x3e	; 62
 518:	32 83       	std	Z+2, r19	; 0x02
 51a:	21 83       	std	Z+1, r18	; 0x01
 51c:	94 83       	std	Z+4, r25	; 0x04
 51e:	83 83       	std	Z+3, r24	; 0x03
 520:	0e 94 15 04 	call	0x82a	; 0x82a <printf>
		ro -= 1;
 524:	80 91 e0 02 	lds	r24, 0x02E0
 528:	90 91 e1 02 	lds	r25, 0x02E1
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	90 93 e1 02 	sts	0x02E1, r25
 532:	80 93 e0 02 	sts	0x02E0, r24
		return 1;
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	1b c0       	rjmp	.+54     	; 0x576 <qo_insert+0x74>
	}

	if((ro + 1) % QO_SIZE == fo)
 540:	20 91 e0 02 	lds	r18, 0x02E0
 544:	30 91 e1 02 	lds	r19, 0x02E1
 548:	2f 5f       	subi	r18, 0xFF	; 255
 54a:	3f 4f       	sbci	r19, 0xFF	; 255
 54c:	c9 01       	movw	r24, r18
 54e:	60 e4       	ldi	r22, 0x40	; 64
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	0e 94 5f 03 	call	0x6be	; 0x6be <__divmodhi4>
 556:	9c 01       	movw	r18, r24
 558:	80 91 de 02 	lds	r24, 0x02DE
 55c:	90 91 df 02 	lds	r25, 0x02DF
 560:	28 17       	cp	r18, r24
 562:	39 07       	cpc	r19, r25
 564:	59 f0       	breq	.+22     	; 0x57c <qo_insert+0x7a>
		return 0;
	ro = (ro + 1) % QO_SIZE;
 566:	30 93 e1 02 	sts	0x02E1, r19
 56a:	20 93 e0 02 	sts	0x02E0, r18
	qo[ro] = ch;
 56e:	22 56       	subi	r18, 0x62	; 98
 570:	3d 4f       	sbci	r19, 0xFD	; 253
 572:	f9 01       	movw	r30, r18
 574:	40 83       	st	Z, r20
	return 1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 95       	ret
		ro -= 1;
		return 1;
	}

	if((ro + 1) % QO_SIZE == fo)
		return 0;
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
 580:	08 95       	ret

00000582 <main>:
#include "uart.h"
#include "uart_q.h"
#include "app.h"

int main()
{	
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	c0 58       	subi	r28, 0x80	; 128
 58c:	d0 40       	sbci	r29, 0x00	; 0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *cp2, *cp3;

	uart_init();
 598:	0e 94 74 01 	call	0x2e8	; 0x2e8 <uart_init>
	led_init();
 59c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <led_init>

	sei();
 5a0:	78 94       	sei

	while(1) {
		printf("$ ");
 5a2:	8a e2       	ldi	r24, 0x2A	; 42
 5a4:	88 2e       	mov	r8, r24
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	98 2e       	mov	r9, r24
 5aa:	0f 92       	push	r0
 5ac:	0f 92       	push	r0
 5ae:	ed b7       	in	r30, 0x3d	; 61
 5b0:	fe b7       	in	r31, 0x3e	; 62
 5b2:	92 82       	std	Z+2, r9	; 0x02
 5b4:	81 82       	std	Z+1, r8	; 0x01
 5b6:	0e 94 15 04 	call	0x82a	; 0x82a <printf>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL)
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	40 91 24 03 	lds	r20, 0x0324
 5c2:	50 91 25 03 	lds	r21, 0x0325
 5c6:	ce 01       	movw	r24, r28
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	60 e8       	ldi	r22, 0x80	; 128
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fgets>
 5d2:	00 97       	sbiw	r24, 0x00	; 0
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <main+0x56>
 5d6:	6e c0       	rjmp	.+220    	; 0x6b4 <main+0x132>
			break;
		if ((cp = strtok(cmd,  "\n\r\t  ")) == NULL) continue;
 5d8:	ce 01       	movw	r24, r28
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	6d e2       	ldi	r22, 0x2D	; 45
 5de:	72 e0       	ldi	r23, 0x02	; 2
 5e0:	0e 94 a4 03 	call	0x748	; 0x748 <strtok>
 5e4:	8c 01       	movw	r16, r24
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	01 f3       	breq	.-64     	; 0x5aa <main+0x28>
		cp2 = strtok(NULL, "\n\r\t    ");
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	63 e3       	ldi	r22, 0x33	; 51
 5f0:	72 e0       	ldi	r23, 0x02	; 2
 5f2:	0e 94 a4 03 	call	0x748	; 0x748 <strtok>
 5f6:	7c 01       	movw	r14, r24
		cp3 = strtok(NULL, "\n\r\t    ");
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	63 e3       	ldi	r22, 0x33	; 51
 5fe:	72 e0       	ldi	r23, 0x02	; 2
 600:	0e 94 a4 03 	call	0x748	; 0x748 <strtok>
 604:	6c 01       	movw	r12, r24
		// printf("%c %c %c", *cp, *cp2, *cp3);
		printf("%s\n", cp);
 606:	c8 01       	movw	r24, r16
 608:	0e 94 27 04 	call	0x84e	; 0x84e <puts>

		if (!strcmp(cp, "prime")) app_prime(2000);
 60c:	c8 01       	movw	r24, r16
 60e:	6b e3       	ldi	r22, 0x3B	; 59
 610:	72 e0       	ldi	r23, 0x02	; 2
 612:	0e 94 a9 03 	call	0x752	; 0x752 <strcmp>
 616:	00 97       	sbiw	r24, 0x00	; 0
 618:	29 f4       	brne	.+10     	; 0x624 <main+0xa2>
 61a:	80 ed       	ldi	r24, 0xD0	; 208
 61c:	97 e0       	ldi	r25, 0x07	; 7
 61e:	0e 94 b4 00 	call	0x168	; 0x168 <app_prime>
 622:	c3 cf       	rjmp	.-122    	; 0x5aa <main+0x28>
		else if(!strcmp(cp, "led") && cp2 == NULL) led_status_hex();
 624:	c8 01       	movw	r24, r16
 626:	61 e4       	ldi	r22, 0x41	; 65
 628:	72 e0       	ldi	r23, 0x02	; 2
 62a:	0e 94 a9 03 	call	0x752	; 0x752 <strcmp>
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	e1 f5       	brne	.+120    	; 0x6aa <main+0x128>
 632:	e1 14       	cp	r14, r1
 634:	f1 04       	cpc	r15, r1
 636:	19 f4       	brne	.+6      	; 0x63e <main+0xbc>
 638:	0e 94 2e 01 	call	0x25c	; 0x25c <led_status_hex>
 63c:	b6 cf       	rjmp	.-148    	; 0x5aa <main+0x28>
		else if(!strcmp(cp, "led") && !strcmp(cp2, "on") && !strcmp(cp3, "all"))
 63e:	c7 01       	movw	r24, r14
 640:	65 e4       	ldi	r22, 0x45	; 69
 642:	72 e0       	ldi	r23, 0x02	; 2
 644:	0e 94 a9 03 	call	0x752	; 0x752 <strcmp>
 648:	5c 01       	movw	r10, r24
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	51 f4       	brne	.+20     	; 0x662 <main+0xe0>
 64e:	c6 01       	movw	r24, r12
 650:	68 e4       	ldi	r22, 0x48	; 72
 652:	72 e0       	ldi	r23, 0x02	; 2
 654:	0e 94 a9 03 	call	0x752	; 0x752 <strcmp>
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	19 f4       	brne	.+6      	; 0x662 <main+0xe0>
			led_on_all();
 65c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <led_on_all>
 660:	a4 cf       	rjmp	.-184    	; 0x5aa <main+0x28>
		else if(!strcmp(cp, "led") && !strcmp(cp2, "off") && !strcmp(cp3, "all"))
 662:	c7 01       	movw	r24, r14
 664:	6c e4       	ldi	r22, 0x4C	; 76
 666:	72 e0       	ldi	r23, 0x02	; 2
 668:	0e 94 a9 03 	call	0x752	; 0x752 <strcmp>
 66c:	8c 01       	movw	r16, r24
 66e:	00 97       	sbiw	r24, 0x00	; 0
 670:	51 f4       	brne	.+20     	; 0x686 <main+0x104>
 672:	c6 01       	movw	r24, r12
 674:	68 e4       	ldi	r22, 0x48	; 72
 676:	72 e0       	ldi	r23, 0x02	; 2
 678:	0e 94 a9 03 	call	0x752	; 0x752 <strcmp>
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	19 f4       	brne	.+6      	; 0x686 <main+0x104>
			led_off_all();
 680:	0e 94 03 01 	call	0x206	; 0x206 <led_off_all>
 684:	92 cf       	rjmp	.-220    	; 0x5aa <main+0x28>
		else if(!strcmp(cp, "led") && !strcmp(cp2, "on")) {
 686:	a1 14       	cp	r10, r1
 688:	b1 04       	cpc	r11, r1
 68a:	31 f4       	brne	.+12     	; 0x698 <main+0x116>
			int temp = atoi(cp3);
 68c:	c6 01       	movw	r24, r12
 68e:	0e 94 86 03 	call	0x70c	; 0x70c <atoi>
			led_on(temp);
 692:	0e 94 09 01 	call	0x212	; 0x212 <led_on>
		else if(!strcmp(cp, "led") && cp2 == NULL) led_status_hex();
		else if(!strcmp(cp, "led") && !strcmp(cp2, "on") && !strcmp(cp3, "all"))
			led_on_all();
		else if(!strcmp(cp, "led") && !strcmp(cp2, "off") && !strcmp(cp3, "all"))
			led_off_all();
		else if(!strcmp(cp, "led") && !strcmp(cp2, "on")) {
 696:	89 cf       	rjmp	.-238    	; 0x5aa <main+0x28>
			int temp = atoi(cp3);
			led_on(temp);
		}
		else if(!strcmp(cp, "led") && !strcmp(cp2, "off")) {
 698:	01 15       	cp	r16, r1
 69a:	11 05       	cpc	r17, r1
 69c:	31 f4       	brne	.+12     	; 0x6aa <main+0x128>
			int temp = atoi(cp3);
 69e:	c6 01       	movw	r24, r12
 6a0:	0e 94 86 03 	call	0x70c	; 0x70c <atoi>
			led_off(temp);
 6a4:	0e 94 19 01 	call	0x232	; 0x232 <led_off>
			led_off_all();
		else if(!strcmp(cp, "led") && !strcmp(cp2, "on")) {
			int temp = atoi(cp3);
			led_on(temp);
		}
		else if(!strcmp(cp, "led") && !strcmp(cp2, "off")) {
 6a8:	80 cf       	rjmp	.-256    	; 0x5aa <main+0x28>
			int temp = atoi(cp3);
			led_off(temp);
		}

		else 					  printf( "Unknown command... \n");
 6aa:	80 e5       	ldi	r24, 0x50	; 80
 6ac:	92 e0       	ldi	r25, 0x02	; 2
 6ae:	0e 94 27 04 	call	0x84e	; 0x84e <puts>
 6b2:	7b cf       	rjmp	.-266    	; 0x5aa <main+0x28>
	}
	printf("logout, good bye !!!\n");
 6b4:	84 e6       	ldi	r24, 0x64	; 100
 6b6:	92 e0       	ldi	r25, 0x02	; 2
 6b8:	0e 94 27 04 	call	0x84e	; 0x84e <puts>
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <main+0x13a>

000006be <__divmodhi4>:
 6be:	97 fb       	bst	r25, 7
 6c0:	09 2e       	mov	r0, r25
 6c2:	07 26       	eor	r0, r23
 6c4:	0a d0       	rcall	.+20     	; 0x6da <__divmodhi4_neg1>
 6c6:	77 fd       	sbrc	r23, 7
 6c8:	04 d0       	rcall	.+8      	; 0x6d2 <__divmodhi4_neg2>
 6ca:	0c d0       	rcall	.+24     	; 0x6e4 <__udivmodhi4>
 6cc:	06 d0       	rcall	.+12     	; 0x6da <__divmodhi4_neg1>
 6ce:	00 20       	and	r0, r0
 6d0:	1a f4       	brpl	.+6      	; 0x6d8 <__divmodhi4_exit>

000006d2 <__divmodhi4_neg2>:
 6d2:	70 95       	com	r23
 6d4:	61 95       	neg	r22
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255

000006d8 <__divmodhi4_exit>:
 6d8:	08 95       	ret

000006da <__divmodhi4_neg1>:
 6da:	f6 f7       	brtc	.-4      	; 0x6d8 <__divmodhi4_exit>
 6dc:	90 95       	com	r25
 6de:	81 95       	neg	r24
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__udivmodhi4>:
 6e4:	aa 1b       	sub	r26, r26
 6e6:	bb 1b       	sub	r27, r27
 6e8:	51 e1       	ldi	r21, 0x11	; 17
 6ea:	07 c0       	rjmp	.+14     	; 0x6fa <__udivmodhi4_ep>

000006ec <__udivmodhi4_loop>:
 6ec:	aa 1f       	adc	r26, r26
 6ee:	bb 1f       	adc	r27, r27
 6f0:	a6 17       	cp	r26, r22
 6f2:	b7 07       	cpc	r27, r23
 6f4:	10 f0       	brcs	.+4      	; 0x6fa <__udivmodhi4_ep>
 6f6:	a6 1b       	sub	r26, r22
 6f8:	b7 0b       	sbc	r27, r23

000006fa <__udivmodhi4_ep>:
 6fa:	88 1f       	adc	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	5a 95       	dec	r21
 700:	a9 f7       	brne	.-22     	; 0x6ec <__udivmodhi4_loop>
 702:	80 95       	com	r24
 704:	90 95       	com	r25
 706:	bc 01       	movw	r22, r24
 708:	cd 01       	movw	r24, r26
 70a:	08 95       	ret

0000070c <atoi>:
 70c:	fc 01       	movw	r30, r24
 70e:	88 27       	eor	r24, r24
 710:	99 27       	eor	r25, r25
 712:	e8 94       	clt
 714:	21 91       	ld	r18, Z+
 716:	20 32       	cpi	r18, 0x20	; 32
 718:	e9 f3       	breq	.-6      	; 0x714 <atoi+0x8>
 71a:	29 30       	cpi	r18, 0x09	; 9
 71c:	10 f0       	brcs	.+4      	; 0x722 <atoi+0x16>
 71e:	2e 30       	cpi	r18, 0x0E	; 14
 720:	c8 f3       	brcs	.-14     	; 0x714 <atoi+0x8>
 722:	2b 32       	cpi	r18, 0x2B	; 43
 724:	41 f0       	breq	.+16     	; 0x736 <atoi+0x2a>
 726:	2d 32       	cpi	r18, 0x2D	; 45
 728:	39 f4       	brne	.+14     	; 0x738 <atoi+0x2c>
 72a:	68 94       	set
 72c:	04 c0       	rjmp	.+8      	; 0x736 <atoi+0x2a>
 72e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__mulhi_const_10>
 732:	82 0f       	add	r24, r18
 734:	91 1d       	adc	r25, r1
 736:	21 91       	ld	r18, Z+
 738:	20 53       	subi	r18, 0x30	; 48
 73a:	2a 30       	cpi	r18, 0x0A	; 10
 73c:	c0 f3       	brcs	.-16     	; 0x72e <atoi+0x22>
 73e:	1e f4       	brtc	.+6      	; 0x746 <atoi+0x3a>
 740:	90 95       	com	r25
 742:	81 95       	neg	r24
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	08 95       	ret

00000748 <strtok>:
 748:	49 e9       	ldi	r20, 0x99	; 153
 74a:	52 e0       	ldi	r21, 0x02	; 2
 74c:	0e 94 b2 03 	call	0x764	; 0x764 <strtok_r>
 750:	08 95       	ret

00000752 <strcmp>:
 752:	fb 01       	movw	r30, r22
 754:	dc 01       	movw	r26, r24
 756:	8d 91       	ld	r24, X+
 758:	01 90       	ld	r0, Z+
 75a:	80 19       	sub	r24, r0
 75c:	01 10       	cpse	r0, r1
 75e:	d9 f3       	breq	.-10     	; 0x756 <strcmp+0x4>
 760:	99 0b       	sbc	r25, r25
 762:	08 95       	ret

00000764 <strtok_r>:
 764:	fa 01       	movw	r30, r20
 766:	a1 91       	ld	r26, Z+
 768:	b0 81       	ld	r27, Z
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	19 f4       	brne	.+6      	; 0x774 <strtok_r+0x10>
 76e:	10 97       	sbiw	r26, 0x00	; 0
 770:	e1 f0       	breq	.+56     	; 0x7aa <strtok_r+0x46>
 772:	cd 01       	movw	r24, r26
 774:	dc 01       	movw	r26, r24
 776:	cd 01       	movw	r24, r26
 778:	0d 90       	ld	r0, X+
 77a:	00 20       	and	r0, r0
 77c:	11 f4       	brne	.+4      	; 0x782 <strtok_r+0x1e>
 77e:	c0 01       	movw	r24, r0
 780:	13 c0       	rjmp	.+38     	; 0x7a8 <strtok_r+0x44>
 782:	fb 01       	movw	r30, r22
 784:	21 91       	ld	r18, Z+
 786:	22 23       	and	r18, r18
 788:	19 f0       	breq	.+6      	; 0x790 <strtok_r+0x2c>
 78a:	20 15       	cp	r18, r0
 78c:	d9 f7       	brne	.-10     	; 0x784 <strtok_r+0x20>
 78e:	f3 cf       	rjmp	.-26     	; 0x776 <strtok_r+0x12>
 790:	fb 01       	movw	r30, r22
 792:	21 91       	ld	r18, Z+
 794:	20 15       	cp	r18, r0
 796:	19 f4       	brne	.+6      	; 0x79e <strtok_r+0x3a>
 798:	1e 92       	st	-X, r1
 79a:	11 96       	adiw	r26, 0x01	; 1
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <strtok_r+0x46>
 79e:	22 23       	and	r18, r18
 7a0:	c1 f7       	brne	.-16     	; 0x792 <strtok_r+0x2e>
 7a2:	0d 90       	ld	r0, X+
 7a4:	00 20       	and	r0, r0
 7a6:	a1 f7       	brne	.-24     	; 0x790 <strtok_r+0x2c>
 7a8:	d0 01       	movw	r26, r0
 7aa:	fa 01       	movw	r30, r20
 7ac:	a1 93       	st	Z+, r26
 7ae:	b0 83       	st	Z, r27
 7b0:	08 95       	ret

000007b2 <__mulhi_const_10>:
 7b2:	7a e0       	ldi	r23, 0x0A	; 10
 7b4:	97 9f       	mul	r25, r23
 7b6:	90 2d       	mov	r25, r0
 7b8:	87 9f       	mul	r24, r23
 7ba:	80 2d       	mov	r24, r0
 7bc:	91 0d       	add	r25, r1
 7be:	11 24       	eor	r1, r1
 7c0:	08 95       	ret

000007c2 <fgets>:
 7c2:	cf 92       	push	r12
 7c4:	df 92       	push	r13
 7c6:	ef 92       	push	r14
 7c8:	ff 92       	push	r15
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	8c 01       	movw	r16, r24
 7d4:	6a 01       	movw	r12, r20
 7d6:	fa 01       	movw	r30, r20
 7d8:	83 81       	ldd	r24, Z+3	; 0x03
 7da:	80 ff       	sbrs	r24, 0
 7dc:	1a c0       	rjmp	.+52     	; 0x812 <fgets+0x50>
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	bc f4       	brge	.+46     	; 0x812 <fgets+0x50>
 7e4:	7b 01       	movw	r14, r22
 7e6:	e8 01       	movw	r28, r16
 7e8:	0e c0       	rjmp	.+28     	; 0x806 <fgets+0x44>
 7ea:	c6 01       	movw	r24, r12
 7ec:	0e 94 72 06 	call	0xce4	; 0xce4 <fgetc>
 7f0:	ff ef       	ldi	r31, 0xFF	; 255
 7f2:	8f 3f       	cpi	r24, 0xFF	; 255
 7f4:	9f 07       	cpc	r25, r31
 7f6:	69 f0       	breq	.+26     	; 0x812 <fgets+0x50>
 7f8:	89 93       	st	Y+, r24
 7fa:	08 94       	sec
 7fc:	e1 08       	sbc	r14, r1
 7fe:	f1 08       	sbc	r15, r1
 800:	8a 30       	cpi	r24, 0x0A	; 10
 802:	91 05       	cpc	r25, r1
 804:	21 f0       	breq	.+8      	; 0x80e <fgets+0x4c>
 806:	21 e0       	ldi	r18, 0x01	; 1
 808:	e2 16       	cp	r14, r18
 80a:	f1 04       	cpc	r15, r1
 80c:	71 f7       	brne	.-36     	; 0x7ea <fgets+0x28>
 80e:	18 82       	st	Y, r1
 810:	02 c0       	rjmp	.+4      	; 0x816 <fgets+0x54>
 812:	00 e0       	ldi	r16, 0x00	; 0
 814:	10 e0       	ldi	r17, 0x00	; 0
 816:	c8 01       	movw	r24, r16
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	1f 91       	pop	r17
 81e:	0f 91       	pop	r16
 820:	ff 90       	pop	r15
 822:	ef 90       	pop	r14
 824:	df 90       	pop	r13
 826:	cf 90       	pop	r12
 828:	08 95       	ret

0000082a <printf>:
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
 832:	fe 01       	movw	r30, r28
 834:	36 96       	adiw	r30, 0x06	; 6
 836:	61 91       	ld	r22, Z+
 838:	71 91       	ld	r23, Z+
 83a:	80 91 26 03 	lds	r24, 0x0326
 83e:	90 91 27 03 	lds	r25, 0x0327
 842:	af 01       	movw	r20, r30
 844:	0e 94 55 04 	call	0x8aa	; 0x8aa <vfprintf>
 848:	df 91       	pop	r29
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <puts>:
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	8c 01       	movw	r16, r24
 858:	e0 91 26 03 	lds	r30, 0x0326
 85c:	f0 91 27 03 	lds	r31, 0x0327
 860:	83 81       	ldd	r24, Z+3	; 0x03
 862:	81 ff       	sbrs	r24, 1
 864:	1a c0       	rjmp	.+52     	; 0x89a <puts+0x4c>
 866:	c0 e0       	ldi	r28, 0x00	; 0
 868:	d0 e0       	ldi	r29, 0x00	; 0
 86a:	05 c0       	rjmp	.+10     	; 0x876 <puts+0x28>
 86c:	19 95       	eicall
 86e:	00 97       	sbiw	r24, 0x00	; 0
 870:	11 f0       	breq	.+4      	; 0x876 <puts+0x28>
 872:	cf ef       	ldi	r28, 0xFF	; 255
 874:	df ef       	ldi	r29, 0xFF	; 255
 876:	f8 01       	movw	r30, r16
 878:	81 91       	ld	r24, Z+
 87a:	8f 01       	movw	r16, r30
 87c:	60 91 26 03 	lds	r22, 0x0326
 880:	70 91 27 03 	lds	r23, 0x0327
 884:	db 01       	movw	r26, r22
 886:	18 96       	adiw	r26, 0x08	; 8
 888:	ed 91       	ld	r30, X+
 88a:	fc 91       	ld	r31, X
 88c:	19 97       	sbiw	r26, 0x09	; 9
 88e:	88 23       	and	r24, r24
 890:	69 f7       	brne	.-38     	; 0x86c <puts+0x1e>
 892:	8a e0       	ldi	r24, 0x0A	; 10
 894:	19 95       	eicall
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	11 f0       	breq	.+4      	; 0x89e <puts+0x50>
 89a:	cf ef       	ldi	r28, 0xFF	; 255
 89c:	df ef       	ldi	r29, 0xFF	; 255
 89e:	ce 01       	movw	r24, r28
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	08 95       	ret

000008aa <vfprintf>:
 8aa:	2f 92       	push	r2
 8ac:	3f 92       	push	r3
 8ae:	4f 92       	push	r4
 8b0:	5f 92       	push	r5
 8b2:	6f 92       	push	r6
 8b4:	7f 92       	push	r7
 8b6:	8f 92       	push	r8
 8b8:	9f 92       	push	r9
 8ba:	af 92       	push	r10
 8bc:	bf 92       	push	r11
 8be:	cf 92       	push	r12
 8c0:	df 92       	push	r13
 8c2:	ef 92       	push	r14
 8c4:	ff 92       	push	r15
 8c6:	0f 93       	push	r16
 8c8:	1f 93       	push	r17
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
 8d2:	2d 97       	sbiw	r28, 0x0d	; 13
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	3c 01       	movw	r6, r24
 8e0:	7d 87       	std	Y+13, r23	; 0x0d
 8e2:	6c 87       	std	Y+12, r22	; 0x0c
 8e4:	5a 01       	movw	r10, r20
 8e6:	fc 01       	movw	r30, r24
 8e8:	17 82       	std	Z+7, r1	; 0x07
 8ea:	16 82       	std	Z+6, r1	; 0x06
 8ec:	83 81       	ldd	r24, Z+3	; 0x03
 8ee:	81 ff       	sbrs	r24, 1
 8f0:	c8 c1       	rjmp	.+912    	; 0xc82 <vfprintf+0x3d8>
 8f2:	2e 01       	movw	r4, r28
 8f4:	08 94       	sec
 8f6:	41 1c       	adc	r4, r1
 8f8:	51 1c       	adc	r5, r1
 8fa:	f3 01       	movw	r30, r6
 8fc:	93 81       	ldd	r25, Z+3	; 0x03
 8fe:	ec 85       	ldd	r30, Y+12	; 0x0c
 900:	fd 85       	ldd	r31, Y+13	; 0x0d
 902:	93 fd       	sbrc	r25, 3
 904:	85 91       	lpm	r24, Z+
 906:	93 ff       	sbrs	r25, 3
 908:	81 91       	ld	r24, Z+
 90a:	fd 87       	std	Y+13, r31	; 0x0d
 90c:	ec 87       	std	Y+12, r30	; 0x0c
 90e:	88 23       	and	r24, r24
 910:	09 f4       	brne	.+2      	; 0x914 <vfprintf+0x6a>
 912:	b3 c1       	rjmp	.+870    	; 0xc7a <vfprintf+0x3d0>
 914:	85 32       	cpi	r24, 0x25	; 37
 916:	41 f4       	brne	.+16     	; 0x928 <vfprintf+0x7e>
 918:	93 fd       	sbrc	r25, 3
 91a:	85 91       	lpm	r24, Z+
 91c:	93 ff       	sbrs	r25, 3
 91e:	81 91       	ld	r24, Z+
 920:	fd 87       	std	Y+13, r31	; 0x0d
 922:	ec 87       	std	Y+12, r30	; 0x0c
 924:	85 32       	cpi	r24, 0x25	; 37
 926:	29 f4       	brne	.+10     	; 0x932 <vfprintf+0x88>
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	b3 01       	movw	r22, r6
 92c:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 930:	e4 cf       	rjmp	.-56     	; 0x8fa <vfprintf+0x50>
 932:	ff 24       	eor	r15, r15
 934:	ee 24       	eor	r14, r14
 936:	10 e0       	ldi	r17, 0x00	; 0
 938:	10 32       	cpi	r17, 0x20	; 32
 93a:	b0 f4       	brcc	.+44     	; 0x968 <vfprintf+0xbe>
 93c:	8b 32       	cpi	r24, 0x2B	; 43
 93e:	69 f0       	breq	.+26     	; 0x95a <vfprintf+0xb0>
 940:	8c 32       	cpi	r24, 0x2C	; 44
 942:	28 f4       	brcc	.+10     	; 0x94e <vfprintf+0xa4>
 944:	80 32       	cpi	r24, 0x20	; 32
 946:	51 f0       	breq	.+20     	; 0x95c <vfprintf+0xb2>
 948:	83 32       	cpi	r24, 0x23	; 35
 94a:	71 f4       	brne	.+28     	; 0x968 <vfprintf+0xbe>
 94c:	0b c0       	rjmp	.+22     	; 0x964 <vfprintf+0xba>
 94e:	8d 32       	cpi	r24, 0x2D	; 45
 950:	39 f0       	breq	.+14     	; 0x960 <vfprintf+0xb6>
 952:	80 33       	cpi	r24, 0x30	; 48
 954:	49 f4       	brne	.+18     	; 0x968 <vfprintf+0xbe>
 956:	11 60       	ori	r17, 0x01	; 1
 958:	2c c0       	rjmp	.+88     	; 0x9b2 <vfprintf+0x108>
 95a:	12 60       	ori	r17, 0x02	; 2
 95c:	14 60       	ori	r17, 0x04	; 4
 95e:	29 c0       	rjmp	.+82     	; 0x9b2 <vfprintf+0x108>
 960:	18 60       	ori	r17, 0x08	; 8
 962:	27 c0       	rjmp	.+78     	; 0x9b2 <vfprintf+0x108>
 964:	10 61       	ori	r17, 0x10	; 16
 966:	25 c0       	rjmp	.+74     	; 0x9b2 <vfprintf+0x108>
 968:	17 fd       	sbrc	r17, 7
 96a:	2e c0       	rjmp	.+92     	; 0x9c8 <vfprintf+0x11e>
 96c:	28 2f       	mov	r18, r24
 96e:	20 53       	subi	r18, 0x30	; 48
 970:	2a 30       	cpi	r18, 0x0A	; 10
 972:	98 f4       	brcc	.+38     	; 0x99a <vfprintf+0xf0>
 974:	16 ff       	sbrs	r17, 6
 976:	08 c0       	rjmp	.+16     	; 0x988 <vfprintf+0xde>
 978:	8f 2d       	mov	r24, r15
 97a:	88 0f       	add	r24, r24
 97c:	f8 2e       	mov	r15, r24
 97e:	ff 0c       	add	r15, r15
 980:	ff 0c       	add	r15, r15
 982:	f8 0e       	add	r15, r24
 984:	f2 0e       	add	r15, r18
 986:	15 c0       	rjmp	.+42     	; 0x9b2 <vfprintf+0x108>
 988:	8e 2d       	mov	r24, r14
 98a:	88 0f       	add	r24, r24
 98c:	e8 2e       	mov	r14, r24
 98e:	ee 0c       	add	r14, r14
 990:	ee 0c       	add	r14, r14
 992:	e8 0e       	add	r14, r24
 994:	e2 0e       	add	r14, r18
 996:	10 62       	ori	r17, 0x20	; 32
 998:	0c c0       	rjmp	.+24     	; 0x9b2 <vfprintf+0x108>
 99a:	8e 32       	cpi	r24, 0x2E	; 46
 99c:	21 f4       	brne	.+8      	; 0x9a6 <vfprintf+0xfc>
 99e:	16 fd       	sbrc	r17, 6
 9a0:	6c c1       	rjmp	.+728    	; 0xc7a <vfprintf+0x3d0>
 9a2:	10 64       	ori	r17, 0x40	; 64
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <vfprintf+0x108>
 9a6:	8c 36       	cpi	r24, 0x6C	; 108
 9a8:	11 f4       	brne	.+4      	; 0x9ae <vfprintf+0x104>
 9aa:	10 68       	ori	r17, 0x80	; 128
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <vfprintf+0x108>
 9ae:	88 36       	cpi	r24, 0x68	; 104
 9b0:	59 f4       	brne	.+22     	; 0x9c8 <vfprintf+0x11e>
 9b2:	ec 85       	ldd	r30, Y+12	; 0x0c
 9b4:	fd 85       	ldd	r31, Y+13	; 0x0d
 9b6:	93 fd       	sbrc	r25, 3
 9b8:	85 91       	lpm	r24, Z+
 9ba:	93 ff       	sbrs	r25, 3
 9bc:	81 91       	ld	r24, Z+
 9be:	fd 87       	std	Y+13, r31	; 0x0d
 9c0:	ec 87       	std	Y+12, r30	; 0x0c
 9c2:	88 23       	and	r24, r24
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <vfprintf+0x11e>
 9c6:	b8 cf       	rjmp	.-144    	; 0x938 <vfprintf+0x8e>
 9c8:	98 2f       	mov	r25, r24
 9ca:	95 54       	subi	r25, 0x45	; 69
 9cc:	93 30       	cpi	r25, 0x03	; 3
 9ce:	18 f0       	brcs	.+6      	; 0x9d6 <vfprintf+0x12c>
 9d0:	90 52       	subi	r25, 0x20	; 32
 9d2:	93 30       	cpi	r25, 0x03	; 3
 9d4:	38 f4       	brcc	.+14     	; 0x9e4 <vfprintf+0x13a>
 9d6:	24 e0       	ldi	r18, 0x04	; 4
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	a2 0e       	add	r10, r18
 9dc:	b3 1e       	adc	r11, r19
 9de:	3f e3       	ldi	r19, 0x3F	; 63
 9e0:	39 83       	std	Y+1, r19	; 0x01
 9e2:	0f c0       	rjmp	.+30     	; 0xa02 <vfprintf+0x158>
 9e4:	83 36       	cpi	r24, 0x63	; 99
 9e6:	31 f0       	breq	.+12     	; 0x9f4 <vfprintf+0x14a>
 9e8:	83 37       	cpi	r24, 0x73	; 115
 9ea:	81 f0       	breq	.+32     	; 0xa0c <vfprintf+0x162>
 9ec:	83 35       	cpi	r24, 0x53	; 83
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <vfprintf+0x148>
 9f0:	5a c0       	rjmp	.+180    	; 0xaa6 <vfprintf+0x1fc>
 9f2:	22 c0       	rjmp	.+68     	; 0xa38 <vfprintf+0x18e>
 9f4:	f5 01       	movw	r30, r10
 9f6:	80 81       	ld	r24, Z
 9f8:	89 83       	std	Y+1, r24	; 0x01
 9fa:	22 e0       	ldi	r18, 0x02	; 2
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	a2 0e       	add	r10, r18
 a00:	b3 1e       	adc	r11, r19
 a02:	21 e0       	ldi	r18, 0x01	; 1
 a04:	c2 2e       	mov	r12, r18
 a06:	d1 2c       	mov	r13, r1
 a08:	42 01       	movw	r8, r4
 a0a:	14 c0       	rjmp	.+40     	; 0xa34 <vfprintf+0x18a>
 a0c:	92 e0       	ldi	r25, 0x02	; 2
 a0e:	29 2e       	mov	r2, r25
 a10:	31 2c       	mov	r3, r1
 a12:	2a 0c       	add	r2, r10
 a14:	3b 1c       	adc	r3, r11
 a16:	f5 01       	movw	r30, r10
 a18:	80 80       	ld	r8, Z
 a1a:	91 80       	ldd	r9, Z+1	; 0x01
 a1c:	16 ff       	sbrs	r17, 6
 a1e:	03 c0       	rjmp	.+6      	; 0xa26 <vfprintf+0x17c>
 a20:	6f 2d       	mov	r22, r15
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <vfprintf+0x180>
 a26:	6f ef       	ldi	r22, 0xFF	; 255
 a28:	7f ef       	ldi	r23, 0xFF	; 255
 a2a:	c4 01       	movw	r24, r8
 a2c:	0e 94 67 06 	call	0xcce	; 0xcce <strnlen>
 a30:	6c 01       	movw	r12, r24
 a32:	51 01       	movw	r10, r2
 a34:	1f 77       	andi	r17, 0x7F	; 127
 a36:	15 c0       	rjmp	.+42     	; 0xa62 <vfprintf+0x1b8>
 a38:	82 e0       	ldi	r24, 0x02	; 2
 a3a:	28 2e       	mov	r2, r24
 a3c:	31 2c       	mov	r3, r1
 a3e:	2a 0c       	add	r2, r10
 a40:	3b 1c       	adc	r3, r11
 a42:	f5 01       	movw	r30, r10
 a44:	80 80       	ld	r8, Z
 a46:	91 80       	ldd	r9, Z+1	; 0x01
 a48:	16 ff       	sbrs	r17, 6
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <vfprintf+0x1a8>
 a4c:	6f 2d       	mov	r22, r15
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <vfprintf+0x1ac>
 a52:	6f ef       	ldi	r22, 0xFF	; 255
 a54:	7f ef       	ldi	r23, 0xFF	; 255
 a56:	c4 01       	movw	r24, r8
 a58:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <strnlen_P>
 a5c:	6c 01       	movw	r12, r24
 a5e:	10 68       	ori	r17, 0x80	; 128
 a60:	51 01       	movw	r10, r2
 a62:	13 fd       	sbrc	r17, 3
 a64:	1c c0       	rjmp	.+56     	; 0xa9e <vfprintf+0x1f4>
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x1ca>
 a68:	80 e2       	ldi	r24, 0x20	; 32
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	b3 01       	movw	r22, r6
 a6e:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 a72:	ea 94       	dec	r14
 a74:	8e 2d       	mov	r24, r14
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	c8 16       	cp	r12, r24
 a7a:	d9 06       	cpc	r13, r25
 a7c:	a8 f3       	brcs	.-22     	; 0xa68 <vfprintf+0x1be>
 a7e:	0f c0       	rjmp	.+30     	; 0xa9e <vfprintf+0x1f4>
 a80:	f4 01       	movw	r30, r8
 a82:	17 fd       	sbrc	r17, 7
 a84:	85 91       	lpm	r24, Z+
 a86:	17 ff       	sbrs	r17, 7
 a88:	81 91       	ld	r24, Z+
 a8a:	4f 01       	movw	r8, r30
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	b3 01       	movw	r22, r6
 a90:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 a94:	e1 10       	cpse	r14, r1
 a96:	ea 94       	dec	r14
 a98:	08 94       	sec
 a9a:	c1 08       	sbc	r12, r1
 a9c:	d1 08       	sbc	r13, r1
 a9e:	c1 14       	cp	r12, r1
 aa0:	d1 04       	cpc	r13, r1
 aa2:	71 f7       	brne	.-36     	; 0xa80 <vfprintf+0x1d6>
 aa4:	e7 c0       	rjmp	.+462    	; 0xc74 <vfprintf+0x3ca>
 aa6:	84 36       	cpi	r24, 0x64	; 100
 aa8:	11 f0       	breq	.+4      	; 0xaae <vfprintf+0x204>
 aaa:	89 36       	cpi	r24, 0x69	; 105
 aac:	51 f5       	brne	.+84     	; 0xb02 <vfprintf+0x258>
 aae:	f5 01       	movw	r30, r10
 ab0:	17 ff       	sbrs	r17, 7
 ab2:	07 c0       	rjmp	.+14     	; 0xac2 <vfprintf+0x218>
 ab4:	80 81       	ld	r24, Z
 ab6:	91 81       	ldd	r25, Z+1	; 0x01
 ab8:	a2 81       	ldd	r26, Z+2	; 0x02
 aba:	b3 81       	ldd	r27, Z+3	; 0x03
 abc:	24 e0       	ldi	r18, 0x04	; 4
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	08 c0       	rjmp	.+16     	; 0xad2 <vfprintf+0x228>
 ac2:	80 81       	ld	r24, Z
 ac4:	91 81       	ldd	r25, Z+1	; 0x01
 ac6:	aa 27       	eor	r26, r26
 ac8:	97 fd       	sbrc	r25, 7
 aca:	a0 95       	com	r26
 acc:	ba 2f       	mov	r27, r26
 ace:	22 e0       	ldi	r18, 0x02	; 2
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	a2 0e       	add	r10, r18
 ad4:	b3 1e       	adc	r11, r19
 ad6:	01 2f       	mov	r16, r17
 ad8:	0f 76       	andi	r16, 0x6F	; 111
 ada:	b7 ff       	sbrs	r27, 7
 adc:	08 c0       	rjmp	.+16     	; 0xaee <vfprintf+0x244>
 ade:	b0 95       	com	r27
 ae0:	a0 95       	com	r26
 ae2:	90 95       	com	r25
 ae4:	81 95       	neg	r24
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	af 4f       	sbci	r26, 0xFF	; 255
 aea:	bf 4f       	sbci	r27, 0xFF	; 255
 aec:	00 68       	ori	r16, 0x80	; 128
 aee:	bc 01       	movw	r22, r24
 af0:	cd 01       	movw	r24, r26
 af2:	a2 01       	movw	r20, r4
 af4:	2a e0       	ldi	r18, 0x0A	; 10
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__ultoa_invert>
 afc:	d8 2e       	mov	r13, r24
 afe:	d4 18       	sub	r13, r4
 b00:	3f c0       	rjmp	.+126    	; 0xb80 <vfprintf+0x2d6>
 b02:	85 37       	cpi	r24, 0x75	; 117
 b04:	21 f4       	brne	.+8      	; 0xb0e <vfprintf+0x264>
 b06:	1f 7e       	andi	r17, 0xEF	; 239
 b08:	2a e0       	ldi	r18, 0x0A	; 10
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	20 c0       	rjmp	.+64     	; 0xb4e <vfprintf+0x2a4>
 b0e:	19 7f       	andi	r17, 0xF9	; 249
 b10:	8f 36       	cpi	r24, 0x6F	; 111
 b12:	a9 f0       	breq	.+42     	; 0xb3e <vfprintf+0x294>
 b14:	80 37       	cpi	r24, 0x70	; 112
 b16:	20 f4       	brcc	.+8      	; 0xb20 <vfprintf+0x276>
 b18:	88 35       	cpi	r24, 0x58	; 88
 b1a:	09 f0       	breq	.+2      	; 0xb1e <vfprintf+0x274>
 b1c:	ae c0       	rjmp	.+348    	; 0xc7a <vfprintf+0x3d0>
 b1e:	0b c0       	rjmp	.+22     	; 0xb36 <vfprintf+0x28c>
 b20:	80 37       	cpi	r24, 0x70	; 112
 b22:	21 f0       	breq	.+8      	; 0xb2c <vfprintf+0x282>
 b24:	88 37       	cpi	r24, 0x78	; 120
 b26:	09 f0       	breq	.+2      	; 0xb2a <vfprintf+0x280>
 b28:	a8 c0       	rjmp	.+336    	; 0xc7a <vfprintf+0x3d0>
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <vfprintf+0x284>
 b2c:	10 61       	ori	r17, 0x10	; 16
 b2e:	14 ff       	sbrs	r17, 4
 b30:	09 c0       	rjmp	.+18     	; 0xb44 <vfprintf+0x29a>
 b32:	14 60       	ori	r17, 0x04	; 4
 b34:	07 c0       	rjmp	.+14     	; 0xb44 <vfprintf+0x29a>
 b36:	14 ff       	sbrs	r17, 4
 b38:	08 c0       	rjmp	.+16     	; 0xb4a <vfprintf+0x2a0>
 b3a:	16 60       	ori	r17, 0x06	; 6
 b3c:	06 c0       	rjmp	.+12     	; 0xb4a <vfprintf+0x2a0>
 b3e:	28 e0       	ldi	r18, 0x08	; 8
 b40:	30 e0       	ldi	r19, 0x00	; 0
 b42:	05 c0       	rjmp	.+10     	; 0xb4e <vfprintf+0x2a4>
 b44:	20 e1       	ldi	r18, 0x10	; 16
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <vfprintf+0x2a4>
 b4a:	20 e1       	ldi	r18, 0x10	; 16
 b4c:	32 e0       	ldi	r19, 0x02	; 2
 b4e:	f5 01       	movw	r30, r10
 b50:	17 ff       	sbrs	r17, 7
 b52:	07 c0       	rjmp	.+14     	; 0xb62 <vfprintf+0x2b8>
 b54:	60 81       	ld	r22, Z
 b56:	71 81       	ldd	r23, Z+1	; 0x01
 b58:	82 81       	ldd	r24, Z+2	; 0x02
 b5a:	93 81       	ldd	r25, Z+3	; 0x03
 b5c:	44 e0       	ldi	r20, 0x04	; 4
 b5e:	50 e0       	ldi	r21, 0x00	; 0
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <vfprintf+0x2c4>
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	42 e0       	ldi	r20, 0x02	; 2
 b6c:	50 e0       	ldi	r21, 0x00	; 0
 b6e:	a4 0e       	add	r10, r20
 b70:	b5 1e       	adc	r11, r21
 b72:	a2 01       	movw	r20, r4
 b74:	0e 94 de 06 	call	0xdbc	; 0xdbc <__ultoa_invert>
 b78:	d8 2e       	mov	r13, r24
 b7a:	d4 18       	sub	r13, r4
 b7c:	01 2f       	mov	r16, r17
 b7e:	0f 77       	andi	r16, 0x7F	; 127
 b80:	06 ff       	sbrs	r16, 6
 b82:	09 c0       	rjmp	.+18     	; 0xb96 <vfprintf+0x2ec>
 b84:	0e 7f       	andi	r16, 0xFE	; 254
 b86:	df 14       	cp	r13, r15
 b88:	30 f4       	brcc	.+12     	; 0xb96 <vfprintf+0x2ec>
 b8a:	04 ff       	sbrs	r16, 4
 b8c:	06 c0       	rjmp	.+12     	; 0xb9a <vfprintf+0x2f0>
 b8e:	02 fd       	sbrc	r16, 2
 b90:	04 c0       	rjmp	.+8      	; 0xb9a <vfprintf+0x2f0>
 b92:	0f 7e       	andi	r16, 0xEF	; 239
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <vfprintf+0x2f0>
 b96:	1d 2d       	mov	r17, r13
 b98:	01 c0       	rjmp	.+2      	; 0xb9c <vfprintf+0x2f2>
 b9a:	1f 2d       	mov	r17, r15
 b9c:	80 2f       	mov	r24, r16
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	04 ff       	sbrs	r16, 4
 ba2:	0c c0       	rjmp	.+24     	; 0xbbc <vfprintf+0x312>
 ba4:	fe 01       	movw	r30, r28
 ba6:	ed 0d       	add	r30, r13
 ba8:	f1 1d       	adc	r31, r1
 baa:	20 81       	ld	r18, Z
 bac:	20 33       	cpi	r18, 0x30	; 48
 bae:	11 f4       	brne	.+4      	; 0xbb4 <vfprintf+0x30a>
 bb0:	09 7e       	andi	r16, 0xE9	; 233
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <vfprintf+0x31c>
 bb4:	02 ff       	sbrs	r16, 2
 bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <vfprintf+0x31a>
 bb8:	1e 5f       	subi	r17, 0xFE	; 254
 bba:	05 c0       	rjmp	.+10     	; 0xbc6 <vfprintf+0x31c>
 bbc:	86 78       	andi	r24, 0x86	; 134
 bbe:	90 70       	andi	r25, 0x00	; 0
 bc0:	00 97       	sbiw	r24, 0x00	; 0
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <vfprintf+0x31c>
 bc4:	1f 5f       	subi	r17, 0xFF	; 255
 bc6:	80 2e       	mov	r8, r16
 bc8:	99 24       	eor	r9, r9
 bca:	03 fd       	sbrc	r16, 3
 bcc:	12 c0       	rjmp	.+36     	; 0xbf2 <vfprintf+0x348>
 bce:	00 ff       	sbrs	r16, 0
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <vfprintf+0x342>
 bd2:	fd 2c       	mov	r15, r13
 bd4:	1e 15       	cp	r17, r14
 bd6:	50 f4       	brcc	.+20     	; 0xbec <vfprintf+0x342>
 bd8:	fe 0c       	add	r15, r14
 bda:	f1 1a       	sub	r15, r17
 bdc:	1e 2d       	mov	r17, r14
 bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x342>
 be0:	80 e2       	ldi	r24, 0x20	; 32
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	b3 01       	movw	r22, r6
 be6:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 bea:	1f 5f       	subi	r17, 0xFF	; 255
 bec:	1e 15       	cp	r17, r14
 bee:	c0 f3       	brcs	.-16     	; 0xbe0 <vfprintf+0x336>
 bf0:	04 c0       	rjmp	.+8      	; 0xbfa <vfprintf+0x350>
 bf2:	1e 15       	cp	r17, r14
 bf4:	10 f4       	brcc	.+4      	; 0xbfa <vfprintf+0x350>
 bf6:	e1 1a       	sub	r14, r17
 bf8:	01 c0       	rjmp	.+2      	; 0xbfc <vfprintf+0x352>
 bfa:	ee 24       	eor	r14, r14
 bfc:	84 fe       	sbrs	r8, 4
 bfe:	0f c0       	rjmp	.+30     	; 0xc1e <vfprintf+0x374>
 c00:	80 e3       	ldi	r24, 0x30	; 48
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	b3 01       	movw	r22, r6
 c06:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 c0a:	82 fe       	sbrs	r8, 2
 c0c:	1f c0       	rjmp	.+62     	; 0xc4c <vfprintf+0x3a2>
 c0e:	81 fe       	sbrs	r8, 1
 c10:	03 c0       	rjmp	.+6      	; 0xc18 <vfprintf+0x36e>
 c12:	88 e5       	ldi	r24, 0x58	; 88
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	10 c0       	rjmp	.+32     	; 0xc38 <vfprintf+0x38e>
 c18:	88 e7       	ldi	r24, 0x78	; 120
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0d c0       	rjmp	.+26     	; 0xc38 <vfprintf+0x38e>
 c1e:	c4 01       	movw	r24, r8
 c20:	86 78       	andi	r24, 0x86	; 134
 c22:	90 70       	andi	r25, 0x00	; 0
 c24:	00 97       	sbiw	r24, 0x00	; 0
 c26:	91 f0       	breq	.+36     	; 0xc4c <vfprintf+0x3a2>
 c28:	81 fc       	sbrc	r8, 1
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <vfprintf+0x386>
 c2c:	80 e2       	ldi	r24, 0x20	; 32
 c2e:	01 c0       	rjmp	.+2      	; 0xc32 <vfprintf+0x388>
 c30:	8b e2       	ldi	r24, 0x2B	; 43
 c32:	07 fd       	sbrc	r16, 7
 c34:	8d e2       	ldi	r24, 0x2D	; 45
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	b3 01       	movw	r22, r6
 c3a:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x3a2>
 c40:	80 e3       	ldi	r24, 0x30	; 48
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	b3 01       	movw	r22, r6
 c46:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 c4a:	fa 94       	dec	r15
 c4c:	df 14       	cp	r13, r15
 c4e:	c0 f3       	brcs	.-16     	; 0xc40 <vfprintf+0x396>
 c50:	da 94       	dec	r13
 c52:	f2 01       	movw	r30, r4
 c54:	ed 0d       	add	r30, r13
 c56:	f1 1d       	adc	r31, r1
 c58:	80 81       	ld	r24, Z
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	b3 01       	movw	r22, r6
 c5e:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 c62:	dd 20       	and	r13, r13
 c64:	a9 f7       	brne	.-22     	; 0xc50 <vfprintf+0x3a6>
 c66:	06 c0       	rjmp	.+12     	; 0xc74 <vfprintf+0x3ca>
 c68:	80 e2       	ldi	r24, 0x20	; 32
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	b3 01       	movw	r22, r6
 c6e:	0e 94 b2 06 	call	0xd64	; 0xd64 <fputc>
 c72:	ea 94       	dec	r14
 c74:	ee 20       	and	r14, r14
 c76:	c1 f7       	brne	.-16     	; 0xc68 <vfprintf+0x3be>
 c78:	40 ce       	rjmp	.-896    	; 0x8fa <vfprintf+0x50>
 c7a:	f3 01       	movw	r30, r6
 c7c:	86 81       	ldd	r24, Z+6	; 0x06
 c7e:	97 81       	ldd	r25, Z+7	; 0x07
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <vfprintf+0x3dc>
 c82:	8f ef       	ldi	r24, 0xFF	; 255
 c84:	9f ef       	ldi	r25, 0xFF	; 255
 c86:	2d 96       	adiw	r28, 0x0d	; 13
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
 c96:	1f 91       	pop	r17
 c98:	0f 91       	pop	r16
 c9a:	ff 90       	pop	r15
 c9c:	ef 90       	pop	r14
 c9e:	df 90       	pop	r13
 ca0:	cf 90       	pop	r12
 ca2:	bf 90       	pop	r11
 ca4:	af 90       	pop	r10
 ca6:	9f 90       	pop	r9
 ca8:	8f 90       	pop	r8
 caa:	7f 90       	pop	r7
 cac:	6f 90       	pop	r6
 cae:	5f 90       	pop	r5
 cb0:	4f 90       	pop	r4
 cb2:	3f 90       	pop	r3
 cb4:	2f 90       	pop	r2
 cb6:	08 95       	ret

00000cb8 <strnlen_P>:
 cb8:	fc 01       	movw	r30, r24
 cba:	05 90       	lpm	r0, Z+
 cbc:	61 50       	subi	r22, 0x01	; 1
 cbe:	70 40       	sbci	r23, 0x00	; 0
 cc0:	01 10       	cpse	r0, r1
 cc2:	d8 f7       	brcc	.-10     	; 0xcba <strnlen_P+0x2>
 cc4:	80 95       	com	r24
 cc6:	90 95       	com	r25
 cc8:	8e 0f       	add	r24, r30
 cca:	9f 1f       	adc	r25, r31
 ccc:	08 95       	ret

00000cce <strnlen>:
 cce:	fc 01       	movw	r30, r24
 cd0:	61 50       	subi	r22, 0x01	; 1
 cd2:	70 40       	sbci	r23, 0x00	; 0
 cd4:	01 90       	ld	r0, Z+
 cd6:	01 10       	cpse	r0, r1
 cd8:	d8 f7       	brcc	.-10     	; 0xcd0 <strnlen+0x2>
 cda:	80 95       	com	r24
 cdc:	90 95       	com	r25
 cde:	8e 0f       	add	r24, r30
 ce0:	9f 1f       	adc	r25, r31
 ce2:	08 95       	ret

00000ce4 <fgetc>:
 ce4:	cf 93       	push	r28
 ce6:	df 93       	push	r29
 ce8:	ec 01       	movw	r28, r24
 cea:	2b 81       	ldd	r18, Y+3	; 0x03
 cec:	20 ff       	sbrs	r18, 0
 cee:	35 c0       	rjmp	.+106    	; 0xd5a <fgetc+0x76>
 cf0:	26 ff       	sbrs	r18, 6
 cf2:	09 c0       	rjmp	.+18     	; 0xd06 <fgetc+0x22>
 cf4:	2f 7b       	andi	r18, 0xBF	; 191
 cf6:	2b 83       	std	Y+3, r18	; 0x03
 cf8:	8e 81       	ldd	r24, Y+6	; 0x06
 cfa:	9f 81       	ldd	r25, Y+7	; 0x07
 cfc:	01 96       	adiw	r24, 0x01	; 1
 cfe:	9f 83       	std	Y+7, r25	; 0x07
 d00:	8e 83       	std	Y+6, r24	; 0x06
 d02:	8a 81       	ldd	r24, Y+2	; 0x02
 d04:	28 c0       	rjmp	.+80     	; 0xd56 <fgetc+0x72>
 d06:	22 ff       	sbrs	r18, 2
 d08:	0f c0       	rjmp	.+30     	; 0xd28 <fgetc+0x44>
 d0a:	e8 81       	ld	r30, Y
 d0c:	f9 81       	ldd	r31, Y+1	; 0x01
 d0e:	80 81       	ld	r24, Z
 d10:	99 27       	eor	r25, r25
 d12:	87 fd       	sbrc	r24, 7
 d14:	90 95       	com	r25
 d16:	00 97       	sbiw	r24, 0x00	; 0
 d18:	19 f4       	brne	.+6      	; 0xd20 <fgetc+0x3c>
 d1a:	20 62       	ori	r18, 0x20	; 32
 d1c:	2b 83       	std	Y+3, r18	; 0x03
 d1e:	1d c0       	rjmp	.+58     	; 0xd5a <fgetc+0x76>
 d20:	31 96       	adiw	r30, 0x01	; 1
 d22:	f9 83       	std	Y+1, r31	; 0x01
 d24:	e8 83       	st	Y, r30
 d26:	11 c0       	rjmp	.+34     	; 0xd4a <fgetc+0x66>
 d28:	ea 85       	ldd	r30, Y+10	; 0x0a
 d2a:	fb 85       	ldd	r31, Y+11	; 0x0b
 d2c:	ce 01       	movw	r24, r28
 d2e:	19 95       	eicall
 d30:	97 ff       	sbrs	r25, 7
 d32:	0b c0       	rjmp	.+22     	; 0xd4a <fgetc+0x66>
 d34:	2b 81       	ldd	r18, Y+3	; 0x03
 d36:	3f ef       	ldi	r19, 0xFF	; 255
 d38:	8f 3f       	cpi	r24, 0xFF	; 255
 d3a:	93 07       	cpc	r25, r19
 d3c:	11 f4       	brne	.+4      	; 0xd42 <fgetc+0x5e>
 d3e:	80 e1       	ldi	r24, 0x10	; 16
 d40:	01 c0       	rjmp	.+2      	; 0xd44 <fgetc+0x60>
 d42:	80 e2       	ldi	r24, 0x20	; 32
 d44:	82 2b       	or	r24, r18
 d46:	8b 83       	std	Y+3, r24	; 0x03
 d48:	08 c0       	rjmp	.+16     	; 0xd5a <fgetc+0x76>
 d4a:	2e 81       	ldd	r18, Y+6	; 0x06
 d4c:	3f 81       	ldd	r19, Y+7	; 0x07
 d4e:	2f 5f       	subi	r18, 0xFF	; 255
 d50:	3f 4f       	sbci	r19, 0xFF	; 255
 d52:	3f 83       	std	Y+7, r19	; 0x07
 d54:	2e 83       	std	Y+6, r18	; 0x06
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	02 c0       	rjmp	.+4      	; 0xd5e <fgetc+0x7a>
 d5a:	8f ef       	ldi	r24, 0xFF	; 255
 d5c:	9f ef       	ldi	r25, 0xFF	; 255
 d5e:	df 91       	pop	r29
 d60:	cf 91       	pop	r28
 d62:	08 95       	ret

00000d64 <fputc>:
 d64:	0f 93       	push	r16
 d66:	1f 93       	push	r17
 d68:	cf 93       	push	r28
 d6a:	df 93       	push	r29
 d6c:	8c 01       	movw	r16, r24
 d6e:	eb 01       	movw	r28, r22
 d70:	8b 81       	ldd	r24, Y+3	; 0x03
 d72:	81 ff       	sbrs	r24, 1
 d74:	1b c0       	rjmp	.+54     	; 0xdac <fputc+0x48>
 d76:	82 ff       	sbrs	r24, 2
 d78:	0d c0       	rjmp	.+26     	; 0xd94 <fputc+0x30>
 d7a:	2e 81       	ldd	r18, Y+6	; 0x06
 d7c:	3f 81       	ldd	r19, Y+7	; 0x07
 d7e:	8c 81       	ldd	r24, Y+4	; 0x04
 d80:	9d 81       	ldd	r25, Y+5	; 0x05
 d82:	28 17       	cp	r18, r24
 d84:	39 07       	cpc	r19, r25
 d86:	64 f4       	brge	.+24     	; 0xda0 <fputc+0x3c>
 d88:	e8 81       	ld	r30, Y
 d8a:	f9 81       	ldd	r31, Y+1	; 0x01
 d8c:	01 93       	st	Z+, r16
 d8e:	f9 83       	std	Y+1, r31	; 0x01
 d90:	e8 83       	st	Y, r30
 d92:	06 c0       	rjmp	.+12     	; 0xda0 <fputc+0x3c>
 d94:	e8 85       	ldd	r30, Y+8	; 0x08
 d96:	f9 85       	ldd	r31, Y+9	; 0x09
 d98:	80 2f       	mov	r24, r16
 d9a:	19 95       	eicall
 d9c:	00 97       	sbiw	r24, 0x00	; 0
 d9e:	31 f4       	brne	.+12     	; 0xdac <fputc+0x48>
 da0:	8e 81       	ldd	r24, Y+6	; 0x06
 da2:	9f 81       	ldd	r25, Y+7	; 0x07
 da4:	01 96       	adiw	r24, 0x01	; 1
 da6:	9f 83       	std	Y+7, r25	; 0x07
 da8:	8e 83       	std	Y+6, r24	; 0x06
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <fputc+0x4c>
 dac:	0f ef       	ldi	r16, 0xFF	; 255
 dae:	1f ef       	ldi	r17, 0xFF	; 255
 db0:	c8 01       	movw	r24, r16
 db2:	df 91       	pop	r29
 db4:	cf 91       	pop	r28
 db6:	1f 91       	pop	r17
 db8:	0f 91       	pop	r16
 dba:	08 95       	ret

00000dbc <__ultoa_invert>:
 dbc:	fa 01       	movw	r30, r20
 dbe:	aa 27       	eor	r26, r26
 dc0:	28 30       	cpi	r18, 0x08	; 8
 dc2:	51 f1       	breq	.+84     	; 0xe18 <__ultoa_invert+0x5c>
 dc4:	20 31       	cpi	r18, 0x10	; 16
 dc6:	81 f1       	breq	.+96     	; 0xe28 <__ultoa_invert+0x6c>
 dc8:	e8 94       	clt
 dca:	6f 93       	push	r22
 dcc:	6e 7f       	andi	r22, 0xFE	; 254
 dce:	6e 5f       	subi	r22, 0xFE	; 254
 dd0:	7f 4f       	sbci	r23, 0xFF	; 255
 dd2:	8f 4f       	sbci	r24, 0xFF	; 255
 dd4:	9f 4f       	sbci	r25, 0xFF	; 255
 dd6:	af 4f       	sbci	r26, 0xFF	; 255
 dd8:	b1 e0       	ldi	r27, 0x01	; 1
 dda:	3e d0       	rcall	.+124    	; 0xe58 <__ultoa_invert+0x9c>
 ddc:	b4 e0       	ldi	r27, 0x04	; 4
 dde:	3c d0       	rcall	.+120    	; 0xe58 <__ultoa_invert+0x9c>
 de0:	67 0f       	add	r22, r23
 de2:	78 1f       	adc	r23, r24
 de4:	89 1f       	adc	r24, r25
 de6:	9a 1f       	adc	r25, r26
 de8:	a1 1d       	adc	r26, r1
 dea:	68 0f       	add	r22, r24
 dec:	79 1f       	adc	r23, r25
 dee:	8a 1f       	adc	r24, r26
 df0:	91 1d       	adc	r25, r1
 df2:	a1 1d       	adc	r26, r1
 df4:	6a 0f       	add	r22, r26
 df6:	71 1d       	adc	r23, r1
 df8:	81 1d       	adc	r24, r1
 dfa:	91 1d       	adc	r25, r1
 dfc:	a1 1d       	adc	r26, r1
 dfe:	20 d0       	rcall	.+64     	; 0xe40 <__ultoa_invert+0x84>
 e00:	09 f4       	brne	.+2      	; 0xe04 <__ultoa_invert+0x48>
 e02:	68 94       	set
 e04:	3f 91       	pop	r19
 e06:	2a e0       	ldi	r18, 0x0A	; 10
 e08:	26 9f       	mul	r18, r22
 e0a:	11 24       	eor	r1, r1
 e0c:	30 19       	sub	r19, r0
 e0e:	30 5d       	subi	r19, 0xD0	; 208
 e10:	31 93       	st	Z+, r19
 e12:	de f6       	brtc	.-74     	; 0xdca <__ultoa_invert+0xe>
 e14:	cf 01       	movw	r24, r30
 e16:	08 95       	ret
 e18:	46 2f       	mov	r20, r22
 e1a:	47 70       	andi	r20, 0x07	; 7
 e1c:	40 5d       	subi	r20, 0xD0	; 208
 e1e:	41 93       	st	Z+, r20
 e20:	b3 e0       	ldi	r27, 0x03	; 3
 e22:	0f d0       	rcall	.+30     	; 0xe42 <__ultoa_invert+0x86>
 e24:	c9 f7       	brne	.-14     	; 0xe18 <__ultoa_invert+0x5c>
 e26:	f6 cf       	rjmp	.-20     	; 0xe14 <__ultoa_invert+0x58>
 e28:	46 2f       	mov	r20, r22
 e2a:	4f 70       	andi	r20, 0x0F	; 15
 e2c:	40 5d       	subi	r20, 0xD0	; 208
 e2e:	4a 33       	cpi	r20, 0x3A	; 58
 e30:	18 f0       	brcs	.+6      	; 0xe38 <__ultoa_invert+0x7c>
 e32:	49 5d       	subi	r20, 0xD9	; 217
 e34:	31 fd       	sbrc	r19, 1
 e36:	40 52       	subi	r20, 0x20	; 32
 e38:	41 93       	st	Z+, r20
 e3a:	02 d0       	rcall	.+4      	; 0xe40 <__ultoa_invert+0x84>
 e3c:	a9 f7       	brne	.-22     	; 0xe28 <__ultoa_invert+0x6c>
 e3e:	ea cf       	rjmp	.-44     	; 0xe14 <__ultoa_invert+0x58>
 e40:	b4 e0       	ldi	r27, 0x04	; 4
 e42:	a6 95       	lsr	r26
 e44:	97 95       	ror	r25
 e46:	87 95       	ror	r24
 e48:	77 95       	ror	r23
 e4a:	67 95       	ror	r22
 e4c:	ba 95       	dec	r27
 e4e:	c9 f7       	brne	.-14     	; 0xe42 <__ultoa_invert+0x86>
 e50:	00 97       	sbiw	r24, 0x00	; 0
 e52:	61 05       	cpc	r22, r1
 e54:	71 05       	cpc	r23, r1
 e56:	08 95       	ret
 e58:	9b 01       	movw	r18, r22
 e5a:	ac 01       	movw	r20, r24
 e5c:	0a 2e       	mov	r0, r26
 e5e:	06 94       	lsr	r0
 e60:	57 95       	ror	r21
 e62:	47 95       	ror	r20
 e64:	37 95       	ror	r19
 e66:	27 95       	ror	r18
 e68:	ba 95       	dec	r27
 e6a:	c9 f7       	brne	.-14     	; 0xe5e <__ultoa_invert+0xa2>
 e6c:	62 0f       	add	r22, r18
 e6e:	73 1f       	adc	r23, r19
 e70:	84 1f       	adc	r24, r20
 e72:	95 1f       	adc	r25, r21
 e74:	a0 1d       	adc	r26, r0
 e76:	08 95       	ret

00000e78 <_exit>:
 e78:	f8 94       	cli

00000e7a <__stop_program>:
 e7a:	ff cf       	rjmp	.-2      	; 0xe7a <__stop_program>
