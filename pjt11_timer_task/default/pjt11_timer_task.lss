
pjt11_timer_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800200  00001846  000018da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013e  008002b4  008002b4  0000198e  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000308  00000000  00000000  00002eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b65  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001520  00000000  00000000  00005d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000167e  00000000  00000000  0000723d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  000088bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000837  00000000  00000000  00009134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d98  00000000  00000000  0000996b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000b703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e4       	ldi	r30, 0x46	; 70
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3b       	cpi	r26, 0xB4	; 180
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a4 eb       	ldi	r26, 0xB4	; 180
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a2 3f       	cpi	r26, 0xF2	; 242
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 b6 06 	call	0xd6c	; 0xd6c <main>
     124:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include <stdlib.h>
#include "linked_list.h"
#include "Timer_linked_list.h"

int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
	int i;
	for (i = 2; i <= n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n % i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include "Timer_linked_list.h"

int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n % i) == 0)
			return 0;
	return 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return 0;
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:

void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 37 08 	call	0x106e	; 0x106e <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     18c:	c2 e0       	ldi	r28, 0x02	; 2
     18e:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
		if (is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
			count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	8a e1       	ldi	r24, 0x1A	; 26
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <app_list>:

void app_list(char *ap)
{
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	28 97       	sbiw	r28, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	19 f0       	breq	.+6      	; 0x226 <app_list+0x24>
     220:	fc 01       	movw	r30, r24
     222:	10 81       	ld	r17, Z
     224:	01 c0       	rjmp	.+2      	; 0x228 <app_list+0x26>
	printf("count=%d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     226:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]

	while(1) {
		printf( ">  ");
     228:	24 e2       	ldi	r18, 0x24	; 36
     22a:	e2 2e       	mov	r14, r18
     22c:	22 e0       	ldi	r18, 0x02	; 2
     22e:	f2 2e       	mov	r15, r18
     230:	0f 92       	push	r0
     232:	0f 92       	push	r0
     234:	ed b7       	in	r30, 0x3d	; 61
     236:	fe b7       	in	r31, 0x3e	; 62
     238:	f2 82       	std	Z+2, r15	; 0x02
     23a:	e1 82       	std	Z+1, r14	; 0x01
     23c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	40 91 ec 03 	lds	r20, 0x03EC
     248:	50 91 ed 03 	lds	r21, 0x03ED
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	68 e0       	ldi	r22, 0x08	; 8
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 99 08 	call	0x1132	; 0x1132 <fgets>
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	a1 f0       	breq	.+40     	; 0x284 <app_list+0x82>
			break;
		np = get_node();
     25c:	0e 94 17 02 	call	0x42e	; 0x42e <get_node>
		np->data = buf[0];
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
     266:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     268:	18 36       	cpi	r17, 0x68	; 104
     26a:	19 f0       	breq	.+6      	; 0x272 <app_list+0x70>
     26c:	14 37       	cpi	r17, 0x74	; 116
     26e:	39 f4       	brne	.+14     	; 0x27e <app_list+0x7c>
     270:	03 c0       	rjmp	.+6      	; 0x278 <app_list+0x76>
			case 'h'	: insert_node_head(np); break;
     272:	0e 94 1f 02 	call	0x43e	; 0x43e <insert_node_head>
     276:	dc cf       	rjmp	.-72     	; 0x230 <app_list+0x2e>
			case 't'	: insert_node_tail(np); break;
     278:	0e 94 34 02 	call	0x468	; 0x468 <insert_node_tail>
     27c:	d9 cf       	rjmp	.-78     	; 0x230 <app_list+0x2e>
			default 	: insert_node_ascn(np); //	'a'
     27e:	0e 94 4b 02 	call	0x496	; 0x496 <insert_node_ascn>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <app_list+0x2e>
		}
	}

	tour_list();
     284:	0e 94 85 02 	call	0x50a	; 0x50a <tour_list>
	free_list();
     288:	0e 94 b2 02 	call	0x564	; 0x564 <free_list>
}
     28c:	28 96       	adiw	r28, 0x08	; 8
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <app_timer>:

void app_timer(char *ap)
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	62 97       	sbiw	r28, 0x12	; 18
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     2bc:	08 e2       	ldi	r16, 0x28	; 40
     2be:	12 e0       	ldi	r17, 0x02	; 2
     2c0:	0f 92       	push	r0
     2c2:	0f 92       	push	r0
     2c4:	ed b7       	in	r30, 0x3d	; 61
     2c6:	fe b7       	in	r31, 0x3e	; 62
     2c8:	12 83       	std	Z+2, r17	; 0x02
     2ca:	01 83       	std	Z+1, r16	; 0x01
     2cc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	40 91 ec 03 	lds	r20, 0x03EC
     2d8:	50 91 ed 03 	lds	r21, 0x03ED
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	68 e0       	ldi	r22, 0x08	; 8
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 99 08 	call	0x1132	; 0x1132 <fgets>
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	61 f0       	breq	.+24     	; 0x304 <app_timer+0x60>
     2ec:	ce 01       	movw	r24, r28
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	0e 94 37 08 	call	0x106e	; 0x106e <atoi>
     2f4:	bc 01       	movw	r22, r24
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	29 f0       	breq	.+10     	; 0x304 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     2fa:	ce 01       	movw	r24, r28
     2fc:	09 96       	adiw	r24, 0x09	; 9
     2fe:	0e 94 c8 02 	call	0x590	; 0x590 <insert_timer>
	}
     302:	de cf       	rjmp	.-68     	; 0x2c0 <app_timer+0x1c>

	tour_timer();
     304:	0e 94 31 03 	call	0x662	; 0x662 <tour_timer>
	free_timer();
     308:	0e 94 73 03 	call	0x6e6	; 0x6e6 <free_timer>
}
     30c:	62 96       	adiw	r28, 0x12	; 18
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <task_prime>:

void task_prime(char *ap)
{
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	41 f0       	breq	.+16     	; 0x346 <task_prime+0x24>
     336:	fc 01       	movw	r30, r24
     338:	20 81       	ld	r18, Z
     33a:	22 23       	and	r18, r18
     33c:	21 f0       	breq	.+8      	; 0x346 <task_prime+0x24>
     33e:	0e 94 37 08 	call	0x106e	; 0x106e <atoi>
     342:	8c 01       	movw	r16, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <task_prime+0x28>
	free_timer();
}

void task_prime(char *ap)
{
	int n, t= 2000, count = 0;
     346:	00 ed       	ldi	r16, 0xD0	; 208
     348:	17 e0       	ldi	r17, 0x07	; 7
     34a:	ee 24       	eor	r14, r14
     34c:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     34e:	c2 e0       	ldi	r28, 0x02	; 2
     350:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	c3 2e       	mov	r12, r19
     356:	32 e0       	ldi	r19, 0x02	; 2
     358:	d3 2e       	mov	r13, r19
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     35a:	17 c0       	rjmp	.+46     	; 0x38a <task_prime+0x68>
		if (is_prime(n)) {
     35c:	ce 01       	movw	r24, r28
     35e:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	89 f0       	breq	.+34     	; 0x388 <task_prime+0x66>
			count++;
     366:	08 94       	sec
     368:	e1 1c       	adc	r14, r1
     36a:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!!\n", n);
     36c:	00 d0       	rcall	.+0      	; 0x36e <task_prime+0x4c>
     36e:	0f 92       	push	r0
     370:	ed b7       	in	r30, 0x3d	; 61
     372:	fe b7       	in	r31, 0x3e	; 62
     374:	d2 82       	std	Z+2, r13	; 0x02
     376:	c1 82       	std	Z+1, r12	; 0x01
     378:	d4 83       	std	Z+4, r29	; 0x04
     37a:	c3 83       	std	Z+3, r28	; 0x03
     37c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     388:	21 96       	adiw	r28, 0x01	; 1
     38a:	0c 17       	cp	r16, r28
     38c:	1d 07       	cpc	r17, r29
     38e:	34 f7       	brge	.-52     	; 0x35c <task_prime+0x3a>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     390:	00 d0       	rcall	.+0      	; 0x392 <task_prime+0x70>
     392:	0f 92       	push	r0
     394:	8a e1       	ldi	r24, 0x1A	; 26
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	ed b7       	in	r30, 0x3d	; 61
     39a:	fe b7       	in	r31, 0x3e	; 62
     39c:	92 83       	std	Z+2, r25	; 0x02
     39e:	81 83       	std	Z+1, r24	; 0x01
     3a0:	f4 82       	std	Z+4, r15	; 0x04
     3a2:	e3 82       	std	Z+3, r14	; 0x03
     3a4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	08 95       	ret

000003c2 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	80 93 0b 01 	sts	0x010B, r24
     3c8:	80 93 0a 01 	sts	0x010A, r24
}
     3cc:	08 95       	ret

000003ce <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
     3ce:	10 92 0b 01 	sts	0x010B, r1
     3d2:	10 92 b4 02 	sts	0x02B4, r1
}
     3d6:	08 95       	ret

000003d8 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	80 93 0b 01 	sts	0x010B, r24
     3de:	80 93 b4 02 	sts	0x02B4, r24
}
     3e2:	08 95       	ret

000003e4 <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <led_on+0xa>
     3ea:	22 0f       	add	r18, r18
     3ec:	33 1f       	adc	r19, r19
     3ee:	8a 95       	dec	r24
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <led_on+0x6>
     3f2:	20 95       	com	r18
     3f4:	80 91 b4 02 	lds	r24, 0x02B4
     3f8:	28 23       	and	r18, r24
     3fa:	20 93 b4 02 	sts	0x02B4, r18
	PORTL = Leds;
     3fe:	20 93 0b 01 	sts	0x010B, r18
}
     402:	08 95       	ret

00000404 <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	02 c0       	rjmp	.+4      	; 0x40e <led_off+0xa>
     40a:	22 0f       	add	r18, r18
     40c:	33 1f       	adc	r19, r19
     40e:	8a 95       	dec	r24
     410:	e2 f7       	brpl	.-8      	; 0x40a <led_off+0x6>
     412:	80 91 b4 02 	lds	r24, 0x02B4
     416:	82 2b       	or	r24, r18
     418:	80 93 b4 02 	sts	0x02B4, r24
	PORTL = Leds;
     41c:	80 93 0b 01 	sts	0x010B, r24
}
     420:	08 95       	ret

00000422 <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     422:	80 95       	com	r24
     424:	80 93 b4 02 	sts	0x02B4, r24
	PORTL = Leds;
     428:	80 93 0b 01 	sts	0x010B, r24
}
     42c:	08 95       	ret

0000042e <get_node>:

struct node *get_node()
{
	struct node *cp;	// current pointer

	cp = (struct node *)malloc(sizeof(struct node));
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 08 07 	call	0xe10	; 0xe10 <malloc>
	return cp;
}
     436:	08 95       	ret

00000438 <free_node>:

void free_node(struct node *np)
{
	free(np);
     438:	0e 94 9e 07 	call	0xf3c	; 0xf3c <free>
}
     43c:	08 95       	ret

0000043e <insert_node_head>:

void insert_node_head(struct node *np)
{
     43e:	fc 01       	movw	r30, r24
	if (!Head) {
     440:	80 91 b5 02 	lds	r24, 0x02B5
     444:	90 91 b6 02 	lds	r25, 0x02B6
     448:	00 97       	sbiw	r24, 0x00	; 0
     44a:	39 f4       	brne	.+14     	; 0x45a <insert_node_head+0x1c>
		Head = np;
     44c:	f0 93 b6 02 	sts	0x02B6, r31
     450:	e0 93 b5 02 	sts	0x02B5, r30
		np->link = NULL;
     454:	13 82       	std	Z+3, r1	; 0x03
     456:	12 82       	std	Z+2, r1	; 0x02
     458:	08 95       	ret
	}
	else {
		np->link = Head;
     45a:	93 83       	std	Z+3, r25	; 0x03
     45c:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     45e:	f0 93 b6 02 	sts	0x02B6, r31
     462:	e0 93 b5 02 	sts	0x02B5, r30
     466:	08 95       	ret

00000468 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if (!Head)
     468:	e0 91 b5 02 	lds	r30, 0x02B5
     46c:	f0 91 b6 02 	lds	r31, 0x02B6
     470:	30 97       	sbiw	r30, 0x00	; 0
     472:	31 f4       	brne	.+12     	; 0x480 <insert_node_tail+0x18>
		Head = np;
     474:	90 93 b6 02 	sts	0x02B6, r25
     478:	80 93 b5 02 	sts	0x02B5, r24
     47c:	08 c0       	rjmp	.+16     	; 0x48e <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     47e:	f9 01       	movw	r30, r18
     480:	22 81       	ldd	r18, Z+2	; 0x02
     482:	33 81       	ldd	r19, Z+3	; 0x03
     484:	21 15       	cp	r18, r1
     486:	31 05       	cpc	r19, r1
     488:	d1 f7       	brne	.-12     	; 0x47e <insert_node_tail+0x16>
		cp->link = np;
     48a:	93 83       	std	Z+3, r25	; 0x03
     48c:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     48e:	fc 01       	movw	r30, r24
     490:	13 82       	std	Z+3, r1	; 0x03
     492:	12 82       	std	Z+2, r1	; 0x02
}
     494:	08 95       	ret

00000496 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	fc 01       	movw	r30, r24
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
     49c:	a0 91 b5 02 	lds	r26, 0x02B5
     4a0:	b0 91 b6 02 	lds	r27, 0x02B6
     4a4:	10 97       	sbiw	r26, 0x00	; 0
     4a6:	49 f0       	breq	.+18     	; 0x4ba <insert_node_ascn+0x24>
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4a8:	60 81       	ld	r22, Z
     4aa:	71 81       	ldd	r23, Z+1	; 0x01
     4ac:	3a 2f       	mov	r19, r26
     4ae:	2b 2f       	mov	r18, r27
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
			np->link = Head;
			Head = np;
     4b4:	58 2f       	mov	r21, r24
     4b6:	4f 2f       	mov	r20, r31
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <insert_node_ascn+0x5a>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
		Head = np;
     4ba:	90 93 b6 02 	sts	0x02B6, r25
     4be:	80 93 b5 02 	sts	0x02B5, r24
		np->link = NULL;
     4c2:	13 82       	std	Z+3, r1	; 0x03
     4c4:	12 82       	std	Z+2, r1	; 0x02
     4c6:	1e c0       	rjmp	.+60     	; 0x504 <insert_node_ascn+0x6e>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
     4c8:	20 97       	sbiw	r28, 0x00	; 0
     4ca:	21 f4       	brne	.+8      	; 0x4d4 <insert_node_ascn+0x3e>
			np->link = Head;
     4cc:	32 83       	std	Z+2, r19	; 0x02
     4ce:	23 83       	std	Z+3, r18	; 0x03
			Head = np;
     4d0:	9a 01       	movw	r18, r20
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <insert_node_ascn+0x4a>
		}
		else {
			np->link = pp->link;
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	9b 81       	ldd	r25, Y+3	; 0x03
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     4dc:	fb 83       	std	Y+3, r31	; 0x03
     4de:	ea 83       	std	Y+2, r30	; 0x02
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
     4e0:	12 96       	adiw	r26, 0x02	; 2
     4e2:	8d 91       	ld	r24, X+
     4e4:	9c 91       	ld	r25, X
     4e6:	13 97       	sbiw	r26, 0x03	; 3
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	41 f0       	breq	.+16     	; 0x4fc <insert_node_ascn+0x66>
     4ec:	ed 01       	movw	r28, r26
												pp = cp, cp = cp->link)
     4ee:	dc 01       	movw	r26, r24
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4f0:	8d 91       	ld	r24, X+
     4f2:	9c 91       	ld	r25, X
     4f4:	11 97       	sbiw	r26, 0x01	; 1
     4f6:	86 17       	cp	r24, r22
     4f8:	97 07       	cpc	r25, r23
     4fa:	34 f3       	brlt	.-52     	; 0x4c8 <insert_node_ascn+0x32>
     4fc:	30 93 b5 02 	sts	0x02B5, r19
     500:	20 93 b6 02 	sts	0x02B6, r18
			np->link = pp->link;
			pp->link = np;
		}

	}
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <tour_list>:

void tour_list()
{
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     512:	8a e0       	ldi	r24, 0x0A	; 10
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 05 09 	call	0x120a	; 0x120a <putchar>
	for (cp = Head; cp != NULL; cp = cp->link)
     51a:	c0 91 b5 02 	lds	r28, 0x02B5
     51e:	d0 91 b6 02 	lds	r29, 0x02B6
		printf("-->%c ", cp->data);
     522:	0c e2       	ldi	r16, 0x2C	; 44
     524:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     526:	13 c0       	rjmp	.+38     	; 0x54e <tour_list+0x44>
		printf("-->%c ", cp->data);
     528:	00 d0       	rcall	.+0      	; 0x52a <tour_list+0x20>
     52a:	0f 92       	push	r0
     52c:	ed b7       	in	r30, 0x3d	; 61
     52e:	fe b7       	in	r31, 0x3e	; 62
     530:	12 83       	std	Z+2, r17	; 0x02
     532:	01 83       	std	Z+1, r16	; 0x01
     534:	88 81       	ld	r24, Y
     536:	99 81       	ldd	r25, Y+1	; 0x01
     538:	94 83       	std	Z+4, r25	; 0x04
     53a:	83 83       	std	Z+3, r24	; 0x03
     53c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     540:	0a 80       	ldd	r0, Y+2	; 0x02
     542:	db 81       	ldd	r29, Y+3	; 0x03
     544:	c0 2d       	mov	r28, r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	20 97       	sbiw	r28, 0x00	; 0
     550:	59 f7       	brne	.-42     	; 0x528 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 05 09 	call	0x120a	; 0x120a <putchar>
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <free_list>:

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     564:	09 c0       	rjmp	.+18     	; 0x578 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     566:	fc 01       	movw	r30, r24
     568:	22 81       	ldd	r18, Z+2	; 0x02
     56a:	33 81       	ldd	r19, Z+3	; 0x03
     56c:	30 93 b6 02 	sts	0x02B6, r19
     570:	20 93 b5 02 	sts	0x02B5, r18
	return cp;
}

void free_node(struct node *np)
{
	free(np);
     574:	0e 94 9e 07 	call	0xf3c	; 0xf3c <free>

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     578:	80 91 b5 02 	lds	r24, 0x02B5
     57c:	90 91 b6 02 	lds	r25, 0x02B6
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	89 f7       	brne	.-30     	; 0x566 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     584:	08 95       	ret

00000586 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     586:	8e e0       	ldi	r24, 0x0E	; 14
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 08 07 	call	0xe10	; 0xe10 <malloc>
	return tp;
}
     58e:	08 95       	ret

00000590 <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	f8 2e       	mov	r15, r24
     59e:	e9 2e       	mov	r14, r25
     5a0:	8b 01       	movw	r16, r22
	int 		 total;
	struct timer *tp, *cp, *pp;	// timer, current, previous pointer

	tp = get_timer();
     5a2:	0e 94 c3 02 	call	0x586	; 0x586 <get_timer>
     5a6:	dc 01       	movw	r26, r24
	tp->task = *tskp;	// task pointer
     5a8:	fc 01       	movw	r30, r24
     5aa:	32 96       	adiw	r30, 0x02	; 2
     5ac:	cf 2d       	mov	r28, r15
     5ae:	de 2d       	mov	r29, r14
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	09 90       	ld	r0, Y+
     5b4:	01 92       	st	Z+, r0
     5b6:	81 50       	subi	r24, 0x01	; 1
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <insert_timer+0x22>
	tp->time = ms;
     5ba:	11 96       	adiw	r26, 0x01	; 1
     5bc:	1c 93       	st	X, r17
     5be:	0e 93       	st	-X, r16

	if (Thead == NULL) {	// list empty
     5c0:	c0 91 b7 02 	lds	r28, 0x02B7
     5c4:	d0 91 b8 02 	lds	r29, 0x02B8
     5c8:	20 97       	sbiw	r28, 0x00	; 0
     5ca:	29 f4       	brne	.+10     	; 0x5d6 <insert_timer+0x46>
		Thead = tp, tp->link = NULL;
     5cc:	b0 93 b8 02 	sts	0x02B8, r27
     5d0:	a0 93 b7 02 	sts	0x02B7, r26
     5d4:	30 c0       	rjmp	.+96     	; 0x636 <insert_timer+0xa6>

	tp = get_timer();
	tp->task = *tskp;	// task pointer
	tp->time = ms;

	if (Thead == NULL) {	// list empty
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <insert_timer+0x52>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     5e0:	ef 01       	movw	r28, r30
		total += cp->time;
     5e2:	88 81       	ld	r24, Y
     5e4:	99 81       	ldd	r25, Y+1	; 0x01
     5e6:	48 0f       	add	r20, r24
     5e8:	59 1f       	adc	r21, r25
		if (total >= ms)
     5ea:	40 17       	cp	r20, r16
     5ec:	51 07       	cpc	r21, r17
     5ee:	34 f4       	brge	.+12     	; 0x5fc <insert_timer+0x6c>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     5f0:	ec 85       	ldd	r30, Y+12	; 0x0c
     5f2:	fd 85       	ldd	r31, Y+13	; 0x0d
     5f4:	9e 01       	movw	r18, r28
     5f6:	30 97       	sbiw	r30, 0x00	; 0
     5f8:	99 f7       	brne	.-26     	; 0x5e0 <insert_timer+0x50>
     5fa:	01 c0       	rjmp	.+2      	; 0x5fe <insert_timer+0x6e>
		total += cp->time;
		if (total >= ms)
     5fc:	fe 01       	movw	r30, r28
			break;
		pp = cp;
	}
	if (pp == NULL) {	// First insert
     5fe:	21 15       	cp	r18, r1
     600:	31 05       	cpc	r19, r1
     602:	79 f4       	brne	.+30     	; 0x622 <insert_timer+0x92>
		cp->time -= tp->time;
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	80 1b       	sub	r24, r16
     60a:	91 0b       	sbc	r25, r17
     60c:	91 83       	std	Z+1, r25	; 0x01
     60e:	80 83       	st	Z, r24
		tp->link = cp, Thead = tp;
     610:	1d 96       	adiw	r26, 0x0d	; 13
     612:	fc 93       	st	X, r31
     614:	ee 93       	st	-X, r30
     616:	1c 97       	sbiw	r26, 0x0c	; 12
     618:	b0 93 b8 02 	sts	0x02B8, r27
     61c:	a0 93 b7 02 	sts	0x02B7, r26
     620:	19 c0       	rjmp	.+50     	; 0x654 <insert_timer+0xc4>
	}
	else if (cp == NULL) {	// Last insert
     622:	30 97       	sbiw	r30, 0x00	; 0
     624:	69 f4       	brne	.+26     	; 0x640 <insert_timer+0xb0>
		tp->time -= total;	// pp->time
     626:	04 1b       	sub	r16, r20
     628:	15 0b       	sbc	r17, r21
     62a:	11 96       	adiw	r26, 0x01	; 1
     62c:	1c 93       	st	X, r17
     62e:	0e 93       	st	-X, r16
		pp->link = tp;
     630:	e9 01       	movw	r28, r18
     632:	bd 87       	std	Y+13, r27	; 0x0d
     634:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = NULL;
     636:	1d 96       	adiw	r26, 0x0d	; 13
     638:	1c 92       	st	X, r1
     63a:	1e 92       	st	-X, r1
     63c:	1c 97       	sbiw	r26, 0x0c	; 12
     63e:	0a c0       	rjmp	.+20     	; 0x654 <insert_timer+0xc4>
	}
	else {	// Middle insert
		total -= cp->time;	// just before
		tp->time -= tp->time;
     640:	11 96       	adiw	r26, 0x01	; 1
     642:	1c 92       	st	X, r1
     644:	1e 92       	st	-X, r1
		pp->link = tp;
     646:	e9 01       	movw	r28, r18
     648:	bd 87       	std	Y+13, r27	; 0x0d
     64a:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = cp;
     64c:	1d 96       	adiw	r26, 0x0d	; 13
     64e:	fc 93       	st	X, r31
     650:	ee 93       	st	-X, r30
     652:	1c 97       	sbiw	r26, 0x0c	; 12
	}
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	08 95       	ret

00000662 <tour_timer>:

void tour_timer()
{
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     66e:	8a e0       	ldi	r24, 0x0A	; 10
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 05 09 	call	0x120a	; 0x120a <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     676:	c0 91 b7 02 	lds	r28, 0x02B7
     67a:	d0 91 b8 02 	lds	r29, 0x02B8
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     67e:	00 e0       	ldi	r16, 0x00	; 0
     680:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     682:	86 e3       	ldi	r24, 0x36	; 54
     684:	e8 2e       	mov	r14, r24
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     68a:	20 c0       	rjmp	.+64     	; 0x6cc <tour_timer+0x6a>
		total += cp->time;
     68c:	88 81       	ld	r24, Y
     68e:	99 81       	ldd	r25, Y+1	; 0x01
     690:	08 0f       	add	r16, r24
     692:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     694:	00 d0       	rcall	.+0      	; 0x696 <tour_timer+0x34>
     696:	00 d0       	rcall	.+0      	; 0x698 <tour_timer+0x36>
     698:	ed b7       	in	r30, 0x3d	; 61
     69a:	fe b7       	in	r31, 0x3e	; 62
     69c:	31 96       	adiw	r30, 0x01	; 1
     69e:	ad b7       	in	r26, 0x3d	; 61
     6a0:	be b7       	in	r27, 0x3e	; 62
     6a2:	12 96       	adiw	r26, 0x02	; 2
     6a4:	fc 92       	st	X, r15
     6a6:	ee 92       	st	-X, r14
     6a8:	11 97       	sbiw	r26, 0x01	; 1
     6aa:	93 83       	std	Z+3, r25	; 0x03
     6ac:	82 83       	std	Z+2, r24	; 0x02
     6ae:	15 83       	std	Z+5, r17	; 0x05
     6b0:	04 83       	std	Z+4, r16	; 0x04
     6b2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     6b6:	0c 84       	ldd	r0, Y+12	; 0x0c
     6b8:	dd 85       	ldd	r29, Y+13	; 0x0d
     6ba:	c0 2d       	mov	r28, r0
     6bc:	8d b7       	in	r24, 0x3d	; 61
     6be:	9e b7       	in	r25, 0x3e	; 62
     6c0:	06 96       	adiw	r24, 0x06	; 6
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	9e bf       	out	0x3e, r25	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	8d bf       	out	0x3d, r24	; 61
     6cc:	20 97       	sbiw	r28, 0x00	; 0
     6ce:	f1 f6       	brne	.-68     	; 0x68c <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     6d0:	8a e0       	ldi	r24, 0x0A	; 10
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 05 09 	call	0x120a	; 0x120a <putchar>
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <free_timer>:

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     6e6:	09 c0       	rjmp	.+18     	; 0x6fa <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     6e8:	fc 01       	movw	r30, r24
     6ea:	24 85       	ldd	r18, Z+12	; 0x0c
     6ec:	35 85       	ldd	r19, Z+13	; 0x0d
     6ee:	30 93 b8 02 	sts	0x02B8, r19
     6f2:	20 93 b7 02 	sts	0x02B7, r18
		free(cp);
     6f6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <free>

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     6fa:	80 91 b7 02 	lds	r24, 0x02B7
     6fe:	90 91 b8 02 	lds	r25, 0x02B8
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	89 f7       	brne	.-30     	; 0x6e8 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     706:	08 95       	ret

00000708 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     708:	f8 94       	cli
		ch = qi_delete();
     70a:	0e 94 b9 04 	call	0x972	; 0x972 <qi_delete>
		sei();
     70e:	78 94       	sei
	} while (ch == 0);
     710:	88 23       	and	r24, r24
     712:	d1 f3       	breq	.-12     	; 0x708 <uart_getchar>

	if (ch == E0T) return -1;
     714:	84 30       	cpi	r24, 0x04	; 4
     716:	11 f0       	breq	.+4      	; 0x71c <uart_getchar+0x14>
	else 		   return ch;
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return ch;
}
     720:	08 95       	ret

00000722 <uart_putchar>:
	sbi(UCSR0B, RXEN0);				// RX enable
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
}

int uart_putchar(char ch, FILE *stream)
{
     722:	cf 93       	push	r28
     724:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     726:	8a 30       	cpi	r24, 0x0A	; 10
     728:	19 f4       	brne	.+6      	; 0x730 <uart_putchar+0xe>
     72a:	8d e0       	ldi	r24, 0x0D	; 13
     72c:	0e 94 91 03 	call	0x722	; 0x722 <uart_putchar>
	cli();
     730:	f8 94       	cli
	if(!uart_busy) {
     732:	80 91 5f 03 	lds	r24, 0x035F
     736:	88 23       	and	r24, r24
     738:	59 f4       	brne	.+22     	; 0x750 <uart_putchar+0x2e>
		UDR0 = ch;
     73a:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 5f 03 	sts	0x035F, r24
     744:	0a c0       	rjmp	.+20     	; 0x75a <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     746:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     748:	86 ef       	ldi	r24, 0xF6	; 246
     74a:	8a 95       	dec	r24
     74c:	f1 f7       	brne	.-4      	; 0x74a <uart_putchar+0x28>
			_delay_us(100);
			cli();
     74e:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     750:	8c 2f       	mov	r24, r28
     752:	0e 94 d6 04 	call	0x9ac	; 0x9ac <qo_insert>
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	b1 f3       	breq	.-20     	; 0x746 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     75a:	78 94       	sei
	return 1;
}
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <uart_init>:
char uart_busy;
static int echo_mode = 1;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     764:	82 e4       	ldi	r24, 0x42	; 66
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	90 93 ed 03 	sts	0x03ED, r25
     76c:	80 93 ec 03 	sts	0x03EC, r24
     770:	80 e5       	ldi	r24, 0x50	; 80
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	90 93 ef 03 	sts	0x03EF, r25
     778:	80 93 ee 03 	sts	0x03EE, r24
	q_init();
     77c:	0e 94 86 04 	call	0x90c	; 0x90c <q_init>
	uart_busy = 0;
     780:	10 92 5f 03 	sts	0x035F, r1

	UBRR0H = 0x00; UBRR0L = 0x03;	// 115.2Kbps
     784:	10 92 c5 00 	sts	0x00C5, r1
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0B, TXEN0);				// TX enable
     78e:	e1 ec       	ldi	r30, 0xC1	; 193
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	88 60       	ori	r24, 0x08	; 8
     796:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);			// TX complete interrupt
     798:	80 81       	ld	r24, Z
     79a:	80 64       	ori	r24, 0x40	; 64
     79c:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);				// RX enable
     79e:	80 81       	ld	r24, Z
     7a0:	80 61       	ori	r24, 0x10	; 16
     7a2:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
     7a4:	80 81       	ld	r24, Z
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	80 83       	st	Z, r24
}
     7aa:	08 95       	ret

000007ac <uart_echo>:
	if (ch == E0T) return -1;
	else 		   return ch;
}

void uart_echo(char ch)
{
     7ac:	cf 93       	push	r28
     7ae:	c8 2f       	mov	r28, r24
	if (ch == '\n')	uart_echo( '\r' );
     7b0:	8a 30       	cpi	r24, 0x0A	; 10
     7b2:	19 f4       	brne	.+6      	; 0x7ba <uart_echo+0xe>
     7b4:	8d e0       	ldi	r24, 0x0D	; 13
     7b6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <uart_echo>
	if (!uart_busy) {
     7ba:	80 91 5f 03 	lds	r24, 0x035F
     7be:	88 23       	and	r24, r24
     7c0:	31 f4       	brne	.+12     	; 0x7ce <uart_echo+0x22>
		UDR0 = ch;
     7c2:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 5f 03 	sts	0x035F, r24
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     7ce:	8c 2f       	mov	r24, r28
     7d0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <qo_insert>

}
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <uart_peek>:

int uart_peek()
{
	return qi_peek();
     7d8:	0e 94 15 05 	call	0xa2a	; 0xa2a <qi_peek>
}
     7dc:	08 95       	ret

000007de <__vector_27>:

////////////////////////////////////////////
ISR(USART0_TX_vect)
{
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	0b b6       	in	r0, 0x3b	; 59
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	ef 93       	push	r30
     802:	ff 93       	push	r31
	char ch;

	if ((ch = qo_delete()) == 0)
     804:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <qo_delete>
     808:	88 23       	and	r24, r24
     80a:	19 f4       	brne	.+6      	; 0x812 <__vector_27+0x34>
		uart_busy = 0;
     80c:	10 92 5f 03 	sts	0x035F, r1
     810:	02 c0       	rjmp	.+4      	; 0x816 <__vector_27+0x38>
	else
		UDR0 = ch;
     812:	80 93 c6 00 	sts	0x00C6, r24
}
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0b be       	out	0x3b, r0	; 59
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <__vector_25>:

ISR(USART0_RX_vect)
{
     83c:	1f 92       	push	r1
     83e:	0f 92       	push	r0
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	0f 92       	push	r0
     844:	0b b6       	in	r0, 0x3b	; 59
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	1f 93       	push	r17
     84c:	2f 93       	push	r18
     84e:	3f 93       	push	r19
     850:	4f 93       	push	r20
     852:	5f 93       	push	r21
     854:	6f 93       	push	r22
     856:	7f 93       	push	r23
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
     860:	ef 93       	push	r30
     862:	ff 93       	push	r31
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	2a 97       	sbiw	r28, 0x0a	; 10
     86e:	de bf       	out	0x3e, r29	; 62
     870:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     872:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
     876:	1b 31       	cpi	r17, 0x1B	; 27
     878:	61 f4       	brne	.+24     	; 0x892 <__vector_25+0x56>
		echo_mode = ((echo_mode+1) & 0x01);
     87a:	80 91 5e 02 	lds	r24, 0x025E
     87e:	90 91 5f 02 	lds	r25, 0x025F
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	81 70       	andi	r24, 0x01	; 1
     886:	90 70       	andi	r25, 0x00	; 0
     888:	90 93 5f 02 	sts	0x025F, r25
     88c:	80 93 5e 02 	sts	0x025E, r24
		return;
     890:	24 c0       	rjmp	.+72     	; 0x8da <__vector_25+0x9e>
	}
	if (ch != EOT) {
     892:	14 30       	cpi	r17, 0x04	; 4
     894:	69 f0       	breq	.+26     	; 0x8b0 <__vector_25+0x74>
		if (ch == '\r') ch = '\n';
     896:	1d 30       	cpi	r17, 0x0D	; 13
     898:	09 f4       	brne	.+2      	; 0x89c <__vector_25+0x60>
     89a:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode) uart_echo(ch);
     89c:	20 91 5e 02 	lds	r18, 0x025E
     8a0:	30 91 5f 02 	lds	r19, 0x025F
     8a4:	21 15       	cp	r18, r1
     8a6:	31 05       	cpc	r19, r1
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <__vector_25+0x74>
     8aa:	81 2f       	mov	r24, r17
     8ac:	0e 94 d6 03 	call	0x7ac	; 0x7ac <uart_echo>
	}
	qi_insert(ch);
     8b0:	81 2f       	mov	r24, r17
     8b2:	0e 94 97 04 	call	0x92e	; 0x92e <qi_insert>
	if (ch == EOT || ch == '\n') {
     8b6:	14 30       	cpi	r17, 0x04	; 4
     8b8:	11 f0       	breq	.+4      	; 0x8be <__vector_25+0x82>
     8ba:	1a 30       	cpi	r17, 0x0A	; 10
     8bc:	71 f4       	brne	.+28     	; 0x8da <__vector_25+0x9e>
		task.fun = task_cmd;
     8be:	80 e1       	ldi	r24, 0x10	; 16
     8c0:	96 e0       	ldi	r25, 0x06	; 6
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     8c6:	ce 01       	movw	r24, r28
     8c8:	03 96       	adiw	r24, 0x03	; 3
     8ca:	61 e4       	ldi	r22, 0x41	; 65
     8cc:	72 e0       	ldi	r23, 0x02	; 2
     8ce:	0e 94 63 08 	call	0x10c6	; 0x10c6 <strcpy>
		task_insert(&task);
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <task_insert>
	}
}
     8da:	2a 96       	adiw	r28, 0x0a	; 10
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	1f 91       	pop	r17
     8fe:	0f 90       	pop	r0
     900:	0b be       	out	0x3b, r0	; 59
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     90c:	10 92 a5 03 	sts	0x03A5, r1
     910:	10 92 a4 03 	sts	0x03A4, r1
     914:	10 92 a3 03 	sts	0x03A3, r1
     918:	10 92 a2 03 	sts	0x03A2, r1
     91c:	10 92 a7 03 	sts	0x03A7, r1
     920:	10 92 a6 03 	sts	0x03A6, r1
     924:	10 92 61 03 	sts	0x0361, r1
     928:	10 92 60 03 	sts	0x0360, r1
}
     92c:	08 95       	ret

0000092e <qi_insert>:

int qi_insert(char ch)
{
     92e:	48 2f       	mov	r20, r24
	if ((ri + 1) % QI_SIZE == fi)
     930:	20 91 a6 03 	lds	r18, 0x03A6
     934:	30 91 a7 03 	lds	r19, 0x03A7
     938:	2f 5f       	subi	r18, 0xFF	; 255
     93a:	3f 4f       	sbci	r19, 0xFF	; 255
     93c:	c9 01       	movw	r24, r18
     93e:	60 e4       	ldi	r22, 0x40	; 64
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     946:	9c 01       	movw	r18, r24
     948:	80 91 60 03 	lds	r24, 0x0360
     94c:	90 91 61 03 	lds	r25, 0x0361
     950:	28 17       	cp	r18, r24
     952:	39 07       	cpc	r19, r25
     954:	59 f0       	breq	.+22     	; 0x96c <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     956:	30 93 a7 03 	sts	0x03A7, r19
     95a:	20 93 a6 03 	sts	0x03A6, r18
	qi[ri] = ch;
     95e:	28 55       	subi	r18, 0x58	; 88
     960:	3c 4f       	sbci	r19, 0xFC	; 252
     962:	f9 01       	movw	r30, r18
     964:	40 83       	st	Z, r20
	return 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri + 1) % QI_SIZE == fi)
		return 0;
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     970:	08 95       	ret

00000972 <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     972:	80 91 60 03 	lds	r24, 0x0360
     976:	90 91 61 03 	lds	r25, 0x0361
     97a:	20 91 a6 03 	lds	r18, 0x03A6
     97e:	30 91 a7 03 	lds	r19, 0x03A7
     982:	28 17       	cp	r18, r24
     984:	39 07       	cpc	r19, r25
     986:	79 f0       	breq	.+30     	; 0x9a6 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	60 e4       	ldi	r22, 0x40	; 64
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     992:	90 93 61 03 	sts	0x0361, r25
     996:	80 93 60 03 	sts	0x0360, r24
	return qi[fi];
     99a:	88 55       	subi	r24, 0x58	; 88
     99c:	9c 4f       	sbci	r25, 0xFC	; 252
     99e:	fc 01       	movw	r30, r24
     9a0:	80 81       	ld	r24, Z
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     9aa:	08 95       	ret

000009ac <qo_insert>:

int qo_insert(char ch)
{
     9ac:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     9ae:	20 91 a4 03 	lds	r18, 0x03A4
     9b2:	30 91 a5 03 	lds	r19, 0x03A5
     9b6:	2f 5f       	subi	r18, 0xFF	; 255
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	c9 01       	movw	r24, r18
     9bc:	60 e4       	ldi	r22, 0x40	; 64
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     9c4:	9c 01       	movw	r18, r24
     9c6:	80 91 a2 03 	lds	r24, 0x03A2
     9ca:	90 91 a3 03 	lds	r25, 0x03A3
     9ce:	28 17       	cp	r18, r24
     9d0:	39 07       	cpc	r19, r25
     9d2:	59 f0       	breq	.+22     	; 0x9ea <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     9d4:	30 93 a5 03 	sts	0x03A5, r19
     9d8:	20 93 a4 03 	sts	0x03A4, r18
	qo[ro] = ch;
     9dc:	2e 59       	subi	r18, 0x9E	; 158
     9de:	3c 4f       	sbci	r19, 0xFC	; 252
     9e0:	f9 01       	movw	r30, r18
     9e2:	40 83       	st	Z, r20
	return 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     9ee:	08 95       	ret

000009f0 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     9f0:	80 91 a2 03 	lds	r24, 0x03A2
     9f4:	90 91 a3 03 	lds	r25, 0x03A3
     9f8:	20 91 a4 03 	lds	r18, 0x03A4
     9fc:	30 91 a5 03 	lds	r19, 0x03A5
     a00:	28 17       	cp	r18, r24
     a02:	39 07       	cpc	r19, r25
     a04:	79 f0       	breq	.+30     	; 0xa24 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	60 e4       	ldi	r22, 0x40	; 64
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     a10:	90 93 a3 03 	sts	0x03A3, r25
     a14:	80 93 a2 03 	sts	0x03A2, r24
	return qo[fo];
     a18:	8e 59       	subi	r24, 0x9E	; 158
     a1a:	9c 4f       	sbci	r25, 0xFC	; 252
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     a28:	08 95       	ret

00000a2a <qi_peek>:

int qi_peek()
{
	if (fi == ri)
     a2a:	80 91 60 03 	lds	r24, 0x0360
     a2e:	90 91 61 03 	lds	r25, 0x0361
     a32:	20 91 a6 03 	lds	r18, 0x03A6
     a36:	30 91 a7 03 	lds	r19, 0x03A7
     a3a:	82 17       	cp	r24, r18
     a3c:	93 07       	cpc	r25, r19
     a3e:	41 f0       	breq	.+16     	; 0xa50 <qi_peek+0x26>
		return 0;
	else
		return(qi[fi + 1] % QI_SIZE);
     a40:	88 55       	subi	r24, 0x58	; 88
     a42:	9c 4f       	sbci	r25, 0xFC	; 252
     a44:	fc 01       	movw	r30, r24
     a46:	81 81       	ldd	r24, Z+1	; 0x01
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	8f 73       	andi	r24, 0x3F	; 63
     a4c:	90 70       	andi	r25, 0x00	; 0
     a4e:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[fi + 1] % QI_SIZE);
}
     a54:	08 95       	ret

00000a56 <timer_init>:
#include "Timer_linked_list.h"
#include "Task_queue.h"

void timer_init()
{
	TCNT2 = 0;					// Timer/Counter Register of Timer 2
     a56:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1 << AS2);			// Asynchronous Status Register(Asynchronous Timer/Counter 2
     a5a:	e6 eb       	ldi	r30, 0xB6	; 182
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	80 62       	ori	r24, 0x20	; 32
     a62:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);		// Timer/Counter Interrupt Mask Register of timer 2
     a64:	e0 e7       	ldi	r30, 0x70	; 112
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	80 83       	st	Z, r24
	// Timer/Counter Control Register B of timer 2
	TCCR2B |= (1 << CS20);	TCCR2B |= (1 << CS21);	// 32KHz/32 prescaling, clock 1KHz
     a6e:	e1 eb       	ldi	r30, 0xB1	; 177
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	81 60       	ori	r24, 0x01	; 1
     a76:	80 83       	st	Z, r24
     a78:	80 81       	ld	r24, Z
     a7a:	82 60       	ori	r24, 0x02	; 2
     a7c:	80 83       	st	Z, r24
}
     a7e:	08 95       	ret

00000a80 <timer_expire>:

void timer_expire()
{
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     a84:	0d c0       	rjmp	.+26     	; 0xaa0 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     a86:	8c 85       	ldd	r24, Y+12	; 0x0c
     a88:	9d 85       	ldd	r25, Y+13	; 0x0d
     a8a:	90 93 b8 02 	sts	0x02B8, r25
     a8e:	80 93 b7 02 	sts	0x02B7, r24

		task_insert(&tp->task);
     a92:	ce 01       	movw	r24, r28
     a94:	02 96       	adiw	r24, 0x02	; 2
     a96:	0e 94 9b 05 	call	0xb36	; 0xb36 <task_insert>

		free(tp);
     a9a:	ce 01       	movw	r24, r28
     a9c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <free>

void timer_expire()
{
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     aa0:	c0 91 b7 02 	lds	r28, 0x02B7
     aa4:	d0 91 b8 02 	lds	r29, 0x02B8
     aa8:	20 97       	sbiw	r28, 0x00	; 0
     aaa:	21 f0       	breq	.+8      	; 0xab4 <timer_expire+0x34>
     aac:	88 81       	ld	r24, Y
     aae:	99 81       	ldd	r25, Y+1	; 0x01
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	49 f3       	breq	.-46     	; 0xa86 <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <__vector_15>:

////////////////////////////////
ISR(TIMER2_OVF_vect)
{
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	0b b6       	in	r0, 0x3b	; 59
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	ef 93       	push	r30
     ade:	ff 93       	push	r31
	if (!Thead)
     ae0:	e0 91 b7 02 	lds	r30, 0x02B7
     ae4:	f0 91 b8 02 	lds	r31, 0x02B8
     ae8:	30 97       	sbiw	r30, 0x00	; 0
     aea:	49 f0       	breq	.+18     	; 0xafe <__vector_15+0x44>
		return;
	if (--Thead->time == 0)
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	11 f4       	brne	.+4      	; 0xafe <__vector_15+0x44>
		timer_expire();
     afa:	0e 94 40 05 	call	0xa80	; 0xa80 <timer_expire>
}
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0b be       	out	0x3b, r0	; 59
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <task_init>:
#include "app.h"
#include "Timer_linked_list.h"

void task_init()
{
	Task_f = Task_r = 0;
     b24:	10 92 bc 02 	sts	0x02BC, r1
     b28:	10 92 bb 02 	sts	0x02BB, r1
     b2c:	10 92 5e 03 	sts	0x035E, r1
     b30:	10 92 5d 03 	sts	0x035D, r1
}
     b34:	08 95       	ret

00000b36 <task_insert>:

int task_insert(struct task *tskp)
{
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	48 2f       	mov	r20, r24
     b3c:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
     b3e:	80 91 bb 02 	lds	r24, 0x02BB
     b42:	90 91 bc 02 	lds	r25, 0x02BC
     b46:	c0 91 5d 03 	lds	r28, 0x035D
     b4a:	d0 91 5e 03 	lds	r29, 0x035E
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	20 e1       	ldi	r18, 0x10	; 16
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	b9 01       	movw	r22, r18
     b56:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     b5a:	8c 17       	cp	r24, r28
     b5c:	9d 07       	cpc	r25, r29
     b5e:	31 f1       	breq	.+76     	; 0xbac <task_insert+0x76>
		return 0;
	Task_r = (Task_f + 1) % MAX_TASK;
     b60:	80 91 5d 03 	lds	r24, 0x035D
     b64:	90 91 5e 03 	lds	r25, 0x035E
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	b9 01       	movw	r22, r18
     b6c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     b70:	90 93 bc 02 	sts	0x02BC, r25
     b74:	80 93 bb 02 	sts	0x02BB, r24
	Task_q[Task_r] = *tskp;
     b78:	80 91 bb 02 	lds	r24, 0x02BB
     b7c:	90 91 bc 02 	lds	r25, 0x02BC
     b80:	dc 01       	movw	r26, r24
     b82:	aa 0f       	add	r26, r26
     b84:	bb 1f       	adc	r27, r27
     b86:	63 e0       	ldi	r22, 0x03	; 3
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	6a 95       	dec	r22
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <task_insert+0x52>
     b90:	a8 0f       	add	r26, r24
     b92:	b9 1f       	adc	r27, r25
     b94:	a3 54       	subi	r26, 0x43	; 67
     b96:	bd 4f       	sbci	r27, 0xFD	; 253
     b98:	c4 2f       	mov	r28, r20
     b9a:	de 2f       	mov	r29, r30
     b9c:	8a e0       	ldi	r24, 0x0A	; 10
     b9e:	09 90       	ld	r0, Y+
     ba0:	0d 92       	st	X+, r0
     ba2:	81 50       	subi	r24, 0x01	; 1
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <task_insert+0x68>
	return 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
		return 0;
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_f + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return 1;
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <task_delete>:
int task_delete(struct task *tskp)
{
     bb6:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)	// Empty
     bb8:	40 91 bb 02 	lds	r20, 0x02BB
     bbc:	50 91 bc 02 	lds	r21, 0x02BC
     bc0:	80 91 5d 03 	lds	r24, 0x035D
     bc4:	90 91 5e 03 	lds	r25, 0x035E
     bc8:	48 17       	cp	r20, r24
     bca:	59 07       	cpc	r21, r25
     bcc:	31 f1       	breq	.+76     	; 0xc1a <task_delete+0x64>
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
     bce:	80 91 5d 03 	lds	r24, 0x035D
     bd2:	90 91 5e 03 	lds	r25, 0x035E
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	60 e1       	ldi	r22, 0x10	; 16
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
     be0:	90 93 5e 03 	sts	0x035E, r25
     be4:	80 93 5d 03 	sts	0x035D, r24
	*tskp = Task_q[Task_f];
     be8:	80 91 5d 03 	lds	r24, 0x035D
     bec:	90 91 5e 03 	lds	r25, 0x035E
     bf0:	fc 01       	movw	r30, r24
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	a3 e0       	ldi	r26, 0x03	; 3
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	aa 95       	dec	r26
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <task_delete+0x42>
     c00:	e8 0f       	add	r30, r24
     c02:	f9 1f       	adc	r31, r25
     c04:	d9 01       	movw	r26, r18
     c06:	e3 54       	subi	r30, 0x43	; 67
     c08:	fd 4f       	sbci	r31, 0xFD	; 253
     c0a:	8a e0       	ldi	r24, 0x0A	; 10
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	e1 f7       	brne	.-8      	; 0xc0c <task_delete+0x56>
	return 1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	08 95       	ret
	return 1;
}
int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)	// Empty
		return 0;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
     c1e:	08 95       	ret

00000c20 <task_cmd>:

void task_cmd(char *arg)
{
     c20:	af 92       	push	r10
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	ca 54       	subi	r28, 0x4A	; 74
     c3a:	d0 40       	sbci	r29, 0x00	; 0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(!uart_peek()) return;
     c46:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <uart_peek>
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	09 f4       	brne	.+2      	; 0xc50 <task_cmd+0x30>
     c4e:	7c c0       	rjmp	.+248    	; 0xd48 <task_cmd+0x128>

	if(gets(buf) == NULL) {
     c50:	ce 01       	movw	r24, r28
     c52:	0b 96       	adiw	r24, 0x0b	; 11
     c54:	0e 94 cd 08 	call	0x119a	; 0x119a <gets>
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	29 f4       	brne	.+10     	; 0xc66 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     c5c:	80 e6       	ldi	r24, 0x60	; 96
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	0e 94 0c 09 	call	0x1218	; 0x1218 <puts>
     c64:	ff cf       	rjmp	.-2      	; 0xc64 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     c66:	ce 01       	movw	r24, r28
     c68:	0b 96       	adiw	r24, 0x0b	; 11
     c6a:	65 e7       	ldi	r22, 0x75	; 117
     c6c:	72 e0       	ldi	r23, 0x02	; 2
     c6e:	0e 94 55 08 	call	0x10aa	; 0x10aa <strtok>
     c72:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	65 e7       	ldi	r22, 0x75	; 117
     c7a:	72 e0       	ldi	r23, 0x02	; 2
     c7c:	0e 94 55 08 	call	0x10aa	; 0x10aa <strtok>
     c80:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	65 e7       	ldi	r22, 0x75	; 117
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	0e 94 55 08 	call	0x10aa	; 0x10aa <strtok>
     c8e:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	65 e7       	ldi	r22, 0x75	; 117
     c96:	72 e0       	ldi	r23, 0x02	; 2
     c98:	0e 94 55 08 	call	0x10aa	; 0x10aa <strtok>
     c9c:	6c 01       	movw	r12, r24

	if(cp0 == NULL) {
     c9e:	01 15       	cp	r16, r1
     ca0:	11 05       	cpc	r17, r1
     ca2:	09 f4       	brne	.+2      	; 0xca6 <task_cmd+0x86>
     ca4:	45 c0       	rjmp	.+138    	; 0xd30 <task_cmd+0x110>
		// printf("!!!-111\n");
		printf( "$ "); return;
	}

	if(!strcmp(cp0, "prime"))
     ca6:	c8 01       	movw	r24, r16
     ca8:	6d e7       	ldi	r22, 0x7D	; 125
     caa:	72 e0       	ldi	r23, 0x02	; 2
     cac:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <strcmp>
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	21 f4       	brne	.+8      	; 0xcbc <task_cmd+0x9c>
		task_prime(cp1);
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 91 01 	call	0x322	; 0x322 <task_prime>
     cba:	3a c0       	rjmp	.+116    	; 0xd30 <task_cmd+0x110>
	else if(!strcmp(cp0, "timer")) {
     cbc:	c8 01       	movw	r24, r16
     cbe:	63 e8       	ldi	r22, 0x83	; 131
     cc0:	72 e0       	ldi	r23, 0x02	; 2
     cc2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <strcmp>
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	79 f5       	brne	.+94     	; 0xd28 <task_cmd+0x108>
		if(cp1 == NULL) {
     cca:	e1 14       	cp	r14, r1
     ccc:	f1 04       	cpc	r15, r1
     cce:	19 f4       	brne	.+6      	; 0xcd6 <task_cmd+0xb6>
			printf("!!!-222\n");
     cd0:	89 e8       	ldi	r24, 0x89	; 137
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	2b c0       	rjmp	.+86     	; 0xd2c <task_cmd+0x10c>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     cd6:	c7 01       	movw	r24, r14
     cd8:	0e 94 37 08 	call	0x106e	; 0x106e <atoi>
     cdc:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     cde:	c5 01       	movw	r24, r10
     ce0:	6d e7       	ldi	r22, 0x7D	; 125
     ce2:	72 e0       	ldi	r23, 0x02	; 2
     ce4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <strcmp>
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	d9 f4       	brne	.+54     	; 0xd22 <task_cmd+0x102>
			task.fun = task_prime;
     cec:	81 e9       	ldi	r24, 0x91	; 145
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
			if(cp3) strcpy(task.arg, cp3);
     cf4:	ce 01       	movw	r24, r28
     cf6:	03 96       	adiw	r24, 0x03	; 3
     cf8:	c1 14       	cp	r12, r1
     cfa:	d1 04       	cpc	r13, r1
     cfc:	11 f0       	breq	.+4      	; 0xd02 <task_cmd+0xe2>
     cfe:	b6 01       	movw	r22, r12
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <task_cmd+0xe6>
			else strcpy(task.arg, "");
     d02:	61 e9       	ldi	r22, 0x91	; 145
     d04:	72 e0       	ldi	r23, 0x02	; 2
     d06:	0e 94 63 08 	call	0x10c6	; 0x10c6 <strcpy>
			cli();
     d0a:	f8 94       	cli
		if(cp1 == NULL) {
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     d0c:	c8 01       	movw	r24, r16
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3) strcpy(task.arg, cp3);
			else strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     d16:	ce 01       	movw	r24, r28
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	0e 94 c8 02 	call	0x590	; 0x590 <insert_timer>
			sei();
     d1e:	78 94       	sei
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <task_cmd+0x110>
		}
		else printf("!!!-333\n");
     d22:	82 e9       	ldi	r24, 0x92	; 146
     d24:	92 e0       	ldi	r25, 0x02	; 2
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <task_cmd+0x10c>
	}
	else printf("Unknown command...\n");
     d28:	8a e9       	ldi	r24, 0x9A	; 154
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	0e 94 0c 09 	call	0x1218	; 0x1218 <puts>

	printf("$ ");
     d30:	0f 92       	push	r0
     d32:	0f 92       	push	r0
     d34:	8a e7       	ldi	r24, 0x7A	; 122
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	ed b7       	in	r30, 0x3d	; 61
     d3a:	fe b7       	in	r31, 0x3e	; 62
     d3c:	92 83       	std	Z+2, r25	; 0x02
     d3e:	81 83       	std	Z+1, r24	; 0x01
     d40:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
}
     d48:	c6 5b       	subi	r28, 0xB6	; 182
     d4a:	df 4f       	sbci	r29, 0xFF	; 255
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	08 95       	ret

00000d6c <main>:
#include "app.h"
#include "Task_queue.h"
#include "Timer.h"

int main()
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	2a 97       	sbiw	r28, 0x0a	; 10
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;

	uart_init();
     d80:	0e 94 b2 03 	call	0x764	; 0x764 <uart_init>
	task_init();
     d84:	0e 94 92 05 	call	0xb24	; 0xb24 <task_init>
	timer_init();
     d88:	0e 94 2b 05 	call	0xa56	; 0xa56 <timer_init>

	sei();
     d8c:	78 94       	sei

	printf("$ ");
     d8e:	0f 92       	push	r0
     d90:	0f 92       	push	r0
     d92:	83 e3       	ldi	r24, 0x33	; 51
     d94:	92 e0       	ldi	r25, 0x02	; 2
     d96:	ed b7       	in	r30, 0x3d	; 61
     d98:	fe b7       	in	r31, 0x3e	; 62
     d9a:	92 83       	std	Z+2, r25	; 0x02
     d9c:	81 83       	std	Z+1, r24	; 0x01
     d9e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <printf>
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0

	while(1) {
		cli();
     da6:	f8 94       	cli
		tag = task_delete(&task);
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	0e 94 db 05 	call	0xbb6	; 0xbb6 <task_delete>
		sei();
     db0:	78 94       	sei
		if (tag)
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	c1 f3       	breq	.-16     	; 0xda6 <main+0x3a>
			(*(task.fun))(task.arg);
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	ce 01       	movw	r24, r28
     dbc:	03 96       	adiw	r24, 0x03	; 3
     dbe:	19 95       	eicall
     dc0:	f2 cf       	rjmp	.-28     	; 0xda6 <main+0x3a>

00000dc2 <__divmodhi4>:
     dc2:	97 fb       	bst	r25, 7
     dc4:	09 2e       	mov	r0, r25
     dc6:	07 26       	eor	r0, r23
     dc8:	0a d0       	rcall	.+20     	; 0xdde <__divmodhi4_neg1>
     dca:	77 fd       	sbrc	r23, 7
     dcc:	04 d0       	rcall	.+8      	; 0xdd6 <__divmodhi4_neg2>
     dce:	0c d0       	rcall	.+24     	; 0xde8 <__udivmodhi4>
     dd0:	06 d0       	rcall	.+12     	; 0xdde <__divmodhi4_neg1>
     dd2:	00 20       	and	r0, r0
     dd4:	1a f4       	brpl	.+6      	; 0xddc <__divmodhi4_exit>

00000dd6 <__divmodhi4_neg2>:
     dd6:	70 95       	com	r23
     dd8:	61 95       	neg	r22
     dda:	7f 4f       	sbci	r23, 0xFF	; 255

00000ddc <__divmodhi4_exit>:
     ddc:	08 95       	ret

00000dde <__divmodhi4_neg1>:
     dde:	f6 f7       	brtc	.-4      	; 0xddc <__divmodhi4_exit>
     de0:	90 95       	com	r25
     de2:	81 95       	neg	r24
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	08 95       	ret

00000de8 <__udivmodhi4>:
     de8:	aa 1b       	sub	r26, r26
     dea:	bb 1b       	sub	r27, r27
     dec:	51 e1       	ldi	r21, 0x11	; 17
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <__udivmodhi4_ep>

00000df0 <__udivmodhi4_loop>:
     df0:	aa 1f       	adc	r26, r26
     df2:	bb 1f       	adc	r27, r27
     df4:	a6 17       	cp	r26, r22
     df6:	b7 07       	cpc	r27, r23
     df8:	10 f0       	brcs	.+4      	; 0xdfe <__udivmodhi4_ep>
     dfa:	a6 1b       	sub	r26, r22
     dfc:	b7 0b       	sbc	r27, r23

00000dfe <__udivmodhi4_ep>:
     dfe:	88 1f       	adc	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	5a 95       	dec	r21
     e04:	a9 f7       	brne	.-22     	; 0xdf0 <__udivmodhi4_loop>
     e06:	80 95       	com	r24
     e08:	90 95       	com	r25
     e0a:	bc 01       	movw	r22, r24
     e0c:	cd 01       	movw	r24, r26
     e0e:	08 95       	ret

00000e10 <malloc>:
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	ac 01       	movw	r20, r24
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	91 05       	cpc	r25, r1
     e1a:	10 f4       	brcc	.+4      	; 0xe20 <malloc+0x10>
     e1c:	42 e0       	ldi	r20, 0x02	; 2
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	e0 91 ea 03 	lds	r30, 0x03EA
     e24:	f0 91 eb 03 	lds	r31, 0x03EB
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	24 c0       	rjmp	.+72     	; 0xe7a <malloc+0x6a>
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	84 17       	cp	r24, r20
     e38:	95 07       	cpc	r25, r21
     e3a:	d0 f0       	brcs	.+52     	; 0xe70 <malloc+0x60>
     e3c:	84 17       	cp	r24, r20
     e3e:	95 07       	cpc	r25, r21
     e40:	71 f4       	brne	.+28     	; 0xe5e <malloc+0x4e>
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	10 97       	sbiw	r26, 0x00	; 0
     e48:	29 f0       	breq	.+10     	; 0xe54 <malloc+0x44>
     e4a:	13 96       	adiw	r26, 0x03	; 3
     e4c:	9c 93       	st	X, r25
     e4e:	8e 93       	st	-X, r24
     e50:	12 97       	sbiw	r26, 0x02	; 2
     e52:	2c c0       	rjmp	.+88     	; 0xeac <malloc+0x9c>
     e54:	90 93 eb 03 	sts	0x03EB, r25
     e58:	80 93 ea 03 	sts	0x03EA, r24
     e5c:	27 c0       	rjmp	.+78     	; 0xeac <malloc+0x9c>
     e5e:	21 15       	cp	r18, r1
     e60:	31 05       	cpc	r19, r1
     e62:	19 f0       	breq	.+6      	; 0xe6a <malloc+0x5a>
     e64:	82 17       	cp	r24, r18
     e66:	93 07       	cpc	r25, r19
     e68:	18 f4       	brcc	.+6      	; 0xe70 <malloc+0x60>
     e6a:	9c 01       	movw	r18, r24
     e6c:	bd 01       	movw	r22, r26
     e6e:	ef 01       	movw	r28, r30
     e70:	92 81       	ldd	r25, Z+2	; 0x02
     e72:	83 81       	ldd	r24, Z+3	; 0x03
     e74:	df 01       	movw	r26, r30
     e76:	e9 2f       	mov	r30, r25
     e78:	f8 2f       	mov	r31, r24
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	d1 f6       	brne	.-76     	; 0xe32 <malloc+0x22>
     e7e:	21 15       	cp	r18, r1
     e80:	31 05       	cpc	r19, r1
     e82:	f9 f0       	breq	.+62     	; 0xec2 <malloc+0xb2>
     e84:	c9 01       	movw	r24, r18
     e86:	84 1b       	sub	r24, r20
     e88:	95 0b       	sbc	r25, r21
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	91 05       	cpc	r25, r1
     e8e:	80 f4       	brcc	.+32     	; 0xeb0 <malloc+0xa0>
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	9b 81       	ldd	r25, Y+3	; 0x03
     e94:	61 15       	cp	r22, r1
     e96:	71 05       	cpc	r23, r1
     e98:	21 f0       	breq	.+8      	; 0xea2 <malloc+0x92>
     e9a:	fb 01       	movw	r30, r22
     e9c:	93 83       	std	Z+3, r25	; 0x03
     e9e:	82 83       	std	Z+2, r24	; 0x02
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <malloc+0x9a>
     ea2:	90 93 eb 03 	sts	0x03EB, r25
     ea6:	80 93 ea 03 	sts	0x03EA, r24
     eaa:	fe 01       	movw	r30, r28
     eac:	32 96       	adiw	r30, 0x02	; 2
     eae:	42 c0       	rjmp	.+132    	; 0xf34 <malloc+0x124>
     eb0:	fe 01       	movw	r30, r28
     eb2:	e8 0f       	add	r30, r24
     eb4:	f9 1f       	adc	r31, r25
     eb6:	41 93       	st	Z+, r20
     eb8:	51 93       	st	Z+, r21
     eba:	02 97       	sbiw	r24, 0x02	; 2
     ebc:	99 83       	std	Y+1, r25	; 0x01
     ebe:	88 83       	st	Y, r24
     ec0:	39 c0       	rjmp	.+114    	; 0xf34 <malloc+0x124>
     ec2:	80 91 e8 03 	lds	r24, 0x03E8
     ec6:	90 91 e9 03 	lds	r25, 0x03E9
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	41 f4       	brne	.+16     	; 0xede <malloc+0xce>
     ece:	80 91 af 02 	lds	r24, 0x02AF
     ed2:	90 91 b0 02 	lds	r25, 0x02B0
     ed6:	90 93 e9 03 	sts	0x03E9, r25
     eda:	80 93 e8 03 	sts	0x03E8, r24
     ede:	20 91 ad 02 	lds	r18, 0x02AD
     ee2:	30 91 ae 02 	lds	r19, 0x02AE
     ee6:	21 15       	cp	r18, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	41 f4       	brne	.+16     	; 0xefc <malloc+0xec>
     eec:	2d b7       	in	r18, 0x3d	; 61
     eee:	3e b7       	in	r19, 0x3e	; 62
     ef0:	80 91 b1 02 	lds	r24, 0x02B1
     ef4:	90 91 b2 02 	lds	r25, 0x02B2
     ef8:	28 1b       	sub	r18, r24
     efa:	39 0b       	sbc	r19, r25
     efc:	e0 91 e8 03 	lds	r30, 0x03E8
     f00:	f0 91 e9 03 	lds	r31, 0x03E9
     f04:	e2 17       	cp	r30, r18
     f06:	f3 07       	cpc	r31, r19
     f08:	98 f4       	brcc	.+38     	; 0xf30 <malloc+0x120>
     f0a:	2e 1b       	sub	r18, r30
     f0c:	3f 0b       	sbc	r19, r31
     f0e:	24 17       	cp	r18, r20
     f10:	35 07       	cpc	r19, r21
     f12:	70 f0       	brcs	.+28     	; 0xf30 <malloc+0x120>
     f14:	ca 01       	movw	r24, r20
     f16:	02 96       	adiw	r24, 0x02	; 2
     f18:	28 17       	cp	r18, r24
     f1a:	39 07       	cpc	r19, r25
     f1c:	48 f0       	brcs	.+18     	; 0xf30 <malloc+0x120>
     f1e:	8e 0f       	add	r24, r30
     f20:	9f 1f       	adc	r25, r31
     f22:	90 93 e9 03 	sts	0x03E9, r25
     f26:	80 93 e8 03 	sts	0x03E8, r24
     f2a:	41 93       	st	Z+, r20
     f2c:	51 93       	st	Z+, r21
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <malloc+0x124>
     f30:	e0 e0       	ldi	r30, 0x00	; 0
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	cf 01       	movw	r24, r30
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <free>:
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	9c 01       	movw	r18, r24
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	09 f4       	brne	.+2      	; 0xf4c <free+0x10>
     f4a:	8c c0       	rjmp	.+280    	; 0x1064 <free+0x128>
     f4c:	dc 01       	movw	r26, r24
     f4e:	12 97       	sbiw	r26, 0x02	; 2
     f50:	13 96       	adiw	r26, 0x03	; 3
     f52:	1c 92       	st	X, r1
     f54:	1e 92       	st	-X, r1
     f56:	12 97       	sbiw	r26, 0x02	; 2
     f58:	60 91 ea 03 	lds	r22, 0x03EA
     f5c:	70 91 eb 03 	lds	r23, 0x03EB
     f60:	61 15       	cp	r22, r1
     f62:	71 05       	cpc	r23, r1
     f64:	89 f4       	brne	.+34     	; 0xf88 <free+0x4c>
     f66:	8d 91       	ld	r24, X+
     f68:	9c 91       	ld	r25, X
     f6a:	11 97       	sbiw	r26, 0x01	; 1
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	20 91 e8 03 	lds	r18, 0x03E8
     f74:	30 91 e9 03 	lds	r19, 0x03E9
     f78:	28 17       	cp	r18, r24
     f7a:	39 07       	cpc	r19, r25
     f7c:	69 f5       	brne	.+90     	; 0xfd8 <free+0x9c>
     f7e:	b0 93 e9 03 	sts	0x03E9, r27
     f82:	a0 93 e8 03 	sts	0x03E8, r26
     f86:	6e c0       	rjmp	.+220    	; 0x1064 <free+0x128>
     f88:	fb 01       	movw	r30, r22
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <free+0x56>
     f90:	fc 01       	movw	r30, r24
     f92:	ea 17       	cp	r30, r26
     f94:	fb 07       	cpc	r31, r27
     f96:	30 f4       	brcc	.+12     	; 0xfa4 <free+0x68>
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	af 01       	movw	r20, r30
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	b9 f7       	brne	.-18     	; 0xf90 <free+0x54>
     fa2:	1f c0       	rjmp	.+62     	; 0xfe2 <free+0xa6>
     fa4:	e9 01       	movw	r28, r18
     fa6:	22 97       	sbiw	r28, 0x02	; 2
     fa8:	fb 83       	std	Y+3, r31	; 0x03
     faa:	ea 83       	std	Y+2, r30	; 0x02
     fac:	08 81       	ld	r16, Y
     fae:	19 81       	ldd	r17, Y+1	; 0x01
     fb0:	c9 01       	movw	r24, r18
     fb2:	80 0f       	add	r24, r16
     fb4:	91 1f       	adc	r25, r17
     fb6:	8e 17       	cp	r24, r30
     fb8:	9f 07       	cpc	r25, r31
     fba:	59 f4       	brne	.+22     	; 0xfd2 <free+0x96>
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	80 0f       	add	r24, r16
     fc2:	91 1f       	adc	r25, r17
     fc4:	02 96       	adiw	r24, 0x02	; 2
     fc6:	99 83       	std	Y+1, r25	; 0x01
     fc8:	88 83       	st	Y, r24
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	9b 83       	std	Y+3, r25	; 0x03
     fd0:	8a 83       	std	Y+2, r24	; 0x02
     fd2:	41 15       	cp	r20, r1
     fd4:	51 05       	cpc	r21, r1
     fd6:	29 f4       	brne	.+10     	; 0xfe2 <free+0xa6>
     fd8:	b0 93 eb 03 	sts	0x03EB, r27
     fdc:	a0 93 ea 03 	sts	0x03EA, r26
     fe0:	41 c0       	rjmp	.+130    	; 0x1064 <free+0x128>
     fe2:	fa 01       	movw	r30, r20
     fe4:	b3 83       	std	Z+3, r27	; 0x03
     fe6:	a2 83       	std	Z+2, r26	; 0x02
     fe8:	c1 91       	ld	r28, Z+
     fea:	d1 91       	ld	r29, Z+
     fec:	ec 0f       	add	r30, r28
     fee:	fd 1f       	adc	r31, r29
     ff0:	ae 17       	cp	r26, r30
     ff2:	bf 07       	cpc	r27, r31
     ff4:	81 f4       	brne	.+32     	; 0x1016 <free+0xda>
     ff6:	f9 01       	movw	r30, r18
     ff8:	92 91       	ld	r25, -Z
     ffa:	82 91       	ld	r24, -Z
     ffc:	8c 0f       	add	r24, r28
     ffe:	9d 1f       	adc	r25, r29
    1000:	02 96       	adiw	r24, 0x02	; 2
    1002:	da 01       	movw	r26, r20
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	9c 93       	st	X, r25
    1008:	8e 93       	st	-X, r24
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	13 96       	adiw	r26, 0x03	; 3
    1010:	9c 93       	st	X, r25
    1012:	8e 93       	st	-X, r24
    1014:	12 97       	sbiw	r26, 0x02	; 2
    1016:	e0 e0       	ldi	r30, 0x00	; 0
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <free+0xe4>
    101c:	fb 01       	movw	r30, r22
    101e:	bc 01       	movw	r22, r24
    1020:	db 01       	movw	r26, r22
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	8d 91       	ld	r24, X+
    1026:	9c 91       	ld	r25, X
    1028:	13 97       	sbiw	r26, 0x03	; 3
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	b9 f7       	brne	.-18     	; 0x101c <free+0xe0>
    102e:	cb 01       	movw	r24, r22
    1030:	02 96       	adiw	r24, 0x02	; 2
    1032:	2d 91       	ld	r18, X+
    1034:	3c 91       	ld	r19, X
    1036:	11 97       	sbiw	r26, 0x01	; 1
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
    103c:	20 91 e8 03 	lds	r18, 0x03E8
    1040:	30 91 e9 03 	lds	r19, 0x03E9
    1044:	28 17       	cp	r18, r24
    1046:	39 07       	cpc	r19, r25
    1048:	69 f4       	brne	.+26     	; 0x1064 <free+0x128>
    104a:	30 97       	sbiw	r30, 0x00	; 0
    104c:	29 f4       	brne	.+10     	; 0x1058 <free+0x11c>
    104e:	10 92 eb 03 	sts	0x03EB, r1
    1052:	10 92 ea 03 	sts	0x03EA, r1
    1056:	02 c0       	rjmp	.+4      	; 0x105c <free+0x120>
    1058:	13 82       	std	Z+3, r1	; 0x03
    105a:	12 82       	std	Z+2, r1	; 0x02
    105c:	70 93 e9 03 	sts	0x03E9, r23
    1060:	60 93 e8 03 	sts	0x03E8, r22
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <atoi>:
    106e:	fc 01       	movw	r30, r24
    1070:	88 27       	eor	r24, r24
    1072:	99 27       	eor	r25, r25
    1074:	e8 94       	clt
    1076:	21 91       	ld	r18, Z+
    1078:	20 32       	cpi	r18, 0x20	; 32
    107a:	e9 f3       	breq	.-6      	; 0x1076 <atoi+0x8>
    107c:	29 30       	cpi	r18, 0x09	; 9
    107e:	10 f0       	brcs	.+4      	; 0x1084 <atoi+0x16>
    1080:	2e 30       	cpi	r18, 0x0E	; 14
    1082:	c8 f3       	brcs	.-14     	; 0x1076 <atoi+0x8>
    1084:	2b 32       	cpi	r18, 0x2B	; 43
    1086:	41 f0       	breq	.+16     	; 0x1098 <atoi+0x2a>
    1088:	2d 32       	cpi	r18, 0x2D	; 45
    108a:	39 f4       	brne	.+14     	; 0x109a <atoi+0x2c>
    108c:	68 94       	set
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <atoi+0x2a>
    1090:	0e 94 91 08 	call	0x1122	; 0x1122 <__mulhi_const_10>
    1094:	82 0f       	add	r24, r18
    1096:	91 1d       	adc	r25, r1
    1098:	21 91       	ld	r18, Z+
    109a:	20 53       	subi	r18, 0x30	; 48
    109c:	2a 30       	cpi	r18, 0x0A	; 10
    109e:	c0 f3       	brcs	.-16     	; 0x1090 <atoi+0x22>
    10a0:	1e f4       	brtc	.+6      	; 0x10a8 <atoi+0x3a>
    10a2:	90 95       	com	r25
    10a4:	81 95       	neg	r24
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <strtok>:
    10aa:	49 eb       	ldi	r20, 0xB9	; 185
    10ac:	52 e0       	ldi	r21, 0x02	; 2
    10ae:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <strtok_r>
    10b2:	08 95       	ret

000010b4 <strcmp>:
    10b4:	fb 01       	movw	r30, r22
    10b6:	dc 01       	movw	r26, r24
    10b8:	8d 91       	ld	r24, X+
    10ba:	01 90       	ld	r0, Z+
    10bc:	80 19       	sub	r24, r0
    10be:	01 10       	cpse	r0, r1
    10c0:	d9 f3       	breq	.-10     	; 0x10b8 <strcmp+0x4>
    10c2:	99 0b       	sbc	r25, r25
    10c4:	08 95       	ret

000010c6 <strcpy>:
    10c6:	fb 01       	movw	r30, r22
    10c8:	dc 01       	movw	r26, r24
    10ca:	01 90       	ld	r0, Z+
    10cc:	0d 92       	st	X+, r0
    10ce:	00 20       	and	r0, r0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <strcpy+0x4>
    10d2:	08 95       	ret

000010d4 <strtok_r>:
    10d4:	fa 01       	movw	r30, r20
    10d6:	a1 91       	ld	r26, Z+
    10d8:	b0 81       	ld	r27, Z
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	19 f4       	brne	.+6      	; 0x10e4 <strtok_r+0x10>
    10de:	10 97       	sbiw	r26, 0x00	; 0
    10e0:	e1 f0       	breq	.+56     	; 0x111a <strtok_r+0x46>
    10e2:	cd 01       	movw	r24, r26
    10e4:	dc 01       	movw	r26, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0d 90       	ld	r0, X+
    10ea:	00 20       	and	r0, r0
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <strtok_r+0x1e>
    10ee:	c0 01       	movw	r24, r0
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <strtok_r+0x44>
    10f2:	fb 01       	movw	r30, r22
    10f4:	21 91       	ld	r18, Z+
    10f6:	22 23       	and	r18, r18
    10f8:	19 f0       	breq	.+6      	; 0x1100 <strtok_r+0x2c>
    10fa:	20 15       	cp	r18, r0
    10fc:	d9 f7       	brne	.-10     	; 0x10f4 <strtok_r+0x20>
    10fe:	f3 cf       	rjmp	.-26     	; 0x10e6 <strtok_r+0x12>
    1100:	fb 01       	movw	r30, r22
    1102:	21 91       	ld	r18, Z+
    1104:	20 15       	cp	r18, r0
    1106:	19 f4       	brne	.+6      	; 0x110e <strtok_r+0x3a>
    1108:	1e 92       	st	-X, r1
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	06 c0       	rjmp	.+12     	; 0x111a <strtok_r+0x46>
    110e:	22 23       	and	r18, r18
    1110:	c1 f7       	brne	.-16     	; 0x1102 <strtok_r+0x2e>
    1112:	0d 90       	ld	r0, X+
    1114:	00 20       	and	r0, r0
    1116:	a1 f7       	brne	.-24     	; 0x1100 <strtok_r+0x2c>
    1118:	d0 01       	movw	r26, r0
    111a:	fa 01       	movw	r30, r20
    111c:	a1 93       	st	Z+, r26
    111e:	b0 83       	st	Z, r27
    1120:	08 95       	ret

00001122 <__mulhi_const_10>:
    1122:	7a e0       	ldi	r23, 0x0A	; 10
    1124:	97 9f       	mul	r25, r23
    1126:	90 2d       	mov	r25, r0
    1128:	87 9f       	mul	r24, r23
    112a:	80 2d       	mov	r24, r0
    112c:	91 0d       	add	r25, r1
    112e:	11 24       	eor	r1, r1
    1130:	08 95       	ret

00001132 <fgets>:
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	8c 01       	movw	r16, r24
    1144:	6a 01       	movw	r12, r20
    1146:	fa 01       	movw	r30, r20
    1148:	83 81       	ldd	r24, Z+3	; 0x03
    114a:	80 ff       	sbrs	r24, 0
    114c:	1a c0       	rjmp	.+52     	; 0x1182 <fgets+0x50>
    114e:	16 16       	cp	r1, r22
    1150:	17 06       	cpc	r1, r23
    1152:	bc f4       	brge	.+46     	; 0x1182 <fgets+0x50>
    1154:	7b 01       	movw	r14, r22
    1156:	e8 01       	movw	r28, r16
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <fgets+0x44>
    115a:	c6 01       	movw	r24, r12
    115c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fgetc>
    1160:	ff ef       	ldi	r31, 0xFF	; 255
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	9f 07       	cpc	r25, r31
    1166:	69 f0       	breq	.+26     	; 0x1182 <fgets+0x50>
    1168:	89 93       	st	Y+, r24
    116a:	08 94       	sec
    116c:	e1 08       	sbc	r14, r1
    116e:	f1 08       	sbc	r15, r1
    1170:	8a 30       	cpi	r24, 0x0A	; 10
    1172:	91 05       	cpc	r25, r1
    1174:	21 f0       	breq	.+8      	; 0x117e <fgets+0x4c>
    1176:	21 e0       	ldi	r18, 0x01	; 1
    1178:	e2 16       	cp	r14, r18
    117a:	f1 04       	cpc	r15, r1
    117c:	71 f7       	brne	.-36     	; 0x115a <fgets+0x28>
    117e:	18 82       	st	Y, r1
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <fgets+0x54>
    1182:	00 e0       	ldi	r16, 0x00	; 0
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	c8 01       	movw	r24, r16
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	08 95       	ret

0000119a <gets>:
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	8c 01       	movw	r16, r24
    11a4:	e0 91 ec 03 	lds	r30, 0x03EC
    11a8:	f0 91 ed 03 	lds	r31, 0x03ED
    11ac:	83 81       	ldd	r24, Z+3	; 0x03
    11ae:	80 ff       	sbrs	r24, 0
    11b0:	12 c0       	rjmp	.+36     	; 0x11d6 <gets+0x3c>
    11b2:	e8 01       	movw	r28, r16
    11b4:	80 91 ec 03 	lds	r24, 0x03EC
    11b8:	90 91 ed 03 	lds	r25, 0x03ED
    11bc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <fgetc>
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	8f 3f       	cpi	r24, 0xFF	; 255
    11c4:	92 07       	cpc	r25, r18
    11c6:	39 f0       	breq	.+14     	; 0x11d6 <gets+0x3c>
    11c8:	89 93       	st	Y+, r24
    11ca:	8a 30       	cpi	r24, 0x0A	; 10
    11cc:	91 05       	cpc	r25, r1
    11ce:	91 f7       	brne	.-28     	; 0x11b4 <gets+0x1a>
    11d0:	21 97       	sbiw	r28, 0x01	; 1
    11d2:	18 82       	st	Y, r1
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <gets+0x40>
    11d6:	00 e0       	ldi	r16, 0x00	; 0
    11d8:	10 e0       	ldi	r17, 0x00	; 0
    11da:	c8 01       	movw	r24, r16
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <printf>:
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	fe 01       	movw	r30, r28
    11f0:	36 96       	adiw	r30, 0x06	; 6
    11f2:	61 91       	ld	r22, Z+
    11f4:	71 91       	ld	r23, Z+
    11f6:	80 91 ee 03 	lds	r24, 0x03EE
    11fa:	90 91 ef 03 	lds	r25, 0x03EF
    11fe:	af 01       	movw	r20, r30
    1200:	0e 94 3a 09 	call	0x1274	; 0x1274 <vfprintf>
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <putchar>:
    120a:	60 91 ee 03 	lds	r22, 0x03EE
    120e:	70 91 ef 03 	lds	r23, 0x03EF
    1212:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    1216:	08 95       	ret

00001218 <puts>:
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	8c 01       	movw	r16, r24
    1222:	e0 91 ee 03 	lds	r30, 0x03EE
    1226:	f0 91 ef 03 	lds	r31, 0x03EF
    122a:	83 81       	ldd	r24, Z+3	; 0x03
    122c:	81 ff       	sbrs	r24, 1
    122e:	1a c0       	rjmp	.+52     	; 0x1264 <puts+0x4c>
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	d0 e0       	ldi	r29, 0x00	; 0
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <puts+0x28>
    1236:	19 95       	eicall
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	11 f0       	breq	.+4      	; 0x1240 <puts+0x28>
    123c:	cf ef       	ldi	r28, 0xFF	; 255
    123e:	df ef       	ldi	r29, 0xFF	; 255
    1240:	f8 01       	movw	r30, r16
    1242:	81 91       	ld	r24, Z+
    1244:	8f 01       	movw	r16, r30
    1246:	60 91 ee 03 	lds	r22, 0x03EE
    124a:	70 91 ef 03 	lds	r23, 0x03EF
    124e:	db 01       	movw	r26, r22
    1250:	18 96       	adiw	r26, 0x08	; 8
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	19 97       	sbiw	r26, 0x09	; 9
    1258:	88 23       	and	r24, r24
    125a:	69 f7       	brne	.-38     	; 0x1236 <puts+0x1e>
    125c:	8a e0       	ldi	r24, 0x0A	; 10
    125e:	19 95       	eicall
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	11 f0       	breq	.+4      	; 0x1268 <puts+0x50>
    1264:	cf ef       	ldi	r28, 0xFF	; 255
    1266:	df ef       	ldi	r29, 0xFF	; 255
    1268:	ce 01       	movw	r24, r28
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	08 95       	ret

00001274 <vfprintf>:
    1274:	2f 92       	push	r2
    1276:	3f 92       	push	r3
    1278:	4f 92       	push	r4
    127a:	5f 92       	push	r5
    127c:	6f 92       	push	r6
    127e:	7f 92       	push	r7
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	0f 93       	push	r16
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	2d 97       	sbiw	r28, 0x0d	; 13
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	3c 01       	movw	r6, r24
    12aa:	7d 87       	std	Y+13, r23	; 0x0d
    12ac:	6c 87       	std	Y+12, r22	; 0x0c
    12ae:	5a 01       	movw	r10, r20
    12b0:	fc 01       	movw	r30, r24
    12b2:	17 82       	std	Z+7, r1	; 0x07
    12b4:	16 82       	std	Z+6, r1	; 0x06
    12b6:	83 81       	ldd	r24, Z+3	; 0x03
    12b8:	81 ff       	sbrs	r24, 1
    12ba:	c8 c1       	rjmp	.+912    	; 0x164c <vfprintf+0x3d8>
    12bc:	2e 01       	movw	r4, r28
    12be:	08 94       	sec
    12c0:	41 1c       	adc	r4, r1
    12c2:	51 1c       	adc	r5, r1
    12c4:	f3 01       	movw	r30, r6
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    12ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    12cc:	93 fd       	sbrc	r25, 3
    12ce:	85 91       	lpm	r24, Z+
    12d0:	93 ff       	sbrs	r25, 3
    12d2:	81 91       	ld	r24, Z+
    12d4:	fd 87       	std	Y+13, r31	; 0x0d
    12d6:	ec 87       	std	Y+12, r30	; 0x0c
    12d8:	88 23       	and	r24, r24
    12da:	09 f4       	brne	.+2      	; 0x12de <vfprintf+0x6a>
    12dc:	b3 c1       	rjmp	.+870    	; 0x1644 <vfprintf+0x3d0>
    12de:	85 32       	cpi	r24, 0x25	; 37
    12e0:	41 f4       	brne	.+16     	; 0x12f2 <vfprintf+0x7e>
    12e2:	93 fd       	sbrc	r25, 3
    12e4:	85 91       	lpm	r24, Z+
    12e6:	93 ff       	sbrs	r25, 3
    12e8:	81 91       	ld	r24, Z+
    12ea:	fd 87       	std	Y+13, r31	; 0x0d
    12ec:	ec 87       	std	Y+12, r30	; 0x0c
    12ee:	85 32       	cpi	r24, 0x25	; 37
    12f0:	29 f4       	brne	.+10     	; 0x12fc <vfprintf+0x88>
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	b3 01       	movw	r22, r6
    12f6:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    12fa:	e4 cf       	rjmp	.-56     	; 0x12c4 <vfprintf+0x50>
    12fc:	ff 24       	eor	r15, r15
    12fe:	ee 24       	eor	r14, r14
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	10 32       	cpi	r17, 0x20	; 32
    1304:	b0 f4       	brcc	.+44     	; 0x1332 <vfprintf+0xbe>
    1306:	8b 32       	cpi	r24, 0x2B	; 43
    1308:	69 f0       	breq	.+26     	; 0x1324 <vfprintf+0xb0>
    130a:	8c 32       	cpi	r24, 0x2C	; 44
    130c:	28 f4       	brcc	.+10     	; 0x1318 <vfprintf+0xa4>
    130e:	80 32       	cpi	r24, 0x20	; 32
    1310:	51 f0       	breq	.+20     	; 0x1326 <vfprintf+0xb2>
    1312:	83 32       	cpi	r24, 0x23	; 35
    1314:	71 f4       	brne	.+28     	; 0x1332 <vfprintf+0xbe>
    1316:	0b c0       	rjmp	.+22     	; 0x132e <vfprintf+0xba>
    1318:	8d 32       	cpi	r24, 0x2D	; 45
    131a:	39 f0       	breq	.+14     	; 0x132a <vfprintf+0xb6>
    131c:	80 33       	cpi	r24, 0x30	; 48
    131e:	49 f4       	brne	.+18     	; 0x1332 <vfprintf+0xbe>
    1320:	11 60       	ori	r17, 0x01	; 1
    1322:	2c c0       	rjmp	.+88     	; 0x137c <vfprintf+0x108>
    1324:	12 60       	ori	r17, 0x02	; 2
    1326:	14 60       	ori	r17, 0x04	; 4
    1328:	29 c0       	rjmp	.+82     	; 0x137c <vfprintf+0x108>
    132a:	18 60       	ori	r17, 0x08	; 8
    132c:	27 c0       	rjmp	.+78     	; 0x137c <vfprintf+0x108>
    132e:	10 61       	ori	r17, 0x10	; 16
    1330:	25 c0       	rjmp	.+74     	; 0x137c <vfprintf+0x108>
    1332:	17 fd       	sbrc	r17, 7
    1334:	2e c0       	rjmp	.+92     	; 0x1392 <vfprintf+0x11e>
    1336:	28 2f       	mov	r18, r24
    1338:	20 53       	subi	r18, 0x30	; 48
    133a:	2a 30       	cpi	r18, 0x0A	; 10
    133c:	98 f4       	brcc	.+38     	; 0x1364 <vfprintf+0xf0>
    133e:	16 ff       	sbrs	r17, 6
    1340:	08 c0       	rjmp	.+16     	; 0x1352 <vfprintf+0xde>
    1342:	8f 2d       	mov	r24, r15
    1344:	88 0f       	add	r24, r24
    1346:	f8 2e       	mov	r15, r24
    1348:	ff 0c       	add	r15, r15
    134a:	ff 0c       	add	r15, r15
    134c:	f8 0e       	add	r15, r24
    134e:	f2 0e       	add	r15, r18
    1350:	15 c0       	rjmp	.+42     	; 0x137c <vfprintf+0x108>
    1352:	8e 2d       	mov	r24, r14
    1354:	88 0f       	add	r24, r24
    1356:	e8 2e       	mov	r14, r24
    1358:	ee 0c       	add	r14, r14
    135a:	ee 0c       	add	r14, r14
    135c:	e8 0e       	add	r14, r24
    135e:	e2 0e       	add	r14, r18
    1360:	10 62       	ori	r17, 0x20	; 32
    1362:	0c c0       	rjmp	.+24     	; 0x137c <vfprintf+0x108>
    1364:	8e 32       	cpi	r24, 0x2E	; 46
    1366:	21 f4       	brne	.+8      	; 0x1370 <vfprintf+0xfc>
    1368:	16 fd       	sbrc	r17, 6
    136a:	6c c1       	rjmp	.+728    	; 0x1644 <vfprintf+0x3d0>
    136c:	10 64       	ori	r17, 0x40	; 64
    136e:	06 c0       	rjmp	.+12     	; 0x137c <vfprintf+0x108>
    1370:	8c 36       	cpi	r24, 0x6C	; 108
    1372:	11 f4       	brne	.+4      	; 0x1378 <vfprintf+0x104>
    1374:	10 68       	ori	r17, 0x80	; 128
    1376:	02 c0       	rjmp	.+4      	; 0x137c <vfprintf+0x108>
    1378:	88 36       	cpi	r24, 0x68	; 104
    137a:	59 f4       	brne	.+22     	; 0x1392 <vfprintf+0x11e>
    137c:	ec 85       	ldd	r30, Y+12	; 0x0c
    137e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1380:	93 fd       	sbrc	r25, 3
    1382:	85 91       	lpm	r24, Z+
    1384:	93 ff       	sbrs	r25, 3
    1386:	81 91       	ld	r24, Z+
    1388:	fd 87       	std	Y+13, r31	; 0x0d
    138a:	ec 87       	std	Y+12, r30	; 0x0c
    138c:	88 23       	and	r24, r24
    138e:	09 f0       	breq	.+2      	; 0x1392 <vfprintf+0x11e>
    1390:	b8 cf       	rjmp	.-144    	; 0x1302 <vfprintf+0x8e>
    1392:	98 2f       	mov	r25, r24
    1394:	95 54       	subi	r25, 0x45	; 69
    1396:	93 30       	cpi	r25, 0x03	; 3
    1398:	18 f0       	brcs	.+6      	; 0x13a0 <vfprintf+0x12c>
    139a:	90 52       	subi	r25, 0x20	; 32
    139c:	93 30       	cpi	r25, 0x03	; 3
    139e:	38 f4       	brcc	.+14     	; 0x13ae <vfprintf+0x13a>
    13a0:	24 e0       	ldi	r18, 0x04	; 4
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	a2 0e       	add	r10, r18
    13a6:	b3 1e       	adc	r11, r19
    13a8:	3f e3       	ldi	r19, 0x3F	; 63
    13aa:	39 83       	std	Y+1, r19	; 0x01
    13ac:	0f c0       	rjmp	.+30     	; 0x13cc <vfprintf+0x158>
    13ae:	83 36       	cpi	r24, 0x63	; 99
    13b0:	31 f0       	breq	.+12     	; 0x13be <vfprintf+0x14a>
    13b2:	83 37       	cpi	r24, 0x73	; 115
    13b4:	81 f0       	breq	.+32     	; 0x13d6 <vfprintf+0x162>
    13b6:	83 35       	cpi	r24, 0x53	; 83
    13b8:	09 f0       	breq	.+2      	; 0x13bc <vfprintf+0x148>
    13ba:	5a c0       	rjmp	.+180    	; 0x1470 <vfprintf+0x1fc>
    13bc:	22 c0       	rjmp	.+68     	; 0x1402 <vfprintf+0x18e>
    13be:	f5 01       	movw	r30, r10
    13c0:	80 81       	ld	r24, Z
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	22 e0       	ldi	r18, 0x02	; 2
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	a2 0e       	add	r10, r18
    13ca:	b3 1e       	adc	r11, r19
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	c2 2e       	mov	r12, r18
    13d0:	d1 2c       	mov	r13, r1
    13d2:	42 01       	movw	r8, r4
    13d4:	14 c0       	rjmp	.+40     	; 0x13fe <vfprintf+0x18a>
    13d6:	92 e0       	ldi	r25, 0x02	; 2
    13d8:	29 2e       	mov	r2, r25
    13da:	31 2c       	mov	r3, r1
    13dc:	2a 0c       	add	r2, r10
    13de:	3b 1c       	adc	r3, r11
    13e0:	f5 01       	movw	r30, r10
    13e2:	80 80       	ld	r8, Z
    13e4:	91 80       	ldd	r9, Z+1	; 0x01
    13e6:	16 ff       	sbrs	r17, 6
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <vfprintf+0x17c>
    13ea:	6f 2d       	mov	r22, r15
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x180>
    13f0:	6f ef       	ldi	r22, 0xFF	; 255
    13f2:	7f ef       	ldi	r23, 0xFF	; 255
    13f4:	c4 01       	movw	r24, r8
    13f6:	0e 94 4c 0b 	call	0x1698	; 0x1698 <strnlen>
    13fa:	6c 01       	movw	r12, r24
    13fc:	51 01       	movw	r10, r2
    13fe:	1f 77       	andi	r17, 0x7F	; 127
    1400:	15 c0       	rjmp	.+42     	; 0x142c <vfprintf+0x1b8>
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	28 2e       	mov	r2, r24
    1406:	31 2c       	mov	r3, r1
    1408:	2a 0c       	add	r2, r10
    140a:	3b 1c       	adc	r3, r11
    140c:	f5 01       	movw	r30, r10
    140e:	80 80       	ld	r8, Z
    1410:	91 80       	ldd	r9, Z+1	; 0x01
    1412:	16 ff       	sbrs	r17, 6
    1414:	03 c0       	rjmp	.+6      	; 0x141c <vfprintf+0x1a8>
    1416:	6f 2d       	mov	r22, r15
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <vfprintf+0x1ac>
    141c:	6f ef       	ldi	r22, 0xFF	; 255
    141e:	7f ef       	ldi	r23, 0xFF	; 255
    1420:	c4 01       	movw	r24, r8
    1422:	0e 94 41 0b 	call	0x1682	; 0x1682 <strnlen_P>
    1426:	6c 01       	movw	r12, r24
    1428:	10 68       	ori	r17, 0x80	; 128
    142a:	51 01       	movw	r10, r2
    142c:	13 fd       	sbrc	r17, 3
    142e:	1c c0       	rjmp	.+56     	; 0x1468 <vfprintf+0x1f4>
    1430:	06 c0       	rjmp	.+12     	; 0x143e <vfprintf+0x1ca>
    1432:	80 e2       	ldi	r24, 0x20	; 32
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	b3 01       	movw	r22, r6
    1438:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    143c:	ea 94       	dec	r14
    143e:	8e 2d       	mov	r24, r14
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	c8 16       	cp	r12, r24
    1444:	d9 06       	cpc	r13, r25
    1446:	a8 f3       	brcs	.-22     	; 0x1432 <vfprintf+0x1be>
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <vfprintf+0x1f4>
    144a:	f4 01       	movw	r30, r8
    144c:	17 fd       	sbrc	r17, 7
    144e:	85 91       	lpm	r24, Z+
    1450:	17 ff       	sbrs	r17, 7
    1452:	81 91       	ld	r24, Z+
    1454:	4f 01       	movw	r8, r30
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	b3 01       	movw	r22, r6
    145a:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    145e:	e1 10       	cpse	r14, r1
    1460:	ea 94       	dec	r14
    1462:	08 94       	sec
    1464:	c1 08       	sbc	r12, r1
    1466:	d1 08       	sbc	r13, r1
    1468:	c1 14       	cp	r12, r1
    146a:	d1 04       	cpc	r13, r1
    146c:	71 f7       	brne	.-36     	; 0x144a <vfprintf+0x1d6>
    146e:	e7 c0       	rjmp	.+462    	; 0x163e <vfprintf+0x3ca>
    1470:	84 36       	cpi	r24, 0x64	; 100
    1472:	11 f0       	breq	.+4      	; 0x1478 <vfprintf+0x204>
    1474:	89 36       	cpi	r24, 0x69	; 105
    1476:	51 f5       	brne	.+84     	; 0x14cc <vfprintf+0x258>
    1478:	f5 01       	movw	r30, r10
    147a:	17 ff       	sbrs	r17, 7
    147c:	07 c0       	rjmp	.+14     	; 0x148c <vfprintf+0x218>
    147e:	80 81       	ld	r24, Z
    1480:	91 81       	ldd	r25, Z+1	; 0x01
    1482:	a2 81       	ldd	r26, Z+2	; 0x02
    1484:	b3 81       	ldd	r27, Z+3	; 0x03
    1486:	24 e0       	ldi	r18, 0x04	; 4
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	08 c0       	rjmp	.+16     	; 0x149c <vfprintf+0x228>
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	aa 27       	eor	r26, r26
    1492:	97 fd       	sbrc	r25, 7
    1494:	a0 95       	com	r26
    1496:	ba 2f       	mov	r27, r26
    1498:	22 e0       	ldi	r18, 0x02	; 2
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	a2 0e       	add	r10, r18
    149e:	b3 1e       	adc	r11, r19
    14a0:	01 2f       	mov	r16, r17
    14a2:	0f 76       	andi	r16, 0x6F	; 111
    14a4:	b7 ff       	sbrs	r27, 7
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <vfprintf+0x244>
    14a8:	b0 95       	com	r27
    14aa:	a0 95       	com	r26
    14ac:	90 95       	com	r25
    14ae:	81 95       	neg	r24
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	af 4f       	sbci	r26, 0xFF	; 255
    14b4:	bf 4f       	sbci	r27, 0xFF	; 255
    14b6:	00 68       	ori	r16, 0x80	; 128
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	a2 01       	movw	r20, r4
    14be:	2a e0       	ldi	r18, 0x0A	; 10
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__ultoa_invert>
    14c6:	d8 2e       	mov	r13, r24
    14c8:	d4 18       	sub	r13, r4
    14ca:	3f c0       	rjmp	.+126    	; 0x154a <vfprintf+0x2d6>
    14cc:	85 37       	cpi	r24, 0x75	; 117
    14ce:	21 f4       	brne	.+8      	; 0x14d8 <vfprintf+0x264>
    14d0:	1f 7e       	andi	r17, 0xEF	; 239
    14d2:	2a e0       	ldi	r18, 0x0A	; 10
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	20 c0       	rjmp	.+64     	; 0x1518 <vfprintf+0x2a4>
    14d8:	19 7f       	andi	r17, 0xF9	; 249
    14da:	8f 36       	cpi	r24, 0x6F	; 111
    14dc:	a9 f0       	breq	.+42     	; 0x1508 <vfprintf+0x294>
    14de:	80 37       	cpi	r24, 0x70	; 112
    14e0:	20 f4       	brcc	.+8      	; 0x14ea <vfprintf+0x276>
    14e2:	88 35       	cpi	r24, 0x58	; 88
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <vfprintf+0x274>
    14e6:	ae c0       	rjmp	.+348    	; 0x1644 <vfprintf+0x3d0>
    14e8:	0b c0       	rjmp	.+22     	; 0x1500 <vfprintf+0x28c>
    14ea:	80 37       	cpi	r24, 0x70	; 112
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <vfprintf+0x282>
    14ee:	88 37       	cpi	r24, 0x78	; 120
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <vfprintf+0x280>
    14f2:	a8 c0       	rjmp	.+336    	; 0x1644 <vfprintf+0x3d0>
    14f4:	01 c0       	rjmp	.+2      	; 0x14f8 <vfprintf+0x284>
    14f6:	10 61       	ori	r17, 0x10	; 16
    14f8:	14 ff       	sbrs	r17, 4
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <vfprintf+0x29a>
    14fc:	14 60       	ori	r17, 0x04	; 4
    14fe:	07 c0       	rjmp	.+14     	; 0x150e <vfprintf+0x29a>
    1500:	14 ff       	sbrs	r17, 4
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <vfprintf+0x2a0>
    1504:	16 60       	ori	r17, 0x06	; 6
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <vfprintf+0x2a0>
    1508:	28 e0       	ldi	r18, 0x08	; 8
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <vfprintf+0x2a4>
    150e:	20 e1       	ldi	r18, 0x10	; 16
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <vfprintf+0x2a4>
    1514:	20 e1       	ldi	r18, 0x10	; 16
    1516:	32 e0       	ldi	r19, 0x02	; 2
    1518:	f5 01       	movw	r30, r10
    151a:	17 ff       	sbrs	r17, 7
    151c:	07 c0       	rjmp	.+14     	; 0x152c <vfprintf+0x2b8>
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	82 81       	ldd	r24, Z+2	; 0x02
    1524:	93 81       	ldd	r25, Z+3	; 0x03
    1526:	44 e0       	ldi	r20, 0x04	; 4
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <vfprintf+0x2c4>
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	42 e0       	ldi	r20, 0x02	; 2
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	a4 0e       	add	r10, r20
    153a:	b5 1e       	adc	r11, r21
    153c:	a2 01       	movw	r20, r4
    153e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__ultoa_invert>
    1542:	d8 2e       	mov	r13, r24
    1544:	d4 18       	sub	r13, r4
    1546:	01 2f       	mov	r16, r17
    1548:	0f 77       	andi	r16, 0x7F	; 127
    154a:	06 ff       	sbrs	r16, 6
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <vfprintf+0x2ec>
    154e:	0e 7f       	andi	r16, 0xFE	; 254
    1550:	df 14       	cp	r13, r15
    1552:	30 f4       	brcc	.+12     	; 0x1560 <vfprintf+0x2ec>
    1554:	04 ff       	sbrs	r16, 4
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0x2f0>
    1558:	02 fd       	sbrc	r16, 2
    155a:	04 c0       	rjmp	.+8      	; 0x1564 <vfprintf+0x2f0>
    155c:	0f 7e       	andi	r16, 0xEF	; 239
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <vfprintf+0x2f0>
    1560:	1d 2d       	mov	r17, r13
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <vfprintf+0x2f2>
    1564:	1f 2d       	mov	r17, r15
    1566:	80 2f       	mov	r24, r16
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	04 ff       	sbrs	r16, 4
    156c:	0c c0       	rjmp	.+24     	; 0x1586 <vfprintf+0x312>
    156e:	fe 01       	movw	r30, r28
    1570:	ed 0d       	add	r30, r13
    1572:	f1 1d       	adc	r31, r1
    1574:	20 81       	ld	r18, Z
    1576:	20 33       	cpi	r18, 0x30	; 48
    1578:	11 f4       	brne	.+4      	; 0x157e <vfprintf+0x30a>
    157a:	09 7e       	andi	r16, 0xE9	; 233
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <vfprintf+0x31c>
    157e:	02 ff       	sbrs	r16, 2
    1580:	06 c0       	rjmp	.+12     	; 0x158e <vfprintf+0x31a>
    1582:	1e 5f       	subi	r17, 0xFE	; 254
    1584:	05 c0       	rjmp	.+10     	; 0x1590 <vfprintf+0x31c>
    1586:	86 78       	andi	r24, 0x86	; 134
    1588:	90 70       	andi	r25, 0x00	; 0
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	09 f0       	breq	.+2      	; 0x1590 <vfprintf+0x31c>
    158e:	1f 5f       	subi	r17, 0xFF	; 255
    1590:	80 2e       	mov	r8, r16
    1592:	99 24       	eor	r9, r9
    1594:	03 fd       	sbrc	r16, 3
    1596:	12 c0       	rjmp	.+36     	; 0x15bc <vfprintf+0x348>
    1598:	00 ff       	sbrs	r16, 0
    159a:	0d c0       	rjmp	.+26     	; 0x15b6 <vfprintf+0x342>
    159c:	fd 2c       	mov	r15, r13
    159e:	1e 15       	cp	r17, r14
    15a0:	50 f4       	brcc	.+20     	; 0x15b6 <vfprintf+0x342>
    15a2:	fe 0c       	add	r15, r14
    15a4:	f1 1a       	sub	r15, r17
    15a6:	1e 2d       	mov	r17, r14
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <vfprintf+0x342>
    15aa:	80 e2       	ldi	r24, 0x20	; 32
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	b3 01       	movw	r22, r6
    15b0:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    15b4:	1f 5f       	subi	r17, 0xFF	; 255
    15b6:	1e 15       	cp	r17, r14
    15b8:	c0 f3       	brcs	.-16     	; 0x15aa <vfprintf+0x336>
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <vfprintf+0x350>
    15bc:	1e 15       	cp	r17, r14
    15be:	10 f4       	brcc	.+4      	; 0x15c4 <vfprintf+0x350>
    15c0:	e1 1a       	sub	r14, r17
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <vfprintf+0x352>
    15c4:	ee 24       	eor	r14, r14
    15c6:	84 fe       	sbrs	r8, 4
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <vfprintf+0x374>
    15ca:	80 e3       	ldi	r24, 0x30	; 48
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	b3 01       	movw	r22, r6
    15d0:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    15d4:	82 fe       	sbrs	r8, 2
    15d6:	1f c0       	rjmp	.+62     	; 0x1616 <vfprintf+0x3a2>
    15d8:	81 fe       	sbrs	r8, 1
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <vfprintf+0x36e>
    15dc:	88 e5       	ldi	r24, 0x58	; 88
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	10 c0       	rjmp	.+32     	; 0x1602 <vfprintf+0x38e>
    15e2:	88 e7       	ldi	r24, 0x78	; 120
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0d c0       	rjmp	.+26     	; 0x1602 <vfprintf+0x38e>
    15e8:	c4 01       	movw	r24, r8
    15ea:	86 78       	andi	r24, 0x86	; 134
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	91 f0       	breq	.+36     	; 0x1616 <vfprintf+0x3a2>
    15f2:	81 fc       	sbrc	r8, 1
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0x386>
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <vfprintf+0x388>
    15fa:	8b e2       	ldi	r24, 0x2B	; 43
    15fc:	07 fd       	sbrc	r16, 7
    15fe:	8d e2       	ldi	r24, 0x2D	; 45
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	b3 01       	movw	r22, r6
    1604:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <vfprintf+0x3a2>
    160a:	80 e3       	ldi	r24, 0x30	; 48
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	b3 01       	movw	r22, r6
    1610:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    1614:	fa 94       	dec	r15
    1616:	df 14       	cp	r13, r15
    1618:	c0 f3       	brcs	.-16     	; 0x160a <vfprintf+0x396>
    161a:	da 94       	dec	r13
    161c:	f2 01       	movw	r30, r4
    161e:	ed 0d       	add	r30, r13
    1620:	f1 1d       	adc	r31, r1
    1622:	80 81       	ld	r24, Z
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	b3 01       	movw	r22, r6
    1628:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    162c:	dd 20       	and	r13, r13
    162e:	a9 f7       	brne	.-22     	; 0x161a <vfprintf+0x3a6>
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0x3ca>
    1632:	80 e2       	ldi	r24, 0x20	; 32
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	b3 01       	movw	r22, r6
    1638:	0e 94 97 0b 	call	0x172e	; 0x172e <fputc>
    163c:	ea 94       	dec	r14
    163e:	ee 20       	and	r14, r14
    1640:	c1 f7       	brne	.-16     	; 0x1632 <vfprintf+0x3be>
    1642:	40 ce       	rjmp	.-896    	; 0x12c4 <vfprintf+0x50>
    1644:	f3 01       	movw	r30, r6
    1646:	86 81       	ldd	r24, Z+6	; 0x06
    1648:	97 81       	ldd	r25, Z+7	; 0x07
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <vfprintf+0x3dc>
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	9f ef       	ldi	r25, 0xFF	; 255
    1650:	2d 96       	adiw	r28, 0x0d	; 13
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	df 90       	pop	r13
    166a:	cf 90       	pop	r12
    166c:	bf 90       	pop	r11
    166e:	af 90       	pop	r10
    1670:	9f 90       	pop	r9
    1672:	8f 90       	pop	r8
    1674:	7f 90       	pop	r7
    1676:	6f 90       	pop	r6
    1678:	5f 90       	pop	r5
    167a:	4f 90       	pop	r4
    167c:	3f 90       	pop	r3
    167e:	2f 90       	pop	r2
    1680:	08 95       	ret

00001682 <strnlen_P>:
    1682:	fc 01       	movw	r30, r24
    1684:	05 90       	lpm	r0, Z+
    1686:	61 50       	subi	r22, 0x01	; 1
    1688:	70 40       	sbci	r23, 0x00	; 0
    168a:	01 10       	cpse	r0, r1
    168c:	d8 f7       	brcc	.-10     	; 0x1684 <strnlen_P+0x2>
    168e:	80 95       	com	r24
    1690:	90 95       	com	r25
    1692:	8e 0f       	add	r24, r30
    1694:	9f 1f       	adc	r25, r31
    1696:	08 95       	ret

00001698 <strnlen>:
    1698:	fc 01       	movw	r30, r24
    169a:	61 50       	subi	r22, 0x01	; 1
    169c:	70 40       	sbci	r23, 0x00	; 0
    169e:	01 90       	ld	r0, Z+
    16a0:	01 10       	cpse	r0, r1
    16a2:	d8 f7       	brcc	.-10     	; 0x169a <strnlen+0x2>
    16a4:	80 95       	com	r24
    16a6:	90 95       	com	r25
    16a8:	8e 0f       	add	r24, r30
    16aa:	9f 1f       	adc	r25, r31
    16ac:	08 95       	ret

000016ae <fgetc>:
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	ec 01       	movw	r28, r24
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	20 ff       	sbrs	r18, 0
    16b8:	35 c0       	rjmp	.+106    	; 0x1724 <fgetc+0x76>
    16ba:	26 ff       	sbrs	r18, 6
    16bc:	09 c0       	rjmp	.+18     	; 0x16d0 <fgetc+0x22>
    16be:	2f 7b       	andi	r18, 0xBF	; 191
    16c0:	2b 83       	std	Y+3, r18	; 0x03
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	9f 83       	std	Y+7, r25	; 0x07
    16ca:	8e 83       	std	Y+6, r24	; 0x06
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 c0       	rjmp	.+80     	; 0x1720 <fgetc+0x72>
    16d0:	22 ff       	sbrs	r18, 2
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <fgetc+0x44>
    16d4:	e8 81       	ld	r30, Y
    16d6:	f9 81       	ldd	r31, Y+1	; 0x01
    16d8:	80 81       	ld	r24, Z
    16da:	99 27       	eor	r25, r25
    16dc:	87 fd       	sbrc	r24, 7
    16de:	90 95       	com	r25
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	19 f4       	brne	.+6      	; 0x16ea <fgetc+0x3c>
    16e4:	20 62       	ori	r18, 0x20	; 32
    16e6:	2b 83       	std	Y+3, r18	; 0x03
    16e8:	1d c0       	rjmp	.+58     	; 0x1724 <fgetc+0x76>
    16ea:	31 96       	adiw	r30, 0x01	; 1
    16ec:	f9 83       	std	Y+1, r31	; 0x01
    16ee:	e8 83       	st	Y, r30
    16f0:	11 c0       	rjmp	.+34     	; 0x1714 <fgetc+0x66>
    16f2:	ea 85       	ldd	r30, Y+10	; 0x0a
    16f4:	fb 85       	ldd	r31, Y+11	; 0x0b
    16f6:	ce 01       	movw	r24, r28
    16f8:	19 95       	eicall
    16fa:	97 ff       	sbrs	r25, 7
    16fc:	0b c0       	rjmp	.+22     	; 0x1714 <fgetc+0x66>
    16fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	8f 3f       	cpi	r24, 0xFF	; 255
    1704:	93 07       	cpc	r25, r19
    1706:	11 f4       	brne	.+4      	; 0x170c <fgetc+0x5e>
    1708:	80 e1       	ldi	r24, 0x10	; 16
    170a:	01 c0       	rjmp	.+2      	; 0x170e <fgetc+0x60>
    170c:	80 e2       	ldi	r24, 0x20	; 32
    170e:	82 2b       	or	r24, r18
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <fgetc+0x76>
    1714:	2e 81       	ldd	r18, Y+6	; 0x06
    1716:	3f 81       	ldd	r19, Y+7	; 0x07
    1718:	2f 5f       	subi	r18, 0xFF	; 255
    171a:	3f 4f       	sbci	r19, 0xFF	; 255
    171c:	3f 83       	std	Y+7, r19	; 0x07
    171e:	2e 83       	std	Y+6, r18	; 0x06
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <fgetc+0x7a>
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	9f ef       	ldi	r25, 0xFF	; 255
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <fputc>:
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	8c 01       	movw	r16, r24
    1738:	eb 01       	movw	r28, r22
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	81 ff       	sbrs	r24, 1
    173e:	1b c0       	rjmp	.+54     	; 0x1776 <fputc+0x48>
    1740:	82 ff       	sbrs	r24, 2
    1742:	0d c0       	rjmp	.+26     	; 0x175e <fputc+0x30>
    1744:	2e 81       	ldd	r18, Y+6	; 0x06
    1746:	3f 81       	ldd	r19, Y+7	; 0x07
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	28 17       	cp	r18, r24
    174e:	39 07       	cpc	r19, r25
    1750:	64 f4       	brge	.+24     	; 0x176a <fputc+0x3c>
    1752:	e8 81       	ld	r30, Y
    1754:	f9 81       	ldd	r31, Y+1	; 0x01
    1756:	01 93       	st	Z+, r16
    1758:	f9 83       	std	Y+1, r31	; 0x01
    175a:	e8 83       	st	Y, r30
    175c:	06 c0       	rjmp	.+12     	; 0x176a <fputc+0x3c>
    175e:	e8 85       	ldd	r30, Y+8	; 0x08
    1760:	f9 85       	ldd	r31, Y+9	; 0x09
    1762:	80 2f       	mov	r24, r16
    1764:	19 95       	eicall
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	31 f4       	brne	.+12     	; 0x1776 <fputc+0x48>
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	9f 83       	std	Y+7, r25	; 0x07
    1772:	8e 83       	std	Y+6, r24	; 0x06
    1774:	02 c0       	rjmp	.+4      	; 0x177a <fputc+0x4c>
    1776:	0f ef       	ldi	r16, 0xFF	; 255
    1778:	1f ef       	ldi	r17, 0xFF	; 255
    177a:	c8 01       	movw	r24, r16
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <__ultoa_invert>:
    1786:	fa 01       	movw	r30, r20
    1788:	aa 27       	eor	r26, r26
    178a:	28 30       	cpi	r18, 0x08	; 8
    178c:	51 f1       	breq	.+84     	; 0x17e2 <__ultoa_invert+0x5c>
    178e:	20 31       	cpi	r18, 0x10	; 16
    1790:	81 f1       	breq	.+96     	; 0x17f2 <__ultoa_invert+0x6c>
    1792:	e8 94       	clt
    1794:	6f 93       	push	r22
    1796:	6e 7f       	andi	r22, 0xFE	; 254
    1798:	6e 5f       	subi	r22, 0xFE	; 254
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	af 4f       	sbci	r26, 0xFF	; 255
    17a2:	b1 e0       	ldi	r27, 0x01	; 1
    17a4:	3e d0       	rcall	.+124    	; 0x1822 <__ultoa_invert+0x9c>
    17a6:	b4 e0       	ldi	r27, 0x04	; 4
    17a8:	3c d0       	rcall	.+120    	; 0x1822 <__ultoa_invert+0x9c>
    17aa:	67 0f       	add	r22, r23
    17ac:	78 1f       	adc	r23, r24
    17ae:	89 1f       	adc	r24, r25
    17b0:	9a 1f       	adc	r25, r26
    17b2:	a1 1d       	adc	r26, r1
    17b4:	68 0f       	add	r22, r24
    17b6:	79 1f       	adc	r23, r25
    17b8:	8a 1f       	adc	r24, r26
    17ba:	91 1d       	adc	r25, r1
    17bc:	a1 1d       	adc	r26, r1
    17be:	6a 0f       	add	r22, r26
    17c0:	71 1d       	adc	r23, r1
    17c2:	81 1d       	adc	r24, r1
    17c4:	91 1d       	adc	r25, r1
    17c6:	a1 1d       	adc	r26, r1
    17c8:	20 d0       	rcall	.+64     	; 0x180a <__ultoa_invert+0x84>
    17ca:	09 f4       	brne	.+2      	; 0x17ce <__ultoa_invert+0x48>
    17cc:	68 94       	set
    17ce:	3f 91       	pop	r19
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	26 9f       	mul	r18, r22
    17d4:	11 24       	eor	r1, r1
    17d6:	30 19       	sub	r19, r0
    17d8:	30 5d       	subi	r19, 0xD0	; 208
    17da:	31 93       	st	Z+, r19
    17dc:	de f6       	brtc	.-74     	; 0x1794 <__ultoa_invert+0xe>
    17de:	cf 01       	movw	r24, r30
    17e0:	08 95       	ret
    17e2:	46 2f       	mov	r20, r22
    17e4:	47 70       	andi	r20, 0x07	; 7
    17e6:	40 5d       	subi	r20, 0xD0	; 208
    17e8:	41 93       	st	Z+, r20
    17ea:	b3 e0       	ldi	r27, 0x03	; 3
    17ec:	0f d0       	rcall	.+30     	; 0x180c <__ultoa_invert+0x86>
    17ee:	c9 f7       	brne	.-14     	; 0x17e2 <__ultoa_invert+0x5c>
    17f0:	f6 cf       	rjmp	.-20     	; 0x17de <__ultoa_invert+0x58>
    17f2:	46 2f       	mov	r20, r22
    17f4:	4f 70       	andi	r20, 0x0F	; 15
    17f6:	40 5d       	subi	r20, 0xD0	; 208
    17f8:	4a 33       	cpi	r20, 0x3A	; 58
    17fa:	18 f0       	brcs	.+6      	; 0x1802 <__ultoa_invert+0x7c>
    17fc:	49 5d       	subi	r20, 0xD9	; 217
    17fe:	31 fd       	sbrc	r19, 1
    1800:	40 52       	subi	r20, 0x20	; 32
    1802:	41 93       	st	Z+, r20
    1804:	02 d0       	rcall	.+4      	; 0x180a <__ultoa_invert+0x84>
    1806:	a9 f7       	brne	.-22     	; 0x17f2 <__ultoa_invert+0x6c>
    1808:	ea cf       	rjmp	.-44     	; 0x17de <__ultoa_invert+0x58>
    180a:	b4 e0       	ldi	r27, 0x04	; 4
    180c:	a6 95       	lsr	r26
    180e:	97 95       	ror	r25
    1810:	87 95       	ror	r24
    1812:	77 95       	ror	r23
    1814:	67 95       	ror	r22
    1816:	ba 95       	dec	r27
    1818:	c9 f7       	brne	.-14     	; 0x180c <__ultoa_invert+0x86>
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	61 05       	cpc	r22, r1
    181e:	71 05       	cpc	r23, r1
    1820:	08 95       	ret
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	0a 2e       	mov	r0, r26
    1828:	06 94       	lsr	r0
    182a:	57 95       	ror	r21
    182c:	47 95       	ror	r20
    182e:	37 95       	ror	r19
    1830:	27 95       	ror	r18
    1832:	ba 95       	dec	r27
    1834:	c9 f7       	brne	.-14     	; 0x1828 <__ultoa_invert+0xa2>
    1836:	62 0f       	add	r22, r18
    1838:	73 1f       	adc	r23, r19
    183a:	84 1f       	adc	r24, r20
    183c:	95 1f       	adc	r25, r21
    183e:	a0 1d       	adc	r26, r0
    1840:	08 95       	ret

00001842 <_exit>:
    1842:	f8 94       	cli

00001844 <__stop_program>:
    1844:	ff cf       	rjmp	.-2      	; 0x1844 <__stop_program>
