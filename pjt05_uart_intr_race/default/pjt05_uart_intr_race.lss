
pjt05_uart_intr_race.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800236  00800236  00000432  2**0
                  ALLOC
  3 .stab         000007ec  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000149  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000d70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c3  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f4  00000000  00000000  000013f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000395  00000000  00000000  000015e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000197c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000108  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000177  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e6       	ldi	r30, 0x68	; 104
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a6 e3       	ldi	r26, 0x36	; 54
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a9 37       	cpi	r26, 0x79	; 121
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 84 01 	call	0x308	; 0x308 <main>
 124:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0b 01 	sts	0x010B, r24
 132:	80 93 0a 01 	sts	0x010A, r24
}
 136:	08 95       	ret

00000138 <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
 138:	10 92 0b 01 	sts	0x010B, r1
 13c:	10 92 36 02 	sts	0x0236, r1
}
 140:	08 95       	ret

00000142 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 0b 01 	sts	0x010B, r24
 148:	80 93 36 02 	sts	0x0236, r24
}
 14c:	08 95       	ret

0000014e <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_on+0xa>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_on+0x6>
 15c:	20 95       	com	r18
 15e:	80 91 36 02 	lds	r24, 0x0236
 162:	28 23       	and	r18, r24
 164:	20 93 36 02 	sts	0x0236, r18
	PORTL = Leds;
 168:	20 93 0b 01 	sts	0x010B, r18
}
 16c:	08 95       	ret

0000016e <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <led_off+0xa>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <led_off+0x6>
 17c:	80 91 36 02 	lds	r24, 0x0236
 180:	82 2b       	or	r24, r18
 182:	80 93 36 02 	sts	0x0236, r24
	PORTL = Leds;
 186:	80 93 0b 01 	sts	0x010B, r24
}
 18a:	08 95       	ret

0000018c <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
 18c:	80 95       	com	r24
 18e:	80 93 36 02 	sts	0x0236, r24
	PORTL = Leds;
 192:	80 93 0b 01 	sts	0x010B, r24
}
 196:	08 95       	ret

00000198 <uart_init>:
char buf[64];
int volatile bufi, txend=1;

void uart_init()
{
	UBRR0H = 0x00; UBRR0L = 0x07;
 198:	10 92 c5 00 	sts	0x00C5, r1
 19c:	87 e0       	ldi	r24, 0x07	; 7
 19e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);
 1ac:	e1 ec       	ldi	r30, 0xC1	; 193
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0);
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
}
 1bc:	08 95       	ret

000001be <uart_putstart>:


void uart_putstart(char str[])
{
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	18 2f       	mov	r17, r24
 1c8:	09 2f       	mov	r16, r25
	char ch; int n = strlen(str);
 1ca:	e8 2f       	mov	r30, r24
 1cc:	f9 2f       	mov	r31, r25
 1ce:	ef 01       	movw	r28, r30
 1d0:	09 90       	ld	r0, Y+
 1d2:	00 20       	and	r0, r0
 1d4:	e9 f7       	brne	.-6      	; 0x1d0 <uart_putstart+0x12>
 1d6:	21 97       	sbiw	r28, 0x01	; 1
 1d8:	ce 1b       	sub	r28, r30
 1da:	df 0b       	sbc	r29, r31
	led_on(0);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 a7 00 	call	0x14e	; 0x14e <led_on>
	cli();
 1e2:	f8 94       	cli
	led_on(1);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <led_on>
	while(sizeof(buf) - strlen(buf + bufi) - 1 < n);
 1ea:	2f e3       	ldi	r18, 0x3F	; 63
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	a0 91 37 02 	lds	r26, 0x0237
 1f2:	b0 91 38 02 	lds	r27, 0x0238
 1f6:	a7 5c       	subi	r26, 0xC7	; 199
 1f8:	bd 4f       	sbci	r27, 0xFD	; 253
 1fa:	fd 01       	movw	r30, r26
 1fc:	01 90       	ld	r0, Z+
 1fe:	00 20       	and	r0, r0
 200:	e9 f7       	brne	.-6      	; 0x1fc <uart_putstart+0x3e>
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	ea 1b       	sub	r30, r26
 206:	fb 0b       	sbc	r31, r27
 208:	c9 01       	movw	r24, r18
 20a:	8e 1b       	sub	r24, r30
 20c:	9f 0b       	sbc	r25, r31
 20e:	8c 17       	cp	r24, r28
 210:	9d 07       	cpc	r25, r29
 212:	68 f3       	brcs	.-38     	; 0x1ee <uart_putstart+0x30>
	led_on(2);
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 a7 00 	call	0x14e	; 0x14e <led_on>
	// cli();		// buffer controling , ISR not working
	strcpy(buf, buf + bufi); strcat(buf, str); 
 21a:	60 91 37 02 	lds	r22, 0x0237
 21e:	70 91 38 02 	lds	r23, 0x0238
 222:	67 5c       	subi	r22, 0xC7	; 199
 224:	7d 4f       	sbci	r23, 0xFD	; 253
 226:	89 e3       	ldi	r24, 0x39	; 57
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	0e 94 ab 01 	call	0x356	; 0x356 <strcpy>
 22e:	89 e3       	ldi	r24, 0x39	; 57
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	61 2f       	mov	r22, r17
 234:	70 2f       	mov	r23, r16
 236:	0e 94 a0 01 	call	0x340	; 0x340 <strcat>
	bufi = 0;
 23a:	10 92 38 02 	sts	0x0238, r1
 23e:	10 92 37 02 	sts	0x0237, r1

	if(txend) {
 242:	80 91 33 02 	lds	r24, 0x0233
 246:	90 91 34 02 	lds	r25, 0x0234
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	99 f0       	breq	.+38     	; 0x274 <uart_putstart+0xb6>
		txend = 0; ch = buf[bufi++];
 24e:	10 92 34 02 	sts	0x0234, r1
 252:	10 92 33 02 	sts	0x0233, r1
 256:	80 91 37 02 	lds	r24, 0x0237
 25a:	90 91 38 02 	lds	r25, 0x0238
 25e:	fc 01       	movw	r30, r24
 260:	e7 5c       	subi	r30, 0xC7	; 199
 262:	fd 4f       	sbci	r31, 0xFD	; 253
 264:	20 81       	ld	r18, Z
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 38 02 	sts	0x0238, r25
 26c:	80 93 37 02 	sts	0x0237, r24
		UDR0 = ch;
 270:	20 93 c6 00 	sts	0x00C6, r18
	}
	sei();
 274:	78 94       	sei
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <__vector_27>:


ISR(USART0_TX_vect)
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	0b b6       	in	r0, 0x3b	; 59
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
	char ch = buf[bufi];
 298:	e0 91 37 02 	lds	r30, 0x0237
 29c:	f0 91 38 02 	lds	r31, 0x0238
 2a0:	e7 5c       	subi	r30, 0xC7	; 199
 2a2:	fd 4f       	sbci	r31, 0xFD	; 253
 2a4:	20 81       	ld	r18, Z
	if(!ch) {
 2a6:	22 23       	and	r18, r18
 2a8:	69 f4       	brne	.+26     	; 0x2c4 <__vector_27+0x44>
		bufi = buf[0] = 0;
 2aa:	10 92 39 02 	sts	0x0239, r1
 2ae:	10 92 38 02 	sts	0x0238, r1
 2b2:	10 92 37 02 	sts	0x0237, r1
		txend = 1; 
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 34 02 	sts	0x0234, r25
 2be:	80 93 33 02 	sts	0x0233, r24
		return;
 2c2:	16 c0       	rjmp	.+44     	; 0x2f0 <__vector_27+0x70>
	}
	if(ch == '\n') buf[bufi] = '\r';
 2c4:	2a 30       	cpi	r18, 0x0A	; 10
 2c6:	49 f4       	brne	.+18     	; 0x2da <__vector_27+0x5a>
 2c8:	e0 91 37 02 	lds	r30, 0x0237
 2cc:	f0 91 38 02 	lds	r31, 0x0238
 2d0:	e7 5c       	subi	r30, 0xC7	; 199
 2d2:	fd 4f       	sbci	r31, 0xFD	; 253
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	80 83       	st	Z, r24
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <__vector_27+0x6c>
	else bufi++;
 2da:	80 91 37 02 	lds	r24, 0x0237
 2de:	90 91 38 02 	lds	r25, 0x0238
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	90 93 38 02 	sts	0x0238, r25
 2e8:	80 93 37 02 	sts	0x0237, r24
	UDR0 = ch;
 2ec:	20 93 c6 00 	sts	0x00C6, r18
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0b be       	out	0x3b, r0	; 59
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <main>:
#include <avr/interrupt.h>

int main()
{
	int i;
	uart_init();
 308:	0e 94 cc 00 	call	0x198	; 0x198 <uart_init>
	led_init();
 30c:	0e 94 96 00 	call	0x12c	; 0x12c <led_init>
	led_off_all();
 310:	0e 94 a1 00 	call	0x142	; 0x142 <led_off_all>
	sei();
 314:	78 94       	sei
 316:	ca e0       	ldi	r28, 0x0A	; 10
 318:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i < 10; i++) {
		uart_putstart("I love you.\n");
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
		uart_putstart("You love me.\n");
 322:	8d e0       	ldi	r24, 0x0D	; 13
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
		uart_putstart("He loves her.\n");
 32a:	8b e1       	ldi	r24, 0x1B	; 27
 32c:	92 e0       	ldi	r25, 0x02	; 2
 32e:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
 332:	21 97       	sbiw	r28, 0x01	; 1
	int i;
	uart_init();
	led_init();
	led_off_all();
	sei();
	for(i=0; i < 10; i++) {
 334:	91 f7       	brne	.-28     	; 0x31a <main+0x12>
		uart_putstart("I love you.\n");
		uart_putstart("You love me.\n");
		uart_putstart("He loves her.\n");
	}
	uart_putstart("End !!!\n");
 336:	8a e2       	ldi	r24, 0x2A	; 42
 338:	92 e0       	ldi	r25, 0x02	; 2
 33a:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
 33e:	ff cf       	rjmp	.-2      	; 0x33e <main+0x36>

00000340 <strcat>:
 340:	fb 01       	movw	r30, r22
 342:	dc 01       	movw	r26, r24
 344:	0d 90       	ld	r0, X+
 346:	00 20       	and	r0, r0
 348:	e9 f7       	brne	.-6      	; 0x344 <strcat+0x4>
 34a:	11 97       	sbiw	r26, 0x01	; 1
 34c:	01 90       	ld	r0, Z+
 34e:	0d 92       	st	X+, r0
 350:	00 20       	and	r0, r0
 352:	e1 f7       	brne	.-8      	; 0x34c <strcat+0xc>
 354:	08 95       	ret

00000356 <strcpy>:
 356:	fb 01       	movw	r30, r22
 358:	dc 01       	movw	r26, r24
 35a:	01 90       	ld	r0, Z+
 35c:	0d 92       	st	X+, r0
 35e:	00 20       	and	r0, r0
 360:	e1 f7       	brne	.-8      	; 0x35a <strcpy+0x4>
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
