
pjt04_uart_intr_volatile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  000002c8  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  0080021c  0080021c  00000378  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005be  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000020a  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010c  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000141  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ec       	ldi	r30, 0xC8	; 200
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	ac e1       	ldi	r26, 0x1C	; 28
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	af 35       	cpi	r26, 0x5F	; 95
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 49 01 	call	0x292	; 0x292 <main>
 124:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0b 01 	sts	0x010B, r24
 132:	80 93 0a 01 	sts	0x010A, r24
}
 136:	08 95       	ret

00000138 <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
 138:	10 92 0b 01 	sts	0x010B, r1
 13c:	10 92 1c 02 	sts	0x021C, r1
}
 140:	08 95       	ret

00000142 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 0b 01 	sts	0x010B, r24
 148:	80 93 1c 02 	sts	0x021C, r24
}
 14c:	08 95       	ret

0000014e <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_on+0xa>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_on+0x6>
 15c:	20 95       	com	r18
 15e:	80 91 1c 02 	lds	r24, 0x021C
 162:	28 23       	and	r18, r24
 164:	20 93 1c 02 	sts	0x021C, r18
	PORTL = Leds;
 168:	20 93 0b 01 	sts	0x010B, r18
}
 16c:	08 95       	ret

0000016e <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <led_off+0xa>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <led_off+0x6>
 17c:	80 91 1c 02 	lds	r24, 0x021C
 180:	82 2b       	or	r24, r18
 182:	80 93 1c 02 	sts	0x021C, r24
	PORTL = Leds;
 186:	80 93 0b 01 	sts	0x010B, r24
}
 18a:	08 95       	ret

0000018c <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
 18c:	80 95       	com	r24
 18e:	80 93 1c 02 	sts	0x021C, r24
	PORTL = Leds;
 192:	80 93 0b 01 	sts	0x010B, r24
}
 196:	08 95       	ret

00000198 <uart_init>:


void uart_init()
{
	// UBRR0H = 0x00;	UBRR0L = 0x03; // 115.2k
	UBRR0H = 0x00;	UBRR0L = 0x07;
 198:	10 92 c5 00 	sts	0x00C5, r1
 19c:	87 e0       	ldi	r24, 0x07	; 7
 19e:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 1a2:	e0 ec       	ldi	r30, 0xC0	; 192
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);		// TX enable
 1ac:	e1 ec       	ldi	r30, 0xC1	; 193
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0);	// interrupt enable
 1b6:	80 81       	ld	r24, Z
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	80 83       	st	Z, r24
}
 1bc:	08 95       	ret

000001be <uart_putstart>:
	}
}
*/

void uart_putstart(char str[])
{
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	ec 01       	movw	r28, r24
	led_on_all();
 1c4:	0e 94 9c 00 	call	0x138	; 0x138 <led_on_all>

	char ch;

	while(!txend); txend = 0;
 1c8:	80 91 19 02 	lds	r24, 0x0219
 1cc:	90 91 1a 02 	lds	r25, 0x021A
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	d1 f3       	breq	.-12     	; 0x1c8 <uart_putstart+0xa>
 1d4:	10 92 1a 02 	sts	0x021A, r1
 1d8:	10 92 19 02 	sts	0x0219, r1

	led_off_all();
 1dc:	0e 94 a1 00 	call	0x142	; 0x142 <led_off_all>
	strcpy(buf, str); bufi = 0;
 1e0:	8f e1       	ldi	r24, 0x1F	; 31
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	be 01       	movw	r22, r28
 1e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <strcpy>
 1ea:	10 92 1e 02 	sts	0x021E, r1
 1ee:	10 92 1d 02 	sts	0x021D, r1
	ch = buf[bufi++];
 1f2:	80 91 1d 02 	lds	r24, 0x021D
 1f6:	90 91 1e 02 	lds	r25, 0x021E
 1fa:	fc 01       	movw	r30, r24
 1fc:	e1 5e       	subi	r30, 0xE1	; 225
 1fe:	fd 4f       	sbci	r31, 0xFD	; 253
 200:	20 81       	ld	r18, Z
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 1e 02 	sts	0x021E, r25
 208:	80 93 1d 02 	sts	0x021D, r24
	if ( buf[0] && (63 - strlen(buf) > strlen(str))) {
		strcat(buf, str);
		return;
	}
	*/
	UDR0 = ch;
 20c:	20 93 c6 00 	sts	0x00C6, r18
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <__vector_27>:


//////////////////////////////////////////////
ISR(USART0_TX_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	0b b6       	in	r0, 0x3b	; 59
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	char ch = buf[bufi];
 22e:	e0 91 1d 02 	lds	r30, 0x021D
 232:	f0 91 1e 02 	lds	r31, 0x021E
 236:	e1 5e       	subi	r30, 0xE1	; 225
 238:	fd 4f       	sbci	r31, 0xFD	; 253
 23a:	20 81       	ld	r18, Z
	if(!ch) {
 23c:	22 23       	and	r18, r18
 23e:	39 f4       	brne	.+14     	; 0x24e <__vector_27+0x38>
		txend = 1; 
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 1a 02 	sts	0x021A, r25
 248:	80 93 19 02 	sts	0x0219, r24
		return;
 24c:	16 c0       	rjmp	.+44     	; 0x27a <__vector_27+0x64>
	}
	if(ch == '\n') buf[bufi] = '\r';
 24e:	2a 30       	cpi	r18, 0x0A	; 10
 250:	49 f4       	brne	.+18     	; 0x264 <__vector_27+0x4e>
 252:	e0 91 1d 02 	lds	r30, 0x021D
 256:	f0 91 1e 02 	lds	r31, 0x021E
 25a:	e1 5e       	subi	r30, 0xE1	; 225
 25c:	fd 4f       	sbci	r31, 0xFD	; 253
 25e:	8d e0       	ldi	r24, 0x0D	; 13
 260:	80 83       	st	Z, r24
 262:	09 c0       	rjmp	.+18     	; 0x276 <__vector_27+0x60>
	else bufi++;
 264:	80 91 1d 02 	lds	r24, 0x021D
 268:	90 91 1e 02 	lds	r25, 0x021E
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 1e 02 	sts	0x021E, r25
 272:	80 93 1d 02 	sts	0x021D, r24
	UDR0 = ch;
 276:	20 93 c6 00 	sts	0x00C6, r18
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0b be       	out	0x3b, r0	; 59
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <main>:
*/

int main()
{

	led_init();
 292:	0e 94 96 00 	call	0x12c	; 0x12c <led_init>
	uart_init();
 296:	0e 94 cc 00 	call	0x198	; 0x198 <uart_init>

	sei();
 29a:	78 94       	sei
 29c:	c0 e1       	ldi	r28, 0x10	; 16
 29e:	d7 e2       	ldi	r29, 0x27	; 39

	for(int i=0; i<10000; i++) {
		uart_putstart("i love you.\n");
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
 2a8:	21 97       	sbiw	r28, 0x01	; 1
	led_init();
	uart_init();

	sei();

	for(int i=0; i<10000; i++) {
 2aa:	d1 f7       	brne	.-12     	; 0x2a0 <main+0xe>
		uart_putstart("i love you.\n");
	}
	uart_putstart("THE END !!\n");
 2ac:	8d e0       	ldi	r24, 0x0D	; 13
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	0e 94 df 00 	call	0x1be	; 0x1be <uart_putstart>
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0x22>

000002b6 <strcpy>:
 2b6:	fb 01       	movw	r30, r22
 2b8:	dc 01       	movw	r26, r24
 2ba:	01 90       	ld	r0, Z+
 2bc:	0d 92       	st	X+, r0
 2be:	00 20       	and	r0, r0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <strcpy+0x4>
 2c2:	08 95       	ret

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
