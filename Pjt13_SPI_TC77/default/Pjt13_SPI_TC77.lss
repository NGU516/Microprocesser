
Pjt13_SPI_TC77.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800200  00002812  000028a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002812  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  00800460  00800460  00002b06  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004e8  00000000  00000000  00004028  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d46  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002638  00000000  00000000  00009256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024b2  00000000  00000000  0000b88e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce0  00000000  00000000  0000dd40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be7  00000000  00000000  0000ea20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d8a  00000000  00000000  0000f607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00012391  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 05 08 	jmp	0x100a	; 0x100a <__vector_24>
      64:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e1       	ldi	r30, 0x12	; 18
      fc:	f8 e2       	ldi	r31, 0x28	; 40
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 36       	cpi	r26, 0x60	; 96
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	a0 e6       	ldi	r26, 0x60	; 96
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a4 3a       	cpi	r26, 0xA4	; 164
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <main>
     124:	0c 94 07 14 	jmp	0x280e	; 0x280e <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include <avr/interrupt.h>
#include "task_queue.h"

void adc_init()
{
	cbi(DDRF, PF0);			// input PF0(=ADC0)GPIO
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;	// Ref : 1.1v, Port : PF0
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);		// ADC enable
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);			// warming up
	sbi(ADCSRA, ADIE);		// ADC interruput enable
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);		// start conversion
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <__vector_29>:

////////////////////////////////////////////
ISR(ADC_vect)
{
     156:	1f 92       	push	r1
     158:	0f 92       	push	r0
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	0f 92       	push	r0
     15e:	0b b6       	in	r0, 0x3b	; 59
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	2f 93       	push	r18
     16a:	3f 93       	push	r19
     16c:	4f 93       	push	r20
     16e:	5f 93       	push	r21
     170:	6f 93       	push	r22
     172:	7f 93       	push	r23
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
     178:	af 93       	push	r26
     17a:	bf 93       	push	r27
     17c:	ef 93       	push	r30
     17e:	ff 93       	push	r31
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	28 97       	sbiw	r28, 0x08	; 8
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	cd bf       	out	0x3d, r28	; 61
	uint16_t data;
	char	 arg[8];

	data = ADCW & 0x03ff;
     18e:	80 91 78 00 	lds	r24, 0x0078
     192:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);		// ADC stop
     196:	ea e7       	ldi	r30, 0x7A	; 122
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	20 81       	ld	r18, Z
     19c:	2f 77       	andi	r18, 0x7F	; 127
     19e:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <__vector_29+0x4c>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <__vector_29+0x4e>
     1a4:	ed b7       	in	r30, 0x3d	; 61
     1a6:	fe b7       	in	r31, 0x3e	; 62
     1a8:	31 96       	adiw	r30, 0x01	; 1
     1aa:	8e 01       	movw	r16, r28
     1ac:	0f 5f       	subi	r16, 0xFF	; 255
     1ae:	1f 4f       	sbci	r17, 0xFF	; 255
     1b0:	ad b7       	in	r26, 0x3d	; 61
     1b2:	be b7       	in	r27, 0x3e	; 62
     1b4:	12 96       	adiw	r26, 0x02	; 2
     1b6:	1c 93       	st	X, r17
     1b8:	0e 93       	st	-X, r16
     1ba:	11 97       	sbiw	r26, 0x01	; 1
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	32 e0       	ldi	r19, 0x02	; 2
     1c0:	33 83       	std	Z+3, r19	; 0x03
     1c2:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t data;
	char	 arg[8];

	data = ADCW & 0x03ff;
     1c4:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);		// ADC stop

	sprintf(arg, "%d", data);
     1c6:	95 83       	std	Z+5, r25	; 0x05
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <sprintf>

	task_tc1047(arg);
     1ce:	8d b7       	in	r24, 0x3d	; 61
     1d0:	9e b7       	in	r25, 0x3e	; 62
     1d2:	06 96       	adiw	r24, 0x06	; 6
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	9e bf       	out	0x3e, r25	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	8d bf       	out	0x3d, r24	; 61
     1de:	c8 01       	movw	r24, r16
     1e0:	0e 94 b7 03 	call	0x76e	; 0x76e <task_tc1047>
}
     1e4:	28 96       	adiw	r28, 0x08	; 8
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	ff 91       	pop	r31
     1f0:	ef 91       	pop	r30
     1f2:	bf 91       	pop	r27
     1f4:	af 91       	pop	r26
     1f6:	9f 91       	pop	r25
     1f8:	8f 91       	pop	r24
     1fa:	7f 91       	pop	r23
     1fc:	6f 91       	pop	r22
     1fe:	5f 91       	pop	r21
     200:	4f 91       	pop	r20
     202:	3f 91       	pop	r19
     204:	2f 91       	pop	r18
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	0f 90       	pop	r0
     20c:	0b be       	out	0x3b, r0	; 59
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <is_prime>:
#include <stdlib.h>
#include "linked_list.h"
#include "Timer_linked_list.h"

int is_prime(int n)
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	fc 01       	movw	r30, r24
	int i;
	for (i = 2; i <= n/2; i++)
     21e:	62 e0       	ldi	r22, 0x02	; 2
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     226:	eb 01       	movw	r28, r22
     228:	22 e0       	ldi	r18, 0x02	; 2
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	08 c0       	rjmp	.+16     	; 0x23e <is_prime+0x26>
		if((n % i) == 0)
     22e:	cf 01       	movw	r24, r30
     230:	b9 01       	movw	r22, r18
     232:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	41 f0       	breq	.+16     	; 0x24a <is_prime+0x32>
#include "Timer_linked_list.h"

int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	3f 4f       	sbci	r19, 0xFF	; 255
     23e:	c2 17       	cp	r28, r18
     240:	d3 07       	cpc	r29, r19
     242:	ac f7       	brge	.-22     	; 0x22e <is_prime+0x16>
		if((n % i) == 0)
			return 0;
	return 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <app_prime>:

void app_prime(char *ap)
{
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     264:	00 97       	sbiw	r24, 0x00	; 0
     266:	21 f0       	breq	.+8      	; 0x270 <app_prime+0x1c>
     268:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <atoi>
     26c:	7c 01       	movw	r14, r24
     26e:	04 c0       	rjmp	.+8      	; 0x278 <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     270:	90 ed       	ldi	r25, 0xD0	; 208
     272:	e9 2e       	mov	r14, r25
     274:	97 e0       	ldi	r25, 0x07	; 7
     276:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     278:	c2 e0       	ldi	r28, 0x02	; 2
     27a:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	c8 2e       	mov	r12, r24
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     288:	16 c0       	rjmp	.+44     	; 0x2b6 <app_prime+0x62>
		if (is_prime(n)) {
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 0c 01 	call	0x218	; 0x218 <is_prime>
     290:	00 97       	sbiw	r24, 0x00	; 0
     292:	81 f0       	breq	.+32     	; 0x2b4 <app_prime+0x60>
			count++;
     294:	0f 5f       	subi	r16, 0xFF	; 255
     296:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     298:	00 d0       	rcall	.+0      	; 0x29a <app_prime+0x46>
     29a:	0f 92       	push	r0
     29c:	ed b7       	in	r30, 0x3d	; 61
     29e:	fe b7       	in	r31, 0x3e	; 62
     2a0:	d2 82       	std	Z+2, r13	; 0x02
     2a2:	c1 82       	std	Z+1, r12	; 0x01
     2a4:	d4 83       	std	Z+4, r29	; 0x04
     2a6:	c3 83       	std	Z+3, r28	; 0x03
     2a8:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     2b4:	21 96       	adiw	r28, 0x01	; 1
     2b6:	ec 16       	cp	r14, r28
     2b8:	fd 06       	cpc	r15, r29
     2ba:	3c f7       	brge	.-50     	; 0x28a <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     2bc:	00 d0       	rcall	.+0      	; 0x2be <app_prime+0x6a>
     2be:	0f 92       	push	r0
     2c0:	8d e1       	ldi	r24, 0x1D	; 29
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	ed b7       	in	r30, 0x3d	; 61
     2c6:	fe b7       	in	r31, 0x3e	; 62
     2c8:	92 83       	std	Z+2, r25	; 0x02
     2ca:	81 83       	std	Z+1, r24	; 0x01
     2cc:	14 83       	std	Z+4, r17	; 0x04
     2ce:	03 83       	std	Z+3, r16	; 0x03
     2d0:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	cf 90       	pop	r12
     2ec:	08 95       	ret

000002ee <app_list>:

void app_list(char *ap)
{
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	28 97       	sbiw	r28, 0x08	; 8
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	19 f0       	breq	.+6      	; 0x312 <app_list+0x24>
     30c:	fc 01       	movw	r30, r24
     30e:	10 81       	ld	r17, Z
     310:	01 c0       	rjmp	.+2      	; 0x314 <app_list+0x26>
	printf("count=%d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     312:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]

	while(1) {
		printf( ">  ");
     314:	27 e2       	ldi	r18, 0x27	; 39
     316:	e2 2e       	mov	r14, r18
     318:	22 e0       	ldi	r18, 0x02	; 2
     31a:	f2 2e       	mov	r15, r18
     31c:	0f 92       	push	r0
     31e:	0f 92       	push	r0
     320:	ed b7       	in	r30, 0x3d	; 61
     322:	fe b7       	in	r31, 0x3e	; 62
     324:	f2 82       	std	Z+2, r15	; 0x02
     326:	e1 82       	std	Z+1, r14	; 0x01
     328:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	40 91 9e 05 	lds	r20, 0x059E
     334:	50 91 9f 05 	lds	r21, 0x059F
     338:	ce 01       	movw	r24, r28
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	68 e0       	ldi	r22, 0x08	; 8
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	0e 94 50 10 	call	0x20a0	; 0x20a0 <fgets>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 f0       	breq	.+40     	; 0x370 <app_list+0x82>
			break;
		np = get_node();
     348:	0e 94 8d 02 	call	0x51a	; 0x51a <get_node>
		np->data = buf[0];
     34c:	29 81       	ldd	r18, Y+1	; 0x01
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
     352:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     354:	18 36       	cpi	r17, 0x68	; 104
     356:	19 f0       	breq	.+6      	; 0x35e <app_list+0x70>
     358:	14 37       	cpi	r17, 0x74	; 116
     35a:	39 f4       	brne	.+14     	; 0x36a <app_list+0x7c>
     35c:	03 c0       	rjmp	.+6      	; 0x364 <app_list+0x76>
			case 'h'	: insert_node_head(np); break;
     35e:	0e 94 95 02 	call	0x52a	; 0x52a <insert_node_head>
     362:	dc cf       	rjmp	.-72     	; 0x31c <app_list+0x2e>
			case 't'	: insert_node_tail(np); break;
     364:	0e 94 aa 02 	call	0x554	; 0x554 <insert_node_tail>
     368:	d9 cf       	rjmp	.-78     	; 0x31c <app_list+0x2e>
			default 	: insert_node_ascn(np); //	'a'
     36a:	0e 94 c1 02 	call	0x582	; 0x582 <insert_node_ascn>
     36e:	d6 cf       	rjmp	.-84     	; 0x31c <app_list+0x2e>
		}
	}

	tour_list();
     370:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <tour_list>
	free_list();
     374:	0e 94 28 03 	call	0x650	; 0x650 <free_list>
}
     378:	28 96       	adiw	r28, 0x08	; 8
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	08 95       	ret

00000390 <app_timer>:

void app_timer(char *ap)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	62 97       	sbiw	r28, 0x12	; 18
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     3a8:	0b e2       	ldi	r16, 0x2B	; 43
     3aa:	12 e0       	ldi	r17, 0x02	; 2
     3ac:	0f 92       	push	r0
     3ae:	0f 92       	push	r0
     3b0:	ed b7       	in	r30, 0x3d	; 61
     3b2:	fe b7       	in	r31, 0x3e	; 62
     3b4:	12 83       	std	Z+2, r17	; 0x02
     3b6:	01 83       	std	Z+1, r16	; 0x01
     3b8:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	40 91 9e 05 	lds	r20, 0x059E
     3c4:	50 91 9f 05 	lds	r21, 0x059F
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	68 e0       	ldi	r22, 0x08	; 8
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <fgets>
     3d4:	00 97       	sbiw	r24, 0x00	; 0
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <app_timer+0x60>
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <atoi>
     3e0:	bc 01       	movw	r22, r24
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     3e6:	ce 01       	movw	r24, r28
     3e8:	09 96       	adiw	r24, 0x09	; 9
     3ea:	0e 94 92 05 	call	0xb24	; 0xb24 <insert_timer>
	}
     3ee:	de cf       	rjmp	.-68     	; 0x3ac <app_timer+0x1c>

	tour_timer();
     3f0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <tour_timer>
	free_timer();
     3f4:	0e 94 3d 06 	call	0xc7a	; 0xc7a <free_timer>
}
     3f8:	62 96       	adiw	r28, 0x12	; 18
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <task_prime>:

void task_prime(char *ap)
{
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     41e:	00 97       	sbiw	r24, 0x00	; 0
     420:	41 f0       	breq	.+16     	; 0x432 <task_prime+0x24>
     422:	fc 01       	movw	r30, r24
     424:	20 81       	ld	r18, Z
     426:	22 23       	and	r18, r18
     428:	21 f0       	breq	.+8      	; 0x432 <task_prime+0x24>
     42a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <atoi>
     42e:	8c 01       	movw	r16, r24
     430:	02 c0       	rjmp	.+4      	; 0x436 <task_prime+0x28>
	free_timer();
}

void task_prime(char *ap)
{
	int n, t= 2000, count = 0;
     432:	00 ed       	ldi	r16, 0xD0	; 208
     434:	17 e0       	ldi	r17, 0x07	; 7
     436:	ee 24       	eor	r14, r14
     438:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     43a:	c2 e0       	ldi	r28, 0x02	; 2
     43c:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     43e:	33 e0       	ldi	r19, 0x03	; 3
     440:	c3 2e       	mov	r12, r19
     442:	32 e0       	ldi	r19, 0x02	; 2
     444:	d3 2e       	mov	r13, r19
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     446:	17 c0       	rjmp	.+46     	; 0x476 <task_prime+0x68>
		if (is_prime(n)) {
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 0c 01 	call	0x218	; 0x218 <is_prime>
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	89 f0       	breq	.+34     	; 0x474 <task_prime+0x66>
			count++;
     452:	08 94       	sec
     454:	e1 1c       	adc	r14, r1
     456:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!!\n", n);
     458:	00 d0       	rcall	.+0      	; 0x45a <task_prime+0x4c>
     45a:	0f 92       	push	r0
     45c:	ed b7       	in	r30, 0x3d	; 61
     45e:	fe b7       	in	r31, 0x3e	; 62
     460:	d2 82       	std	Z+2, r13	; 0x02
     462:	c1 82       	std	Z+1, r12	; 0x01
     464:	d4 83       	std	Z+4, r29	; 0x04
     466:	c3 83       	std	Z+3, r28	; 0x03
     468:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     474:	21 96       	adiw	r28, 0x01	; 1
     476:	0c 17       	cp	r16, r28
     478:	1d 07       	cpc	r17, r29
     47a:	34 f7       	brge	.-52     	; 0x448 <task_prime+0x3a>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     47c:	00 d0       	rcall	.+0      	; 0x47e <task_prime+0x70>
     47e:	0f 92       	push	r0
     480:	8d e1       	ldi	r24, 0x1D	; 29
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	ed b7       	in	r30, 0x3d	; 61
     486:	fe b7       	in	r31, 0x3e	; 62
     488:	92 83       	std	Z+2, r25	; 0x02
     48a:	81 83       	std	Z+1, r24	; 0x01
     48c:	f4 82       	std	Z+4, r15	; 0x04
     48e:	e3 82       	std	Z+3, r14	; 0x03
     490:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	08 95       	ret

000004ae <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 0b 01 	sts	0x010B, r24
     4b4:	80 93 0a 01 	sts	0x010A, r24
}
     4b8:	08 95       	ret

000004ba <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
     4ba:	10 92 0b 01 	sts	0x010B, r1
     4be:	10 92 60 04 	sts	0x0460, r1
}
     4c2:	08 95       	ret

000004c4 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	80 93 0b 01 	sts	0x010B, r24
     4ca:	80 93 60 04 	sts	0x0460, r24
}
     4ce:	08 95       	ret

000004d0 <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <led_on+0xa>
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	8a 95       	dec	r24
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <led_on+0x6>
     4de:	20 95       	com	r18
     4e0:	80 91 60 04 	lds	r24, 0x0460
     4e4:	28 23       	and	r18, r24
     4e6:	20 93 60 04 	sts	0x0460, r18
	PORTL = Leds;
     4ea:	20 93 0b 01 	sts	0x010B, r18
}
     4ee:	08 95       	ret

000004f0 <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <led_off+0xa>
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	8a 95       	dec	r24
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <led_off+0x6>
     4fe:	80 91 60 04 	lds	r24, 0x0460
     502:	82 2b       	or	r24, r18
     504:	80 93 60 04 	sts	0x0460, r24
	PORTL = Leds;
     508:	80 93 0b 01 	sts	0x010B, r24
}
     50c:	08 95       	ret

0000050e <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     50e:	80 95       	com	r24
     510:	80 93 60 04 	sts	0x0460, r24
	PORTL = Leds;
     514:	80 93 0b 01 	sts	0x010B, r24
}
     518:	08 95       	ret

0000051a <get_node>:

struct node *get_node()
{
	struct node *cp;	// current pointer

	cp = (struct node *)malloc(sizeof(struct node));
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <malloc>
	return cp;
}
     522:	08 95       	ret

00000524 <free_node>:

void free_node(struct node *np)
{
	free(np);
     524:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <free>
}
     528:	08 95       	ret

0000052a <insert_node_head>:

void insert_node_head(struct node *np)
{
     52a:	fc 01       	movw	r30, r24
	if (!Head) {
     52c:	80 91 61 04 	lds	r24, 0x0461
     530:	90 91 62 04 	lds	r25, 0x0462
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	39 f4       	brne	.+14     	; 0x546 <insert_node_head+0x1c>
		Head = np;
     538:	f0 93 62 04 	sts	0x0462, r31
     53c:	e0 93 61 04 	sts	0x0461, r30
		np->link = NULL;
     540:	13 82       	std	Z+3, r1	; 0x03
     542:	12 82       	std	Z+2, r1	; 0x02
     544:	08 95       	ret
	}
	else {
		np->link = Head;
     546:	93 83       	std	Z+3, r25	; 0x03
     548:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     54a:	f0 93 62 04 	sts	0x0462, r31
     54e:	e0 93 61 04 	sts	0x0461, r30
     552:	08 95       	ret

00000554 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if (!Head)
     554:	e0 91 61 04 	lds	r30, 0x0461
     558:	f0 91 62 04 	lds	r31, 0x0462
     55c:	30 97       	sbiw	r30, 0x00	; 0
     55e:	31 f4       	brne	.+12     	; 0x56c <insert_node_tail+0x18>
		Head = np;
     560:	90 93 62 04 	sts	0x0462, r25
     564:	80 93 61 04 	sts	0x0461, r24
     568:	08 c0       	rjmp	.+16     	; 0x57a <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     56a:	f9 01       	movw	r30, r18
     56c:	22 81       	ldd	r18, Z+2	; 0x02
     56e:	33 81       	ldd	r19, Z+3	; 0x03
     570:	21 15       	cp	r18, r1
     572:	31 05       	cpc	r19, r1
     574:	d1 f7       	brne	.-12     	; 0x56a <insert_node_tail+0x16>
		cp->link = np;
     576:	93 83       	std	Z+3, r25	; 0x03
     578:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     57a:	fc 01       	movw	r30, r24
     57c:	13 82       	std	Z+3, r1	; 0x03
     57e:	12 82       	std	Z+2, r1	; 0x02
}
     580:	08 95       	ret

00000582 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	fc 01       	movw	r30, r24
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
     588:	a0 91 61 04 	lds	r26, 0x0461
     58c:	b0 91 62 04 	lds	r27, 0x0462
     590:	10 97       	sbiw	r26, 0x00	; 0
     592:	49 f0       	breq	.+18     	; 0x5a6 <insert_node_ascn+0x24>
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     594:	60 81       	ld	r22, Z
     596:	71 81       	ldd	r23, Z+1	; 0x01
     598:	3a 2f       	mov	r19, r26
     59a:	2b 2f       	mov	r18, r27
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	d0 e0       	ldi	r29, 0x00	; 0
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
			np->link = Head;
			Head = np;
     5a0:	58 2f       	mov	r21, r24
     5a2:	4f 2f       	mov	r20, r31
     5a4:	1b c0       	rjmp	.+54     	; 0x5dc <insert_node_ascn+0x5a>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
		Head = np;
     5a6:	90 93 62 04 	sts	0x0462, r25
     5aa:	80 93 61 04 	sts	0x0461, r24
		np->link = NULL;
     5ae:	13 82       	std	Z+3, r1	; 0x03
     5b0:	12 82       	std	Z+2, r1	; 0x02
     5b2:	1e c0       	rjmp	.+60     	; 0x5f0 <insert_node_ascn+0x6e>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
     5b4:	20 97       	sbiw	r28, 0x00	; 0
     5b6:	21 f4       	brne	.+8      	; 0x5c0 <insert_node_ascn+0x3e>
			np->link = Head;
     5b8:	32 83       	std	Z+2, r19	; 0x02
     5ba:	23 83       	std	Z+3, r18	; 0x03
			Head = np;
     5bc:	9a 01       	movw	r18, r20
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <insert_node_ascn+0x4a>
		}
		else {
			np->link = pp->link;
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	9b 81       	ldd	r25, Y+3	; 0x03
     5c4:	93 83       	std	Z+3, r25	; 0x03
     5c6:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     5c8:	fb 83       	std	Y+3, r31	; 0x03
     5ca:	ea 83       	std	Y+2, r30	; 0x02
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	8d 91       	ld	r24, X+
     5d0:	9c 91       	ld	r25, X
     5d2:	13 97       	sbiw	r26, 0x03	; 3
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5d4:	00 97       	sbiw	r24, 0x00	; 0
     5d6:	41 f0       	breq	.+16     	; 0x5e8 <insert_node_ascn+0x66>
     5d8:	ed 01       	movw	r28, r26
												pp = cp, cp = cp->link)
     5da:	dc 01       	movw	r26, r24
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5dc:	8d 91       	ld	r24, X+
     5de:	9c 91       	ld	r25, X
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	86 17       	cp	r24, r22
     5e4:	97 07       	cpc	r25, r23
     5e6:	34 f3       	brlt	.-52     	; 0x5b4 <insert_node_ascn+0x32>
     5e8:	30 93 61 04 	sts	0x0461, r19
     5ec:	20 93 62 04 	sts	0x0462, r18
			np->link = pp->link;
			pp->link = np;
		}

	}
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <tour_list>:

void tour_list()
{
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     5fe:	8a e0       	ldi	r24, 0x0A	; 10
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 bc 10 	call	0x2178	; 0x2178 <putchar>
	for (cp = Head; cp != NULL; cp = cp->link)
     606:	c0 91 61 04 	lds	r28, 0x0461
     60a:	d0 91 62 04 	lds	r29, 0x0462
		printf("-->%c ", cp->data);
     60e:	0f e2       	ldi	r16, 0x2F	; 47
     610:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     612:	13 c0       	rjmp	.+38     	; 0x63a <tour_list+0x44>
		printf("-->%c ", cp->data);
     614:	00 d0       	rcall	.+0      	; 0x616 <tour_list+0x20>
     616:	0f 92       	push	r0
     618:	ed b7       	in	r30, 0x3d	; 61
     61a:	fe b7       	in	r31, 0x3e	; 62
     61c:	12 83       	std	Z+2, r17	; 0x02
     61e:	01 83       	std	Z+1, r16	; 0x01
     620:	88 81       	ld	r24, Y
     622:	99 81       	ldd	r25, Y+1	; 0x01
     624:	94 83       	std	Z+4, r25	; 0x04
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     62c:	0a 80       	ldd	r0, Y+2	; 0x02
     62e:	db 81       	ldd	r29, Y+3	; 0x03
     630:	c0 2d       	mov	r28, r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	20 97       	sbiw	r28, 0x00	; 0
     63c:	59 f7       	brne	.-42     	; 0x614 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 bc 10 	call	0x2178	; 0x2178 <putchar>
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <free_list>:

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     650:	09 c0       	rjmp	.+18     	; 0x664 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     652:	fc 01       	movw	r30, r24
     654:	22 81       	ldd	r18, Z+2	; 0x02
     656:	33 81       	ldd	r19, Z+3	; 0x03
     658:	30 93 62 04 	sts	0x0462, r19
     65c:	20 93 61 04 	sts	0x0461, r18
	return cp;
}

void free_node(struct node *np)
{
	free(np);
     660:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <free>

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     664:	80 91 61 04 	lds	r24, 0x0461
     668:	90 91 62 04 	lds	r25, 0x0462
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	89 f7       	brne	.-30     	; 0x652 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     670:	08 95       	ret

00000672 <task_init>:
#include "adc.h"
#include "spi.h"

void task_init()
{
	Task_f = Task_r = 0;
     672:	10 92 6e 04 	sts	0x046E, r1
     676:	10 92 6d 04 	sts	0x046D, r1
     67a:	10 92 10 05 	sts	0x0510, r1
     67e:	10 92 0f 05 	sts	0x050F, r1
}
     682:	08 95       	ret

00000684 <task_insert>:

int task_insert(struct task *tskp)
{
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	48 2f       	mov	r20, r24
     68a:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
     68c:	80 91 6d 04 	lds	r24, 0x046D
     690:	90 91 6e 04 	lds	r25, 0x046E
     694:	c0 91 0f 05 	lds	r28, 0x050F
     698:	d0 91 10 05 	lds	r29, 0x0510
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	20 e1       	ldi	r18, 0x10	; 16
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	b9 01       	movw	r22, r18
     6a4:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     6a8:	8c 17       	cp	r24, r28
     6aa:	9d 07       	cpc	r25, r29
     6ac:	31 f1       	breq	.+76     	; 0x6fa <task_insert+0x76>
		return 0;
	Task_r = (Task_f + 1) % MAX_TASK;
     6ae:	80 91 0f 05 	lds	r24, 0x050F
     6b2:	90 91 10 05 	lds	r25, 0x0510
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	b9 01       	movw	r22, r18
     6ba:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     6be:	90 93 6e 04 	sts	0x046E, r25
     6c2:	80 93 6d 04 	sts	0x046D, r24
	Task_q[Task_r] = *tskp;
     6c6:	80 91 6d 04 	lds	r24, 0x046D
     6ca:	90 91 6e 04 	lds	r25, 0x046E
     6ce:	dc 01       	movw	r26, r24
     6d0:	aa 0f       	add	r26, r26
     6d2:	bb 1f       	adc	r27, r27
     6d4:	63 e0       	ldi	r22, 0x03	; 3
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	6a 95       	dec	r22
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <task_insert+0x52>
     6de:	a8 0f       	add	r26, r24
     6e0:	b9 1f       	adc	r27, r25
     6e2:	a1 59       	subi	r26, 0x91	; 145
     6e4:	bb 4f       	sbci	r27, 0xFB	; 251
     6e6:	c4 2f       	mov	r28, r20
     6e8:	de 2f       	mov	r29, r30
     6ea:	8a e0       	ldi	r24, 0x0A	; 10
     6ec:	09 90       	ld	r0, Y+
     6ee:	0d 92       	st	X+, r0
     6f0:	81 50       	subi	r24, 0x01	; 1
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <task_insert+0x68>
	return 1;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
		return 0;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_f + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return 1;
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <task_delete>:
int task_delete(struct task *tskp)
{
     704:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)	// Empty
     706:	40 91 6d 04 	lds	r20, 0x046D
     70a:	50 91 6e 04 	lds	r21, 0x046E
     70e:	80 91 0f 05 	lds	r24, 0x050F
     712:	90 91 10 05 	lds	r25, 0x0510
     716:	48 17       	cp	r20, r24
     718:	59 07       	cpc	r21, r25
     71a:	31 f1       	breq	.+76     	; 0x768 <task_delete+0x64>
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
     71c:	80 91 0f 05 	lds	r24, 0x050F
     720:	90 91 10 05 	lds	r25, 0x0510
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	60 e1       	ldi	r22, 0x10	; 16
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     72e:	90 93 10 05 	sts	0x0510, r25
     732:	80 93 0f 05 	sts	0x050F, r24
	*tskp = Task_q[Task_f];
     736:	80 91 0f 05 	lds	r24, 0x050F
     73a:	90 91 10 05 	lds	r25, 0x0510
     73e:	fc 01       	movw	r30, r24
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	a3 e0       	ldi	r26, 0x03	; 3
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	aa 95       	dec	r26
     74c:	e1 f7       	brne	.-8      	; 0x746 <task_delete+0x42>
     74e:	e8 0f       	add	r30, r24
     750:	f9 1f       	adc	r31, r25
     752:	d9 01       	movw	r26, r18
     754:	e1 59       	subi	r30, 0x91	; 145
     756:	fb 4f       	sbci	r31, 0xFB	; 251
     758:	8a e0       	ldi	r24, 0x0A	; 10
     75a:	01 90       	ld	r0, Z+
     75c:	0d 92       	st	X+, r0
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	e1 f7       	brne	.-8      	; 0x75a <task_delete+0x56>
	return 1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	08 95       	ret
	return 1;
}
int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)	// Empty
		return 0;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
     76c:	08 95       	ret

0000076e <task_tc1047>:
// Analog temperature data
void task_tc1047(char *arg)
{
	static int value;
	static int volatile in_adc = 0;
	if (!strcmp(arg, "")) {		// called from task_cmd or timer task
     76e:	fc 01       	movw	r30, r24
     770:	20 81       	ld	r18, Z
     772:	22 23       	and	r18, r18
     774:	19 f5       	brne	.+70     	; 0x7bc <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     776:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	90 93 64 04 	sts	0x0464, r25
     782:	80 93 63 04 	sts	0x0463, r24
     786:	80 91 63 04 	lds	r24, 0x0463
     78a:	90 91 64 04 	lds	r25, 0x0464
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	d1 f7       	brne	.-12     	; 0x786 <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n", value);
     792:	00 d0       	rcall	.+0      	; 0x794 <task_tc1047+0x26>
     794:	0f 92       	push	r0
     796:	89 e3       	ldi	r24, 0x39	; 57
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	ed b7       	in	r30, 0x3d	; 61
     79c:	fe b7       	in	r31, 0x3e	; 62
     79e:	92 83       	std	Z+2, r25	; 0x02
     7a0:	81 83       	std	Z+1, r24	; 0x01
     7a2:	80 91 65 04 	lds	r24, 0x0465
     7a6:	90 91 66 04 	lds	r25, 0x0466
     7aa:	94 83       	std	Z+4, r25	; 0x04
     7ac:	83 83       	std	Z+3, r24	; 0x03
     7ae:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	08 95       	ret
	}
	else {		// called from ISR()
		value = atoi(arg) * (1.1/1023) * 1000;	// get input voltage(mv)
     7bc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <atoi>
     7c0:	9c 01       	movw	r18, r24
     7c2:	b9 01       	movw	r22, r18
     7c4:	88 27       	eor	r24, r24
     7c6:	77 fd       	sbrc	r23, 7
     7c8:	80 95       	com	r24
     7ca:	98 2f       	mov	r25, r24
     7cc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatsisf>
     7d0:	29 e0       	ldi	r18, 0x09	; 9
     7d2:	30 ef       	ldi	r19, 0xF0	; 240
     7d4:	4c e8       	ldi	r20, 0x8C	; 140
     7d6:	5a e3       	ldi	r21, 0x3A	; 58
     7d8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	4a e7       	ldi	r20, 0x7A	; 122
     7e2:	54 e4       	ldi	r21, 0x44	; 68
     7e4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     7e8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fixsfsi>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;				// get degree from input voltage
     7f0:	84 5f       	subi	r24, 0xF4	; 244
     7f2:	91 40       	sbci	r25, 0x01	; 1
     7f4:	6a e0       	ldi	r22, 0x0A	; 10
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     7fc:	70 93 66 04 	sts	0x0466, r23
     800:	60 93 65 04 	sts	0x0465, r22
		in_adc = 0;
     804:	10 92 64 04 	sts	0x0464, r1
     808:	10 92 63 04 	sts	0x0463, r1
     80c:	08 95       	ret

0000080e <task_tc77>:
void task_tc77(char *arg)
{
	static uint8_t state;
	static uint8_t value;

	if (!strcmp(arg, "")) {
     80e:	dc 01       	movw	r26, r24
     810:	2c 91       	ld	r18, X
     812:	22 23       	and	r18, r18
     814:	a9 f4       	brne	.+42     	; 0x840 <task_tc77+0x32>
		state = TC77_WAIT_HI;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 67 04 	sts	0x0467, r24
		spi_select();
     81c:	0e 94 ff 07 	call	0xffe	; 0xffe <spi_select>
		spi_write(0x00);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_write>
		printf("interrupt flag");
     826:	0f 92       	push	r0
     828:	0f 92       	push	r0
     82a:	8c e5       	ldi	r24, 0x5C	; 92
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	ed b7       	in	r30, 0x3d	; 61
     830:	fe b7       	in	r31, 0x3e	; 62
     832:	92 83       	std	Z+2, r25	; 0x02
     834:	81 83       	std	Z+1, r24	; 0x01
     836:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	08 95       	ret
	}
	else {
		switch(state) {
     840:	20 91 67 04 	lds	r18, 0x0467
     844:	21 30       	cpi	r18, 0x01	; 1
     846:	19 f0       	breq	.+6      	; 0x84e <task_tc77+0x40>
     848:	22 30       	cpi	r18, 0x02	; 2
     84a:	d9 f5       	brne	.+118    	; 0x8c2 <task_tc77+0xb4>
     84c:	09 c0       	rjmp	.+18     	; 0x860 <task_tc77+0x52>
			case TC77_WAIT_HI :
				value = atoi(arg) << 8;	state = TC77_WAIT_LO; spi_write(0x00);
     84e:	10 92 68 04 	sts	0x0468, r1
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	80 93 67 04 	sts	0x0467, r24
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 03 08 	call	0x1006	; 0x1006 <spi_write>
				break;
     85e:	08 95       	ret
			case TC77_WAIT_LO :
				value |= atoi(arg);	value = (value >> 3) * 0.0625;
     860:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <atoi>
     864:	60 91 68 04 	lds	r22, 0x0468
     868:	68 2b       	or	r22, r24
     86a:	66 95       	lsr	r22
     86c:	66 95       	lsr	r22
     86e:	66 95       	lsr	r22
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__floatsisf>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e8       	ldi	r20, 0x80	; 128
     880:	5d e3       	ldi	r21, 0x3D	; 61
     882:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__mulsf3>
     886:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fixunssfsi>
     88a:	60 93 68 04 	sts	0x0468, r22
				spi_release();
     88e:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_release>
				printf("task_tc77() : current_temperature -> %d degree.\n", value);
     892:	00 d0       	rcall	.+0      	; 0x894 <task_tc77+0x86>
     894:	0f 92       	push	r0
     896:	ed b7       	in	r30, 0x3d	; 61
     898:	fe b7       	in	r31, 0x3e	; 62
     89a:	31 96       	adiw	r30, 0x01	; 1
     89c:	8b e6       	ldi	r24, 0x6B	; 107
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	ad b7       	in	r26, 0x3d	; 61
     8a2:	be b7       	in	r27, 0x3e	; 62
     8a4:	12 96       	adiw	r26, 0x02	; 2
     8a6:	9c 93       	st	X, r25
     8a8:	8e 93       	st	-X, r24
     8aa:	11 97       	sbiw	r26, 0x01	; 1
     8ac:	80 91 68 04 	lds	r24, 0x0468
     8b0:	82 83       	std	Z+2, r24	; 0x02
     8b2:	13 82       	std	Z+3, r1	; 0x03
     8b4:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
				break;
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	08 95       	ret
			default:
				spi_release();
     8c2:	0e 94 01 08 	call	0x1002	; 0x1002 <spi_release>
				printf("task_tc77() : unexpected state in task_tc77...\n");
     8c6:	8c e9       	ldi	r24, 0x9C	; 156
     8c8:	92 e0       	ldi	r25, 0x02	; 2
     8ca:	0e 94 c3 10 	call	0x2186	; 0x2186 <puts>
     8ce:	08 95       	ret

000008d0 <task_cmd>:
		}
	}
}

void task_cmd(char *arg)
{
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	ca 54       	subi	r28, 0x4A	; 74
     8ea:	d0 40       	sbci	r29, 0x00	; 0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if (!uart_peek()) return;
     8f6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <uart_peek>
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	09 f4       	brne	.+2      	; 0x900 <task_cmd+0x30>
     8fe:	94 c0       	rjmp	.+296    	; 0xa28 <task_cmd+0x158>

	if (gets(buf) == NULL) {
     900:	ce 01       	movw	r24, r28
     902:	0b 96       	adiw	r24, 0x0b	; 11
     904:	0e 94 84 10 	call	0x2108	; 0x2108 <gets>
     908:	00 97       	sbiw	r24, 0x00	; 0
     90a:	29 f4       	brne	.+10     	; 0x916 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     90c:	8b ec       	ldi	r24, 0xCB	; 203
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	0e 94 c3 10 	call	0x2186	; 0x2186 <puts>
     914:	ff cf       	rjmp	.-2      	; 0x914 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     916:	ce 01       	movw	r24, r28
     918:	0b 96       	adiw	r24, 0x0b	; 11
     91a:	60 ee       	ldi	r22, 0xE0	; 224
     91c:	72 e0       	ldi	r23, 0x02	; 2
     91e:	0e 94 0c 10 	call	0x2018	; 0x2018 <strtok>
     922:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	60 ee       	ldi	r22, 0xE0	; 224
     92a:	72 e0       	ldi	r23, 0x02	; 2
     92c:	0e 94 0c 10 	call	0x2018	; 0x2018 <strtok>
     930:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	60 ee       	ldi	r22, 0xE0	; 224
     938:	72 e0       	ldi	r23, 0x02	; 2
     93a:	0e 94 0c 10 	call	0x2018	; 0x2018 <strtok>
     93e:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	60 ee       	ldi	r22, 0xE0	; 224
     946:	72 e0       	ldi	r23, 0x02	; 2
     948:	0e 94 0c 10 	call	0x2018	; 0x2018 <strtok>
     94c:	6c 01       	movw	r12, r24

	if (cp0 == NULL) {
     94e:	01 15       	cp	r16, r1
     950:	11 05       	cpc	r17, r1
     952:	09 f4       	brne	.+2      	; 0x956 <task_cmd+0x86>
     954:	5d c0       	rjmp	.+186    	; 0xa10 <task_cmd+0x140>
		// printf("!!!-111\n");
		printf( "$ "); return;
	}

	if (!strcmp(cp0, "prime"))
     956:	c8 01       	movw	r24, r16
     958:	68 ee       	ldi	r22, 0xE8	; 232
     95a:	72 e0       	ldi	r23, 0x02	; 2
     95c:	0e 94 11 10 	call	0x2022	; 0x2022 <strcmp>
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	21 f4       	brne	.+8      	; 0x96c <task_cmd+0x9c>
		task_prime(cp1);
     964:	c7 01       	movw	r24, r14
     966:	0e 94 07 02 	call	0x40e	; 0x40e <task_prime>
     96a:	52 c0       	rjmp	.+164    	; 0xa10 <task_cmd+0x140>

	else if (!strcmp(cp0, "timer")) {
     96c:	c8 01       	movw	r24, r16
     96e:	6e ee       	ldi	r22, 0xEE	; 238
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	0e 94 11 10 	call	0x2022	; 0x2022 <strcmp>
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	79 f5       	brne	.+94     	; 0x9d8 <task_cmd+0x108>
		if (cp1 == NULL) {
     97a:	e1 14       	cp	r14, r1
     97c:	f1 04       	cpc	r15, r1
     97e:	19 f4       	brne	.+6      	; 0x986 <task_cmd+0xb6>
			printf("!!!-222\n");
     980:	84 ef       	ldi	r24, 0xF4	; 244
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	43 c0       	rjmp	.+134    	; 0xa0c <task_cmd+0x13c>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     986:	c7 01       	movw	r24, r14
     988:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <atoi>
     98c:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     98e:	c5 01       	movw	r24, r10
     990:	68 ee       	ldi	r22, 0xE8	; 232
     992:	72 e0       	ldi	r23, 0x02	; 2
     994:	0e 94 11 10 	call	0x2022	; 0x2022 <strcmp>
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	d9 f4       	brne	.+54     	; 0x9d2 <task_cmd+0x102>
			task.fun = task_prime;
     99c:	87 e0       	ldi	r24, 0x07	; 7
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	9a 83       	std	Y+2, r25	; 0x02
     9a2:	89 83       	std	Y+1, r24	; 0x01
			if(cp3) strcpy(task.arg, cp3);
     9a4:	ce 01       	movw	r24, r28
     9a6:	03 96       	adiw	r24, 0x03	; 3
     9a8:	c1 14       	cp	r12, r1
     9aa:	d1 04       	cpc	r13, r1
     9ac:	11 f0       	breq	.+4      	; 0x9b2 <task_cmd+0xe2>
     9ae:	b6 01       	movw	r22, r12
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <task_cmd+0xe6>
			else strcpy(task.arg, "");
     9b2:	6c ef       	ldi	r22, 0xFC	; 252
     9b4:	72 e0       	ldi	r23, 0x02	; 2
     9b6:	0e 94 1a 10 	call	0x2034	; 0x2034 <strcpy>
			cli();
     9ba:	f8 94       	cli
		if (cp1 == NULL) {
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     9bc:	c8 01       	movw	r24, r16
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3) strcpy(task.arg, cp3);
			else strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     9c6:	ce 01       	movw	r24, r28
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	0e 94 92 05 	call	0xb24	; 0xb24 <insert_timer>
			sei();
     9ce:	78 94       	sei
     9d0:	1f c0       	rjmp	.+62     	; 0xa10 <task_cmd+0x140>
		}
		else printf("!!!-333\n");
     9d2:	8d ef       	ldi	r24, 0xFD	; 253
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	1a c0       	rjmp	.+52     	; 0xa0c <task_cmd+0x13c>
	}

	else if (!strcmp(cp0, "tc1047"))
     9d8:	c8 01       	movw	r24, r16
     9da:	65 e0       	ldi	r22, 0x05	; 5
     9dc:	73 e0       	ldi	r23, 0x03	; 3
     9de:	0e 94 11 10 	call	0x2022	; 0x2022 <strcmp>
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <task_cmd+0x120>
		task_tc1047("");
     9e6:	8c ef       	ldi	r24, 0xFC	; 252
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	0e 94 b7 03 	call	0x76e	; 0x76e <task_tc1047>
     9ee:	10 c0       	rjmp	.+32     	; 0xa10 <task_cmd+0x140>

	else if (!strcmp(cp0, "tc77"))
     9f0:	c8 01       	movw	r24, r16
     9f2:	6c e0       	ldi	r22, 0x0C	; 12
     9f4:	73 e0       	ldi	r23, 0x03	; 3
     9f6:	0e 94 11 10 	call	0x2022	; 0x2022 <strcmp>
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	29 f4       	brne	.+10     	; 0xa08 <task_cmd+0x138>
		task_tc77("");
     9fe:	8c ef       	ldi	r24, 0xFC	; 252
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 07 04 	call	0x80e	; 0x80e <task_tc77>
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <task_cmd+0x140>

	else printf("Unknown command...\n");
     a08:	81 e1       	ldi	r24, 0x11	; 17
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	0e 94 c3 10 	call	0x2186	; 0x2186 <puts>

	printf("$ ");
     a10:	0f 92       	push	r0
     a12:	0f 92       	push	r0
     a14:	85 ee       	ldi	r24, 0xE5	; 229
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	ed b7       	in	r30, 0x3d	; 61
     a1a:	fe b7       	in	r31, 0x3e	; 62
     a1c:	92 83       	std	Z+2, r25	; 0x02
     a1e:	81 83       	std	Z+1, r24	; 0x01
     a20:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
}
     a28:	c6 5b       	subi	r28, 0xB6	; 182
     a2a:	df 4f       	sbci	r29, 0xFF	; 255
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	bf 90       	pop	r11
     a48:	af 90       	pop	r10
     a4a:	08 95       	ret

00000a4c <timer_init>:
#include "Timer_linked_list.h"
#include "Task_queue.h"

void timer_init()
{
	TCNT2 = 0;					// Timer/Counter Register of Timer 2
     a4c:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1 << AS2);			// Asynchronous Status Register(Asynchronous Timer/Counter 2
     a50:	e6 eb       	ldi	r30, 0xB6	; 182
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	80 62       	ori	r24, 0x20	; 32
     a58:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);		// Timer/Counter Interrupt Mask Register of timer 2
     a5a:	e0 e7       	ldi	r30, 0x70	; 112
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	80 83       	st	Z, r24
	// Timer/Counter Control Register B of timer 2
	TCCR2B |= (1 << CS20);	TCCR2B |= (1 << CS21);	// 32KHz/32 prescaling, clock 1KHz
     a64:	e1 eb       	ldi	r30, 0xB1	; 177
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	80 83       	st	Z, r24
     a6e:	80 81       	ld	r24, Z
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	80 83       	st	Z, r24
}
     a74:	08 95       	ret

00000a76 <timer_expire>:

void timer_expire()
{
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     a7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     a80:	90 93 6a 04 	sts	0x046A, r25
     a84:	80 93 69 04 	sts	0x0469, r24

		task_insert(&tp->task);
     a88:	ce 01       	movw	r24, r28
     a8a:	02 96       	adiw	r24, 0x02	; 2
     a8c:	0e 94 42 03 	call	0x684	; 0x684 <task_insert>

		free(tp);
     a90:	ce 01       	movw	r24, r28
     a92:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <free>

void timer_expire()
{
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     a96:	c0 91 69 04 	lds	r28, 0x0469
     a9a:	d0 91 6a 04 	lds	r29, 0x046A
     a9e:	20 97       	sbiw	r28, 0x00	; 0
     aa0:	21 f0       	breq	.+8      	; 0xaaa <timer_expire+0x34>
     aa2:	88 81       	ld	r24, Y
     aa4:	99 81       	ldd	r25, Y+1	; 0x01
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	49 f3       	breq	.-46     	; 0xa7c <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <__vector_15>:

////////////////////////////////
ISR(TIMER2_OVF_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	0b b6       	in	r0, 0x3b	; 59
     aba:	0f 92       	push	r0
     abc:	11 24       	eor	r1, r1
     abe:	2f 93       	push	r18
     ac0:	3f 93       	push	r19
     ac2:	4f 93       	push	r20
     ac4:	5f 93       	push	r21
     ac6:	6f 93       	push	r22
     ac8:	7f 93       	push	r23
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	af 93       	push	r26
     ad0:	bf 93       	push	r27
     ad2:	ef 93       	push	r30
     ad4:	ff 93       	push	r31
	if (!Thead)
     ad6:	e0 91 69 04 	lds	r30, 0x0469
     ada:	f0 91 6a 04 	lds	r31, 0x046A
     ade:	30 97       	sbiw	r30, 0x00	; 0
     ae0:	49 f0       	breq	.+18     	; 0xaf4 <__vector_15+0x44>
		return;
	if (--Thead->time == 0)
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	80 83       	st	Z, r24
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	11 f4       	brne	.+4      	; 0xaf4 <__vector_15+0x44>
		timer_expire();
     af0:	0e 94 3b 05 	call	0xa76	; 0xa76 <timer_expire>
}
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     b1a:	8e e0       	ldi	r24, 0x0E	; 14
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <malloc>
	return tp;
}
     b22:	08 95       	ret

00000b24 <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	f8 2e       	mov	r15, r24
     b32:	e9 2e       	mov	r14, r25
     b34:	8b 01       	movw	r16, r22
	int 		 total;
	struct timer *tp, *cp, *pp;	// timer, current, previous pointer

	tp = get_timer();
     b36:	0e 94 8d 05 	call	0xb1a	; 0xb1a <get_timer>
     b3a:	dc 01       	movw	r26, r24
	tp->task = *tskp;	// task pointer
     b3c:	fc 01       	movw	r30, r24
     b3e:	32 96       	adiw	r30, 0x02	; 2
     b40:	cf 2d       	mov	r28, r15
     b42:	de 2d       	mov	r29, r14
     b44:	8a e0       	ldi	r24, 0x0A	; 10
     b46:	09 90       	ld	r0, Y+
     b48:	01 92       	st	Z+, r0
     b4a:	81 50       	subi	r24, 0x01	; 1
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <insert_timer+0x22>
	tp->time = ms;
     b4e:	11 96       	adiw	r26, 0x01	; 1
     b50:	1c 93       	st	X, r17
     b52:	0e 93       	st	-X, r16

	if (Thead == NULL) {	// list empty
     b54:	c0 91 69 04 	lds	r28, 0x0469
     b58:	d0 91 6a 04 	lds	r29, 0x046A
     b5c:	20 97       	sbiw	r28, 0x00	; 0
     b5e:	29 f4       	brne	.+10     	; 0xb6a <insert_timer+0x46>
		Thead = tp, tp->link = NULL;
     b60:	b0 93 6a 04 	sts	0x046A, r27
     b64:	a0 93 69 04 	sts	0x0469, r26
     b68:	30 c0       	rjmp	.+96     	; 0xbca <insert_timer+0xa6>

	tp = get_timer();
	tp->task = *tskp;	// task pointer
	tp->time = ms;

	if (Thead == NULL) {	// list empty
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <insert_timer+0x52>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     b74:	ef 01       	movw	r28, r30
		total += cp->time;
     b76:	88 81       	ld	r24, Y
     b78:	99 81       	ldd	r25, Y+1	; 0x01
     b7a:	48 0f       	add	r20, r24
     b7c:	59 1f       	adc	r21, r25
		if (total >= ms)
     b7e:	40 17       	cp	r20, r16
     b80:	51 07       	cpc	r21, r17
     b82:	34 f4       	brge	.+12     	; 0xb90 <insert_timer+0x6c>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     b84:	ec 85       	ldd	r30, Y+12	; 0x0c
     b86:	fd 85       	ldd	r31, Y+13	; 0x0d
     b88:	9e 01       	movw	r18, r28
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	99 f7       	brne	.-26     	; 0xb74 <insert_timer+0x50>
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <insert_timer+0x6e>
		total += cp->time;
		if (total >= ms)
     b90:	fe 01       	movw	r30, r28
			break;
		pp = cp;
	}
	if (pp == NULL) {	// First insert
     b92:	21 15       	cp	r18, r1
     b94:	31 05       	cpc	r19, r1
     b96:	79 f4       	brne	.+30     	; 0xbb6 <insert_timer+0x92>
		cp->time -= tp->time;
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	80 1b       	sub	r24, r16
     b9e:	91 0b       	sbc	r25, r17
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
		tp->link = cp, Thead = tp;
     ba4:	1d 96       	adiw	r26, 0x0d	; 13
     ba6:	fc 93       	st	X, r31
     ba8:	ee 93       	st	-X, r30
     baa:	1c 97       	sbiw	r26, 0x0c	; 12
     bac:	b0 93 6a 04 	sts	0x046A, r27
     bb0:	a0 93 69 04 	sts	0x0469, r26
     bb4:	19 c0       	rjmp	.+50     	; 0xbe8 <insert_timer+0xc4>
	}
	else if (cp == NULL) {	// Last insert
     bb6:	30 97       	sbiw	r30, 0x00	; 0
     bb8:	69 f4       	brne	.+26     	; 0xbd4 <insert_timer+0xb0>
		tp->time -= total;	// pp->time
     bba:	04 1b       	sub	r16, r20
     bbc:	15 0b       	sbc	r17, r21
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	1c 93       	st	X, r17
     bc2:	0e 93       	st	-X, r16
		pp->link = tp;
     bc4:	e9 01       	movw	r28, r18
     bc6:	bd 87       	std	Y+13, r27	; 0x0d
     bc8:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = NULL;
     bca:	1d 96       	adiw	r26, 0x0d	; 13
     bcc:	1c 92       	st	X, r1
     bce:	1e 92       	st	-X, r1
     bd0:	1c 97       	sbiw	r26, 0x0c	; 12
     bd2:	0a c0       	rjmp	.+20     	; 0xbe8 <insert_timer+0xc4>
	}
	else {	// Middle insert
		total -= cp->time;	// just before
		tp->time -= tp->time;
     bd4:	11 96       	adiw	r26, 0x01	; 1
     bd6:	1c 92       	st	X, r1
     bd8:	1e 92       	st	-X, r1
		pp->link = tp;
     bda:	e9 01       	movw	r28, r18
     bdc:	bd 87       	std	Y+13, r27	; 0x0d
     bde:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = cp;
     be0:	1d 96       	adiw	r26, 0x0d	; 13
     be2:	fc 93       	st	X, r31
     be4:	ee 93       	st	-X, r30
     be6:	1c 97       	sbiw	r26, 0x0c	; 12
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	08 95       	ret

00000bf6 <tour_timer>:

void tour_timer()
{
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     c02:	8a e0       	ldi	r24, 0x0A	; 10
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 bc 10 	call	0x2178	; 0x2178 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     c0a:	c0 91 69 04 	lds	r28, 0x0469
     c0e:	d0 91 6a 04 	lds	r29, 0x046A
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     c12:	00 e0       	ldi	r16, 0x00	; 0
     c14:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     c16:	84 e2       	ldi	r24, 0x24	; 36
     c18:	e8 2e       	mov	r14, r24
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     c1e:	20 c0       	rjmp	.+64     	; 0xc60 <tour_timer+0x6a>
		total += cp->time;
     c20:	88 81       	ld	r24, Y
     c22:	99 81       	ldd	r25, Y+1	; 0x01
     c24:	08 0f       	add	r16, r24
     c26:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     c28:	00 d0       	rcall	.+0      	; 0xc2a <tour_timer+0x34>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <tour_timer+0x36>
     c2c:	ed b7       	in	r30, 0x3d	; 61
     c2e:	fe b7       	in	r31, 0x3e	; 62
     c30:	31 96       	adiw	r30, 0x01	; 1
     c32:	ad b7       	in	r26, 0x3d	; 61
     c34:	be b7       	in	r27, 0x3e	; 62
     c36:	12 96       	adiw	r26, 0x02	; 2
     c38:	fc 92       	st	X, r15
     c3a:	ee 92       	st	-X, r14
     c3c:	11 97       	sbiw	r26, 0x01	; 1
     c3e:	93 83       	std	Z+3, r25	; 0x03
     c40:	82 83       	std	Z+2, r24	; 0x02
     c42:	15 83       	std	Z+5, r17	; 0x05
     c44:	04 83       	std	Z+4, r16	; 0x04
     c46:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     c4a:	0c 84       	ldd	r0, Y+12	; 0x0c
     c4c:	dd 85       	ldd	r29, Y+13	; 0x0d
     c4e:	c0 2d       	mov	r28, r0
     c50:	8d b7       	in	r24, 0x3d	; 61
     c52:	9e b7       	in	r25, 0x3e	; 62
     c54:	06 96       	adiw	r24, 0x06	; 6
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	9e bf       	out	0x3e, r25	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	8d bf       	out	0x3d, r24	; 61
     c60:	20 97       	sbiw	r28, 0x00	; 0
     c62:	f1 f6       	brne	.-68     	; 0xc20 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     c64:	8a e0       	ldi	r24, 0x0A	; 10
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 bc 10 	call	0x2178	; 0x2178 <putchar>
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	08 95       	ret

00000c7a <free_timer>:

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     c7c:	fc 01       	movw	r30, r24
     c7e:	24 85       	ldd	r18, Z+12	; 0x0c
     c80:	35 85       	ldd	r19, Z+13	; 0x0d
     c82:	30 93 6a 04 	sts	0x046A, r19
     c86:	20 93 69 04 	sts	0x0469, r18
		free(cp);
     c8a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <free>

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     c8e:	80 91 69 04 	lds	r24, 0x0469
     c92:	90 91 6a 04 	lds	r25, 0x046A
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	89 f7       	brne	.-30     	; 0xc7c <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     c9a:	08 95       	ret

00000c9c <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     c9c:	f8 94       	cli
		ch = qi_delete();
     c9e:	0e 94 83 07 	call	0xf06	; 0xf06 <qi_delete>
		sei();
     ca2:	78 94       	sei
	} while (ch == 0);
     ca4:	88 23       	and	r24, r24
     ca6:	d1 f3       	breq	.-12     	; 0xc9c <uart_getchar>

	if (ch == E0T) return -1;
     ca8:	84 30       	cpi	r24, 0x04	; 4
     caa:	11 f0       	breq	.+4      	; 0xcb0 <uart_getchar+0x14>
	else 		   return ch;
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return ch;
}
     cb4:	08 95       	ret

00000cb6 <uart_putchar>:
	sbi(UCSR0B, RXEN0);				// RX enable
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
}

int uart_putchar(char ch, FILE *stream)
{
     cb6:	cf 93       	push	r28
     cb8:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     cba:	8a 30       	cpi	r24, 0x0A	; 10
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <uart_putchar+0xe>
     cbe:	8d e0       	ldi	r24, 0x0D	; 13
     cc0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <uart_putchar>
	cli();
     cc4:	f8 94       	cli
	if(!uart_busy) {
     cc6:	80 91 11 05 	lds	r24, 0x0511
     cca:	88 23       	and	r24, r24
     ccc:	59 f4       	brne	.+22     	; 0xce4 <uart_putchar+0x2e>
		UDR0 = ch;
     cce:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 11 05 	sts	0x0511, r24
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     cda:	78 94       	sei
     cdc:	86 ef       	ldi	r24, 0xF6	; 246
     cde:	8a 95       	dec	r24
     ce0:	f1 f7       	brne	.-4      	; 0xcde <uart_putchar+0x28>
			_delay_us(100);
			cli();
     ce2:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     ce4:	8c 2f       	mov	r24, r28
     ce6:	0e 94 a0 07 	call	0xf40	; 0xf40 <qo_insert>
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	b1 f3       	breq	.-20     	; 0xcda <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     cee:	78 94       	sei
	return 1;
}
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <uart_init>:
char uart_busy;
static int echo_mode = 1;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     cf8:	80 e3       	ldi	r24, 0x30	; 48
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	90 93 9f 05 	sts	0x059F, r25
     d00:	80 93 9e 05 	sts	0x059E, r24
     d04:	8e e3       	ldi	r24, 0x3E	; 62
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	90 93 a1 05 	sts	0x05A1, r25
     d0c:	80 93 a0 05 	sts	0x05A0, r24
	q_init();
     d10:	0e 94 50 07 	call	0xea0	; 0xea0 <q_init>
	uart_busy = 0;
     d14:	10 92 11 05 	sts	0x0511, r1

	UBRR0H = 0x00; UBRR0L = 0x03;	// 115.2Kbps
     d18:	10 92 c5 00 	sts	0x00C5, r1
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0B, TXEN0);				// TX enable
     d22:	e1 ec       	ldi	r30, 0xC1	; 193
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);			// TX complete interrupt
     d2c:	80 81       	ld	r24, Z
     d2e:	80 64       	ori	r24, 0x40	; 64
     d30:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);				// RX enable
     d32:	80 81       	ld	r24, Z
     d34:	80 61       	ori	r24, 0x10	; 16
     d36:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
     d38:	80 81       	ld	r24, Z
     d3a:	80 68       	ori	r24, 0x80	; 128
     d3c:	80 83       	st	Z, r24
}
     d3e:	08 95       	ret

00000d40 <uart_echo>:
	if (ch == E0T) return -1;
	else 		   return ch;
}

void uart_echo(char ch)
{
     d40:	cf 93       	push	r28
     d42:	c8 2f       	mov	r28, r24
	if (ch == '\n')	uart_echo( '\r' );
     d44:	8a 30       	cpi	r24, 0x0A	; 10
     d46:	19 f4       	brne	.+6      	; 0xd4e <uart_echo+0xe>
     d48:	8d e0       	ldi	r24, 0x0D	; 13
     d4a:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_echo>
	if (!uart_busy) {
     d4e:	80 91 11 05 	lds	r24, 0x0511
     d52:	88 23       	and	r24, r24
     d54:	31 f4       	brne	.+12     	; 0xd62 <uart_echo+0x22>
		UDR0 = ch;
     d56:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 11 05 	sts	0x0511, r24
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     d62:	8c 2f       	mov	r24, r28
     d64:	0e 94 a0 07 	call	0xf40	; 0xf40 <qo_insert>

}
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <uart_peek>:

int uart_peek()
{
	return qi_peek();
     d6c:	0e 94 df 07 	call	0xfbe	; 0xfbe <qi_peek>
}
     d70:	08 95       	ret

00000d72 <__vector_27>:

////////////////////////////////////////////
ISR(USART0_TX_vect)
{
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	0b b6       	in	r0, 0x3b	; 59
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
	char ch;

	if ((ch = qo_delete()) == 0)
     d98:	0e 94 c2 07 	call	0xf84	; 0xf84 <qo_delete>
     d9c:	88 23       	and	r24, r24
     d9e:	19 f4       	brne	.+6      	; 0xda6 <__vector_27+0x34>
		uart_busy = 0;
     da0:	10 92 11 05 	sts	0x0511, r1
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <__vector_27+0x38>
	else
		UDR0 = ch;
     da6:	80 93 c6 00 	sts	0x00C6, r24
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	0f 90       	pop	r0
     dc4:	0b be       	out	0x3b, r0	; 59
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	0f 90       	pop	r0
     dcc:	1f 90       	pop	r1
     dce:	18 95       	reti

00000dd0 <__vector_25>:

ISR(USART0_RX_vect)
{
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	1f 93       	push	r17
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2a 97       	sbiw	r28, 0x0a	; 10
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     e06:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
     e0a:	1b 31       	cpi	r17, 0x1B	; 27
     e0c:	61 f4       	brne	.+24     	; 0xe26 <__vector_25+0x56>
		echo_mode = ((echo_mode+1) & 0x01);
     e0e:	80 91 4c 03 	lds	r24, 0x034C
     e12:	90 91 4d 03 	lds	r25, 0x034D
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	81 70       	andi	r24, 0x01	; 1
     e1a:	90 70       	andi	r25, 0x00	; 0
     e1c:	90 93 4d 03 	sts	0x034D, r25
     e20:	80 93 4c 03 	sts	0x034C, r24
		return;
     e24:	24 c0       	rjmp	.+72     	; 0xe6e <__vector_25+0x9e>
	}
	if (ch != EOT) {
     e26:	14 30       	cpi	r17, 0x04	; 4
     e28:	69 f0       	breq	.+26     	; 0xe44 <__vector_25+0x74>
		if (ch == '\r') ch = '\n';
     e2a:	1d 30       	cpi	r17, 0x0D	; 13
     e2c:	09 f4       	brne	.+2      	; 0xe30 <__vector_25+0x60>
     e2e:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode) uart_echo(ch);
     e30:	20 91 4c 03 	lds	r18, 0x034C
     e34:	30 91 4d 03 	lds	r19, 0x034D
     e38:	21 15       	cp	r18, r1
     e3a:	31 05       	cpc	r19, r1
     e3c:	19 f0       	breq	.+6      	; 0xe44 <__vector_25+0x74>
     e3e:	81 2f       	mov	r24, r17
     e40:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_echo>
	}
	qi_insert(ch);
     e44:	81 2f       	mov	r24, r17
     e46:	0e 94 61 07 	call	0xec2	; 0xec2 <qi_insert>
	if (ch == EOT || ch == '\n') {
     e4a:	14 30       	cpi	r17, 0x04	; 4
     e4c:	11 f0       	breq	.+4      	; 0xe52 <__vector_25+0x82>
     e4e:	1a 30       	cpi	r17, 0x0A	; 10
     e50:	71 f4       	brne	.+28     	; 0xe6e <__vector_25+0x9e>
		task.fun = task_cmd;
     e52:	88 e6       	ldi	r24, 0x68	; 104
     e54:	94 e0       	ldi	r25, 0x04	; 4
     e56:	9a 83       	std	Y+2, r25	; 0x02
     e58:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     e5a:	ce 01       	movw	r24, r28
     e5c:	03 96       	adiw	r24, 0x03	; 3
     e5e:	6f e2       	ldi	r22, 0x2F	; 47
     e60:	73 e0       	ldi	r23, 0x03	; 3
     e62:	0e 94 1a 10 	call	0x2034	; 0x2034 <strcpy>
		task_insert(&task);
     e66:	ce 01       	movw	r24, r28
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	0e 94 42 03 	call	0x684	; 0x684 <task_insert>
	}
}
     e6e:	2a 96       	adiw	r28, 0x0a	; 10
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	1f 91       	pop	r17
     e92:	0f 90       	pop	r0
     e94:	0b be       	out	0x3b, r0	; 59
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     ea0:	10 92 57 05 	sts	0x0557, r1
     ea4:	10 92 56 05 	sts	0x0556, r1
     ea8:	10 92 55 05 	sts	0x0555, r1
     eac:	10 92 54 05 	sts	0x0554, r1
     eb0:	10 92 59 05 	sts	0x0559, r1
     eb4:	10 92 58 05 	sts	0x0558, r1
     eb8:	10 92 13 05 	sts	0x0513, r1
     ebc:	10 92 12 05 	sts	0x0512, r1
}
     ec0:	08 95       	ret

00000ec2 <qi_insert>:

int qi_insert(char ch)
{
     ec2:	48 2f       	mov	r20, r24
	if ((ri + 1) % QI_SIZE == fi)
     ec4:	20 91 58 05 	lds	r18, 0x0558
     ec8:	30 91 59 05 	lds	r19, 0x0559
     ecc:	2f 5f       	subi	r18, 0xFF	; 255
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	c9 01       	movw	r24, r18
     ed2:	60 e4       	ldi	r22, 0x40	; 64
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     eda:	9c 01       	movw	r18, r24
     edc:	80 91 12 05 	lds	r24, 0x0512
     ee0:	90 91 13 05 	lds	r25, 0x0513
     ee4:	28 17       	cp	r18, r24
     ee6:	39 07       	cpc	r19, r25
     ee8:	59 f0       	breq	.+22     	; 0xf00 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     eea:	30 93 59 05 	sts	0x0559, r19
     eee:	20 93 58 05 	sts	0x0558, r18
	qi[ri] = ch;
     ef2:	26 5a       	subi	r18, 0xA6	; 166
     ef4:	3a 4f       	sbci	r19, 0xFA	; 250
     ef6:	f9 01       	movw	r30, r18
     ef8:	40 83       	st	Z, r20
	return 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri + 1) % QI_SIZE == fi)
		return 0;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     f04:	08 95       	ret

00000f06 <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     f06:	80 91 12 05 	lds	r24, 0x0512
     f0a:	90 91 13 05 	lds	r25, 0x0513
     f0e:	20 91 58 05 	lds	r18, 0x0558
     f12:	30 91 59 05 	lds	r19, 0x0559
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	79 f0       	breq	.+30     	; 0xf3a <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	60 e4       	ldi	r22, 0x40	; 64
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     f26:	90 93 13 05 	sts	0x0513, r25
     f2a:	80 93 12 05 	sts	0x0512, r24
	return qi[fi];
     f2e:	86 5a       	subi	r24, 0xA6	; 166
     f30:	9a 4f       	sbci	r25, 0xFA	; 250
     f32:	fc 01       	movw	r30, r24
     f34:	80 81       	ld	r24, Z
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     f3e:	08 95       	ret

00000f40 <qo_insert>:

int qo_insert(char ch)
{
     f40:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     f42:	20 91 56 05 	lds	r18, 0x0556
     f46:	30 91 57 05 	lds	r19, 0x0557
     f4a:	2f 5f       	subi	r18, 0xFF	; 255
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	c9 01       	movw	r24, r18
     f50:	60 e4       	ldi	r22, 0x40	; 64
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     f58:	9c 01       	movw	r18, r24
     f5a:	80 91 54 05 	lds	r24, 0x0554
     f5e:	90 91 55 05 	lds	r25, 0x0555
     f62:	28 17       	cp	r18, r24
     f64:	39 07       	cpc	r19, r25
     f66:	59 f0       	breq	.+22     	; 0xf7e <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     f68:	30 93 57 05 	sts	0x0557, r19
     f6c:	20 93 56 05 	sts	0x0556, r18
	qo[ro] = ch;
     f70:	2c 5e       	subi	r18, 0xEC	; 236
     f72:	3a 4f       	sbci	r19, 0xFA	; 250
     f74:	f9 01       	movw	r30, r18
     f76:	40 83       	st	Z, r20
	return 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     f82:	08 95       	ret

00000f84 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     f84:	80 91 54 05 	lds	r24, 0x0554
     f88:	90 91 55 05 	lds	r25, 0x0555
     f8c:	20 91 56 05 	lds	r18, 0x0556
     f90:	30 91 57 05 	lds	r19, 0x0557
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	79 f0       	breq	.+30     	; 0xfb8 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	60 e4       	ldi	r22, 0x40	; 64
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__divmodhi4>
     fa4:	90 93 55 05 	sts	0x0555, r25
     fa8:	80 93 54 05 	sts	0x0554, r24
	return qo[fo];
     fac:	8c 5e       	subi	r24, 0xEC	; 236
     fae:	9a 4f       	sbci	r25, 0xFA	; 250
     fb0:	fc 01       	movw	r30, r24
     fb2:	80 81       	ld	r24, Z
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     fbc:	08 95       	ret

00000fbe <qi_peek>:

int qi_peek()
{
	if (fi == ri)
     fbe:	80 91 12 05 	lds	r24, 0x0512
     fc2:	90 91 13 05 	lds	r25, 0x0513
     fc6:	20 91 58 05 	lds	r18, 0x0558
     fca:	30 91 59 05 	lds	r19, 0x0559
     fce:	82 17       	cp	r24, r18
     fd0:	93 07       	cpc	r25, r19
     fd2:	41 f0       	breq	.+16     	; 0xfe4 <qi_peek+0x26>
		return 0;
	else
		return(qi[fi + 1] % QI_SIZE);
     fd4:	86 5a       	subi	r24, 0xA6	; 166
     fd6:	9a 4f       	sbci	r25, 0xFA	; 250
     fd8:	fc 01       	movw	r30, r24
     fda:	81 81       	ldd	r24, Z+1	; 0x01
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	8f 73       	andi	r24, 0x3F	; 63
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[fi + 1] % QI_SIZE);
}
     fe8:	08 95       	ret

00000fea <spi_init>:


void spi_init()
{
	// PORTB
	sbi(DDRB, 0);	// output, nSS,nCS pin
     fea:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB, 1);	// output  SCK pin
     fec:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB, 2); 	// output  MOSI
     fee:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB, 3);	// input   MISO
     ff0:	23 98       	cbi	0x04, 3	; 4

	sbi(SPSR, SPI2X);	// double speed
     ff2:	8d b5       	in	r24, 0x2d	; 45
     ff4:	81 60       	ori	r24, 0x01	; 1
     ff6:	8d bd       	out	0x2d, r24	; 45

	SPCR = ((1 << MSTR) | (1 << SPE) | (1 << SPIE));	// MASTER, MSB first, Fosc/4
     ff8:	80 ed       	ldi	r24, 0xD0	; 208
     ffa:	8c bd       	out	0x2c, r24	; 44
}
     ffc:	08 95       	ret

00000ffe <spi_select>:

void spi_select()
{
	cbi(PORTB, 0);	// cbi(PORTB, nSS)
     ffe:	28 98       	cbi	0x05, 0	; 5
}
    1000:	08 95       	ret

00001002 <spi_release>:

void spi_release()
{
	sbi(PORTB, 0);	// sbi(PORTB, nSS)
    1002:	28 9a       	sbi	0x05, 0	; 5
}
    1004:	08 95       	ret

00001006 <spi_write>:

void spi_write(uint8_t data)
{
	SPDR = data;
    1006:	8e bd       	out	0x2e, r24	; 46
}
    1008:	08 95       	ret

0000100a <__vector_24>:


////////////////////////////////////
ISR(SPI_STC_vect)
{
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	0b b6       	in	r0, 0x3b	; 59
    1014:	0f 92       	push	r0
    1016:	11 24       	eor	r1, r1
    1018:	2f 93       	push	r18
    101a:	3f 93       	push	r19
    101c:	4f 93       	push	r20
    101e:	5f 93       	push	r21
    1020:	6f 93       	push	r22
    1022:	7f 93       	push	r23
    1024:	8f 93       	push	r24
    1026:	9f 93       	push	r25
    1028:	af 93       	push	r26
    102a:	bf 93       	push	r27
    102c:	ef 93       	push	r30
    102e:	ff 93       	push	r31
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	2a 97       	sbiw	r28, 0x0a	; 10
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	uint8_t		data;

	data = SPDR;
    103e:	2e b5       	in	r18, 0x2e	; 46
	task.fun = task_tc77;
    1040:	87 e0       	ldi	r24, 0x07	; 7
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg, "%d", data);
    1048:	00 d0       	rcall	.+0      	; 0x104a <__vector_24+0x40>
    104a:	00 d0       	rcall	.+0      	; 0x104c <__vector_24+0x42>
    104c:	ed b7       	in	r30, 0x3d	; 61
    104e:	fe b7       	in	r31, 0x3e	; 62
    1050:	31 96       	adiw	r30, 0x01	; 1
    1052:	ce 01       	movw	r24, r28
    1054:	03 96       	adiw	r24, 0x03	; 3
    1056:	ad b7       	in	r26, 0x3d	; 61
    1058:	be b7       	in	r27, 0x3e	; 62
    105a:	12 96       	adiw	r26, 0x02	; 2
    105c:	9c 93       	st	X, r25
    105e:	8e 93       	st	-X, r24
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	8e e4       	ldi	r24, 0x4E	; 78
    1064:	93 e0       	ldi	r25, 0x03	; 3
    1066:	93 83       	std	Z+3, r25	; 0x03
    1068:	82 83       	std	Z+2, r24	; 0x02
    106a:	24 83       	std	Z+4, r18	; 0x04
    106c:	15 82       	std	Z+5, r1	; 0x05
    106e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <sprintf>
	task_insert(&task);
    1072:	8d b7       	in	r24, 0x3d	; 61
    1074:	9e b7       	in	r25, 0x3e	; 62
    1076:	06 96       	adiw	r24, 0x06	; 6
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	9e bf       	out	0x3e, r25	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	8d bf       	out	0x3d, r24	; 61
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	0e 94 42 03 	call	0x684	; 0x684 <task_insert>
}
    108a:	2a 96       	adiw	r28, 0x0a	; 10
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0b be       	out	0x3b, r0	; 59
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <__fixunssfsi>:
    10ba:	cf 92       	push	r12
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	6b 01       	movw	r12, r22
    10c8:	7c 01       	movw	r14, r24
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	5f e4       	ldi	r21, 0x4F	; 79
    10d2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__gesf2>
    10d6:	87 fd       	sbrc	r24, 7
    10d8:	11 c0       	rjmp	.+34     	; 0x10fc <__fixunssfsi+0x42>
    10da:	c7 01       	movw	r24, r14
    10dc:	b6 01       	movw	r22, r12
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	5f e4       	ldi	r21, 0x4F	; 79
    10e6:	0e 94 12 0a 	call	0x1424	; 0x1424 <__subsf3>
    10ea:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fixsfsi>
    10ee:	8b 01       	movw	r16, r22
    10f0:	9c 01       	movw	r18, r24
    10f2:	00 50       	subi	r16, 0x00	; 0
    10f4:	10 40       	sbci	r17, 0x00	; 0
    10f6:	20 40       	sbci	r18, 0x00	; 0
    10f8:	30 48       	sbci	r19, 0x80	; 128
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__fixunssfsi+0x4e>
    10fc:	c7 01       	movw	r24, r14
    10fe:	b6 01       	movw	r22, r12
    1100:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fixsfsi>
    1104:	8b 01       	movw	r16, r22
    1106:	9c 01       	movw	r18, r24
    1108:	b8 01       	movw	r22, r16
    110a:	c9 01       	movw	r24, r18
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	ef 90       	pop	r14
    1114:	df 90       	pop	r13
    1116:	cf 90       	pop	r12
    1118:	08 95       	ret

0000111a <_fpadd_parts>:
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e3 e9       	ldi	r30, 0x93	; 147
    1120:	f8 e0       	ldi	r31, 0x08	; 8
    1122:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__prologue_saves__+0x4>
    1126:	ec 01       	movw	r28, r24
    1128:	4b 01       	movw	r8, r22
    112a:	fa 01       	movw	r30, r20
    112c:	88 81       	ld	r24, Y
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	08 f4       	brcc	.+2      	; 0x1134 <_fpadd_parts+0x1a>
    1132:	3e c1       	rjmp	.+636    	; 0x13b0 <_fpadd_parts+0x296>
    1134:	db 01       	movw	r26, r22
    1136:	9c 91       	ld	r25, X
    1138:	92 30       	cpi	r25, 0x02	; 2
    113a:	08 f4       	brcc	.+2      	; 0x113e <_fpadd_parts+0x24>
    113c:	36 c1       	rjmp	.+620    	; 0x13aa <_fpadd_parts+0x290>
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	59 f4       	brne	.+22     	; 0x1158 <_fpadd_parts+0x3e>
    1142:	94 30       	cpi	r25, 0x04	; 4
    1144:	09 f0       	breq	.+2      	; 0x1148 <_fpadd_parts+0x2e>
    1146:	34 c1       	rjmp	.+616    	; 0x13b0 <_fpadd_parts+0x296>
    1148:	99 81       	ldd	r25, Y+1	; 0x01
    114a:	11 96       	adiw	r26, 0x01	; 1
    114c:	8c 91       	ld	r24, X
    114e:	11 97       	sbiw	r26, 0x01	; 1
    1150:	98 17       	cp	r25, r24
    1152:	09 f0       	breq	.+2      	; 0x1156 <_fpadd_parts+0x3c>
    1154:	27 c1       	rjmp	.+590    	; 0x13a4 <_fpadd_parts+0x28a>
    1156:	2c c1       	rjmp	.+600    	; 0x13b0 <_fpadd_parts+0x296>
    1158:	94 30       	cpi	r25, 0x04	; 4
    115a:	09 f4       	brne	.+2      	; 0x115e <_fpadd_parts+0x44>
    115c:	26 c1       	rjmp	.+588    	; 0x13aa <_fpadd_parts+0x290>
    115e:	92 30       	cpi	r25, 0x02	; 2
    1160:	a9 f4       	brne	.+42     	; 0x118c <_fpadd_parts+0x72>
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	09 f0       	breq	.+2      	; 0x1168 <_fpadd_parts+0x4e>
    1166:	24 c1       	rjmp	.+584    	; 0x13b0 <_fpadd_parts+0x296>
    1168:	ce 01       	movw	r24, r28
    116a:	28 e0       	ldi	r18, 0x08	; 8
    116c:	dc 01       	movw	r26, r24
    116e:	0d 90       	ld	r0, X+
    1170:	cd 01       	movw	r24, r26
    1172:	da 01       	movw	r26, r20
    1174:	0d 92       	st	X+, r0
    1176:	ad 01       	movw	r20, r26
    1178:	21 50       	subi	r18, 0x01	; 1
    117a:	c1 f7       	brne	.-16     	; 0x116c <_fpadd_parts+0x52>
    117c:	d4 01       	movw	r26, r8
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	8c 91       	ld	r24, X
    1182:	11 97       	sbiw	r26, 0x01	; 1
    1184:	99 81       	ldd	r25, Y+1	; 0x01
    1186:	89 23       	and	r24, r25
    1188:	81 83       	std	Z+1, r24	; 0x01
    118a:	11 c1       	rjmp	.+546    	; 0x13ae <_fpadd_parts+0x294>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	09 f4       	brne	.+2      	; 0x1192 <_fpadd_parts+0x78>
    1190:	0c c1       	rjmp	.+536    	; 0x13aa <_fpadd_parts+0x290>
    1192:	aa 80       	ldd	r10, Y+2	; 0x02
    1194:	bb 80       	ldd	r11, Y+3	; 0x03
    1196:	db 01       	movw	r26, r22
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	4d 91       	ld	r20, X+
    119c:	5c 91       	ld	r21, X
    119e:	13 97       	sbiw	r26, 0x03	; 3
    11a0:	cc 80       	ldd	r12, Y+4	; 0x04
    11a2:	dd 80       	ldd	r13, Y+5	; 0x05
    11a4:	ee 80       	ldd	r14, Y+6	; 0x06
    11a6:	ff 80       	ldd	r15, Y+7	; 0x07
    11a8:	14 96       	adiw	r26, 0x04	; 4
    11aa:	0d 91       	ld	r16, X+
    11ac:	1d 91       	ld	r17, X+
    11ae:	2d 91       	ld	r18, X+
    11b0:	3c 91       	ld	r19, X
    11b2:	17 97       	sbiw	r26, 0x07	; 7
    11b4:	c5 01       	movw	r24, r10
    11b6:	84 1b       	sub	r24, r20
    11b8:	95 0b       	sbc	r25, r21
    11ba:	dc 01       	movw	r26, r24
    11bc:	97 ff       	sbrs	r25, 7
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <_fpadd_parts+0xae>
    11c0:	aa 27       	eor	r26, r26
    11c2:	bb 27       	eor	r27, r27
    11c4:	a8 1b       	sub	r26, r24
    11c6:	b9 0b       	sbc	r27, r25
    11c8:	a0 32       	cpi	r26, 0x20	; 32
    11ca:	b1 05       	cpc	r27, r1
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <_fpadd_parts+0xb6>
    11ce:	67 c0       	rjmp	.+206    	; 0x129e <_fpadd_parts+0x184>
    11d0:	18 16       	cp	r1, r24
    11d2:	19 06       	cpc	r1, r25
    11d4:	84 f5       	brge	.+96     	; 0x1236 <_fpadd_parts+0x11c>
    11d6:	28 01       	movw	r4, r16
    11d8:	39 01       	movw	r6, r18
    11da:	0a 2e       	mov	r0, r26
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <_fpadd_parts+0xcc>
    11de:	76 94       	lsr	r7
    11e0:	67 94       	ror	r6
    11e2:	57 94       	ror	r5
    11e4:	47 94       	ror	r4
    11e6:	0a 94       	dec	r0
    11e8:	d2 f7       	brpl	.-12     	; 0x11de <_fpadd_parts+0xc4>
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <_fpadd_parts+0xe2>
    11f4:	44 0f       	add	r20, r20
    11f6:	55 1f       	adc	r21, r21
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	aa 95       	dec	r26
    11fe:	d2 f7       	brpl	.-12     	; 0x11f4 <_fpadd_parts+0xda>
    1200:	41 50       	subi	r20, 0x01	; 1
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	60 40       	sbci	r22, 0x00	; 0
    1206:	70 40       	sbci	r23, 0x00	; 0
    1208:	40 23       	and	r20, r16
    120a:	51 23       	and	r21, r17
    120c:	62 23       	and	r22, r18
    120e:	73 23       	and	r23, r19
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	41 15       	cp	r20, r1
    121a:	51 05       	cpc	r21, r1
    121c:	61 05       	cpc	r22, r1
    121e:	71 05       	cpc	r23, r1
    1220:	19 f4       	brne	.+6      	; 0x1228 <_fpadd_parts+0x10e>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	dc 01       	movw	r26, r24
    1228:	8c 01       	movw	r16, r24
    122a:	9d 01       	movw	r18, r26
    122c:	04 29       	or	r16, r4
    122e:	15 29       	or	r17, r5
    1230:	26 29       	or	r18, r6
    1232:	37 29       	or	r19, r7
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <_fpadd_parts+0x19a>
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	e9 f1       	breq	.+122    	; 0x12b4 <_fpadd_parts+0x19a>
    123a:	aa 0e       	add	r10, r26
    123c:	bb 1e       	adc	r11, r27
    123e:	26 01       	movw	r4, r12
    1240:	37 01       	movw	r6, r14
    1242:	0a 2e       	mov	r0, r26
    1244:	04 c0       	rjmp	.+8      	; 0x124e <_fpadd_parts+0x134>
    1246:	76 94       	lsr	r7
    1248:	67 94       	ror	r6
    124a:	57 94       	ror	r5
    124c:	47 94       	ror	r4
    124e:	0a 94       	dec	r0
    1250:	d2 f7       	brpl	.-12     	; 0x1246 <_fpadd_parts+0x12c>
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <_fpadd_parts+0x14a>
    125c:	44 0f       	add	r20, r20
    125e:	55 1f       	adc	r21, r21
    1260:	66 1f       	adc	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	aa 95       	dec	r26
    1266:	d2 f7       	brpl	.-12     	; 0x125c <_fpadd_parts+0x142>
    1268:	41 50       	subi	r20, 0x01	; 1
    126a:	50 40       	sbci	r21, 0x00	; 0
    126c:	60 40       	sbci	r22, 0x00	; 0
    126e:	70 40       	sbci	r23, 0x00	; 0
    1270:	4c 21       	and	r20, r12
    1272:	5d 21       	and	r21, r13
    1274:	6e 21       	and	r22, r14
    1276:	7f 21       	and	r23, r15
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	41 15       	cp	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	61 05       	cpc	r22, r1
    1286:	71 05       	cpc	r23, r1
    1288:	19 f4       	brne	.+6      	; 0x1290 <_fpadd_parts+0x176>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	dc 01       	movw	r26, r24
    1290:	6c 01       	movw	r12, r24
    1292:	7d 01       	movw	r14, r26
    1294:	c4 28       	or	r12, r4
    1296:	d5 28       	or	r13, r5
    1298:	e6 28       	or	r14, r6
    129a:	f7 28       	or	r15, r7
    129c:	0b c0       	rjmp	.+22     	; 0x12b4 <_fpadd_parts+0x19a>
    129e:	4a 15       	cp	r20, r10
    12a0:	5b 05       	cpc	r21, r11
    12a2:	24 f4       	brge	.+8      	; 0x12ac <_fpadd_parts+0x192>
    12a4:	00 e0       	ldi	r16, 0x00	; 0
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	98 01       	movw	r18, r16
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <_fpadd_parts+0x19a>
    12ac:	5a 01       	movw	r10, r20
    12ae:	cc 24       	eor	r12, r12
    12b0:	dd 24       	eor	r13, r13
    12b2:	76 01       	movw	r14, r12
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	d4 01       	movw	r26, r8
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	9c 91       	ld	r25, X
    12bc:	11 97       	sbiw	r26, 0x01	; 1
    12be:	89 17       	cp	r24, r25
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <_fpadd_parts+0x1aa>
    12c2:	45 c0       	rjmp	.+138    	; 0x134e <_fpadd_parts+0x234>
    12c4:	88 23       	and	r24, r24
    12c6:	29 f0       	breq	.+10     	; 0x12d2 <_fpadd_parts+0x1b8>
    12c8:	0c 19       	sub	r16, r12
    12ca:	1d 09       	sbc	r17, r13
    12cc:	2e 09       	sbc	r18, r14
    12ce:	3f 09       	sbc	r19, r15
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <_fpadd_parts+0x1c8>
    12d2:	d7 01       	movw	r26, r14
    12d4:	c6 01       	movw	r24, r12
    12d6:	80 1b       	sub	r24, r16
    12d8:	91 0b       	sbc	r25, r17
    12da:	a2 0b       	sbc	r26, r18
    12dc:	b3 0b       	sbc	r27, r19
    12de:	8c 01       	movw	r16, r24
    12e0:	9d 01       	movw	r18, r26
    12e2:	37 fd       	sbrc	r19, 7
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <_fpadd_parts+0x1d4>
    12e6:	11 82       	std	Z+1, r1	; 0x01
    12e8:	b3 82       	std	Z+3, r11	; 0x03
    12ea:	a2 82       	std	Z+2, r10	; 0x02
    12ec:	0b c0       	rjmp	.+22     	; 0x1304 <_fpadd_parts+0x1ea>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	81 83       	std	Z+1, r24	; 0x01
    12f2:	b3 82       	std	Z+3, r11	; 0x03
    12f4:	a2 82       	std	Z+2, r10	; 0x02
    12f6:	30 95       	com	r19
    12f8:	20 95       	com	r18
    12fa:	10 95       	com	r17
    12fc:	01 95       	neg	r16
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	2f 4f       	sbci	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	04 83       	std	Z+4, r16	; 0x04
    1306:	15 83       	std	Z+5, r17	; 0x05
    1308:	26 83       	std	Z+6, r18	; 0x06
    130a:	37 83       	std	Z+7, r19	; 0x07
    130c:	0d c0       	rjmp	.+26     	; 0x1328 <_fpadd_parts+0x20e>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	aa 1f       	adc	r26, r26
    1314:	bb 1f       	adc	r27, r27
    1316:	84 83       	std	Z+4, r24	; 0x04
    1318:	95 83       	std	Z+5, r25	; 0x05
    131a:	a6 83       	std	Z+6, r26	; 0x06
    131c:	b7 83       	std	Z+7, r27	; 0x07
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	93 81       	ldd	r25, Z+3	; 0x03
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	93 83       	std	Z+3, r25	; 0x03
    1326:	82 83       	std	Z+2, r24	; 0x02
    1328:	84 81       	ldd	r24, Z+4	; 0x04
    132a:	95 81       	ldd	r25, Z+5	; 0x05
    132c:	a6 81       	ldd	r26, Z+6	; 0x06
    132e:	b7 81       	ldd	r27, Z+7	; 0x07
    1330:	ac 01       	movw	r20, r24
    1332:	bd 01       	movw	r22, r26
    1334:	41 50       	subi	r20, 0x01	; 1
    1336:	50 40       	sbci	r21, 0x00	; 0
    1338:	60 40       	sbci	r22, 0x00	; 0
    133a:	70 40       	sbci	r23, 0x00	; 0
    133c:	4f 3f       	cpi	r20, 0xFF	; 255
    133e:	2f ef       	ldi	r18, 0xFF	; 255
    1340:	52 07       	cpc	r21, r18
    1342:	2f ef       	ldi	r18, 0xFF	; 255
    1344:	62 07       	cpc	r22, r18
    1346:	2f e3       	ldi	r18, 0x3F	; 63
    1348:	72 07       	cpc	r23, r18
    134a:	08 f3       	brcs	.-62     	; 0x130e <_fpadd_parts+0x1f4>
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <_fpadd_parts+0x24a>
    134e:	81 83       	std	Z+1, r24	; 0x01
    1350:	b3 82       	std	Z+3, r11	; 0x03
    1352:	a2 82       	std	Z+2, r10	; 0x02
    1354:	0c 0d       	add	r16, r12
    1356:	1d 1d       	adc	r17, r13
    1358:	2e 1d       	adc	r18, r14
    135a:	3f 1d       	adc	r19, r15
    135c:	04 83       	std	Z+4, r16	; 0x04
    135e:	15 83       	std	Z+5, r17	; 0x05
    1360:	26 83       	std	Z+6, r18	; 0x06
    1362:	37 83       	std	Z+7, r19	; 0x07
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	80 83       	st	Z, r24
    1368:	44 81       	ldd	r20, Z+4	; 0x04
    136a:	55 81       	ldd	r21, Z+5	; 0x05
    136c:	66 81       	ldd	r22, Z+6	; 0x06
    136e:	77 81       	ldd	r23, Z+7	; 0x07
    1370:	77 ff       	sbrs	r23, 7
    1372:	1d c0       	rjmp	.+58     	; 0x13ae <_fpadd_parts+0x294>
    1374:	db 01       	movw	r26, r22
    1376:	ca 01       	movw	r24, r20
    1378:	81 70       	andi	r24, 0x01	; 1
    137a:	90 70       	andi	r25, 0x00	; 0
    137c:	a0 70       	andi	r26, 0x00	; 0
    137e:	b0 70       	andi	r27, 0x00	; 0
    1380:	76 95       	lsr	r23
    1382:	67 95       	ror	r22
    1384:	57 95       	ror	r21
    1386:	47 95       	ror	r20
    1388:	84 2b       	or	r24, r20
    138a:	95 2b       	or	r25, r21
    138c:	a6 2b       	or	r26, r22
    138e:	b7 2b       	or	r27, r23
    1390:	84 83       	std	Z+4, r24	; 0x04
    1392:	95 83       	std	Z+5, r25	; 0x05
    1394:	a6 83       	std	Z+6, r26	; 0x06
    1396:	b7 83       	std	Z+7, r27	; 0x07
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	93 83       	std	Z+3, r25	; 0x03
    13a0:	82 83       	std	Z+2, r24	; 0x02
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <_fpadd_parts+0x294>
    13a4:	c1 e5       	ldi	r28, 0x51	; 81
    13a6:	d3 e0       	ldi	r29, 0x03	; 3
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <_fpadd_parts+0x296>
    13aa:	e4 01       	movw	r28, r8
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <_fpadd_parts+0x296>
    13ae:	ef 01       	movw	r28, r30
    13b0:	ce 01       	movw	r24, r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	e0 e1       	ldi	r30, 0x10	; 16
    13b8:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__epilogue_restores__+0x4>

000013bc <__addsf3>:
    13bc:	a0 e2       	ldi	r26, 0x20	; 32
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 ee       	ldi	r30, 0xE4	; 228
    13c2:	f9 e0       	ldi	r31, 0x09	; 9
    13c4:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__+0x20>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	af 83       	std	Y+7, r26	; 0x07
    13d2:	b8 87       	std	Y+8, r27	; 0x08
    13d4:	29 83       	std	Y+1, r18	; 0x01
    13d6:	3a 83       	std	Y+2, r19	; 0x02
    13d8:	4b 83       	std	Y+3, r20	; 0x03
    13da:	5c 83       	std	Y+4, r21	; 0x04
    13dc:	ce 01       	movw	r24, r28
    13de:	05 96       	adiw	r24, 0x05	; 5
    13e0:	be 01       	movw	r22, r28
    13e2:	67 5e       	subi	r22, 0xE7	; 231
    13e4:	7f 4f       	sbci	r23, 0xFF	; 255
    13e6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    13ea:	ce 01       	movw	r24, r28
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	be 01       	movw	r22, r28
    13f0:	6f 5e       	subi	r22, 0xEF	; 239
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    13f8:	ce 01       	movw	r24, r28
    13fa:	49 96       	adiw	r24, 0x19	; 25
    13fc:	be 01       	movw	r22, r28
    13fe:	6f 5e       	subi	r22, 0xEF	; 239
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	ae 01       	movw	r20, r28
    1404:	47 5f       	subi	r20, 0xF7	; 247
    1406:	5f 4f       	sbci	r21, 0xFF	; 255
    1408:	0e 94 8d 08 	call	0x111a	; 0x111a <_fpadd_parts>
    140c:	0e 94 97 0c 	call	0x192e	; 0x192e <__pack_f>
    1410:	46 2f       	mov	r20, r22
    1412:	57 2f       	mov	r21, r23
    1414:	68 2f       	mov	r22, r24
    1416:	79 2f       	mov	r23, r25
    1418:	cb 01       	movw	r24, r22
    141a:	ba 01       	movw	r22, r20
    141c:	a0 96       	adiw	r28, 0x20	; 32
    141e:	e2 e0       	ldi	r30, 0x02	; 2
    1420:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__+0x20>

00001424 <__subsf3>:
    1424:	a0 e2       	ldi	r26, 0x20	; 32
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e8 e1       	ldi	r30, 0x18	; 24
    142a:	fa e0       	ldi	r31, 0x0A	; 10
    142c:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__+0x20>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	9e 83       	std	Y+6, r25	; 0x06
    1438:	af 83       	std	Y+7, r26	; 0x07
    143a:	b8 87       	std	Y+8, r27	; 0x08
    143c:	29 83       	std	Y+1, r18	; 0x01
    143e:	3a 83       	std	Y+2, r19	; 0x02
    1440:	4b 83       	std	Y+3, r20	; 0x03
    1442:	5c 83       	std	Y+4, r21	; 0x04
    1444:	ce 01       	movw	r24, r28
    1446:	05 96       	adiw	r24, 0x05	; 5
    1448:	be 01       	movw	r22, r28
    144a:	67 5e       	subi	r22, 0xE7	; 231
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	be 01       	movw	r22, r28
    1458:	6f 5e       	subi	r22, 0xEF	; 239
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    1460:	8a 89       	ldd	r24, Y+18	; 0x12
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	89 27       	eor	r24, r25
    1466:	8a 8b       	std	Y+18, r24	; 0x12
    1468:	ce 01       	movw	r24, r28
    146a:	49 96       	adiw	r24, 0x19	; 25
    146c:	be 01       	movw	r22, r28
    146e:	6f 5e       	subi	r22, 0xEF	; 239
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	ae 01       	movw	r20, r28
    1474:	47 5f       	subi	r20, 0xF7	; 247
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	0e 94 8d 08 	call	0x111a	; 0x111a <_fpadd_parts>
    147c:	0e 94 97 0c 	call	0x192e	; 0x192e <__pack_f>
    1480:	46 2f       	mov	r20, r22
    1482:	57 2f       	mov	r21, r23
    1484:	68 2f       	mov	r22, r24
    1486:	79 2f       	mov	r23, r25
    1488:	cb 01       	movw	r24, r22
    148a:	ba 01       	movw	r22, r20
    148c:	a0 96       	adiw	r28, 0x20	; 32
    148e:	e2 e0       	ldi	r30, 0x02	; 2
    1490:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__+0x20>

00001494 <__mulsf3>:
    1494:	a0 e2       	ldi	r26, 0x20	; 32
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e0 e5       	ldi	r30, 0x50	; 80
    149a:	fa e0       	ldi	r31, 0x0A	; 10
    149c:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__prologue_saves__+0x4>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8d 83       	std	Y+5, r24	; 0x05
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	af 83       	std	Y+7, r26	; 0x07
    14aa:	b8 87       	std	Y+8, r27	; 0x08
    14ac:	29 83       	std	Y+1, r18	; 0x01
    14ae:	3a 83       	std	Y+2, r19	; 0x02
    14b0:	4b 83       	std	Y+3, r20	; 0x03
    14b2:	5c 83       	std	Y+4, r21	; 0x04
    14b4:	ce 01       	movw	r24, r28
    14b6:	05 96       	adiw	r24, 0x05	; 5
    14b8:	be 01       	movw	r22, r28
    14ba:	67 5e       	subi	r22, 0xE7	; 231
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	be 01       	movw	r22, r28
    14c8:	6f 5e       	subi	r22, 0xEF	; 239
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    14d0:	99 8d       	ldd	r25, Y+25	; 0x19
    14d2:	92 30       	cpi	r25, 0x02	; 2
    14d4:	78 f0       	brcs	.+30     	; 0x14f4 <__mulsf3+0x60>
    14d6:	89 89       	ldd	r24, Y+17	; 0x11
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	c0 f0       	brcs	.+48     	; 0x150c <__mulsf3+0x78>
    14dc:	94 30       	cpi	r25, 0x04	; 4
    14de:	19 f4       	brne	.+6      	; 0x14e6 <__mulsf3+0x52>
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	41 f4       	brne	.+16     	; 0x14f4 <__mulsf3+0x60>
    14e4:	ca c0       	rjmp	.+404    	; 0x167a <__mulsf3+0x1e6>
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	19 f4       	brne	.+6      	; 0x14f0 <__mulsf3+0x5c>
    14ea:	92 30       	cpi	r25, 0x02	; 2
    14ec:	79 f4       	brne	.+30     	; 0x150c <__mulsf3+0x78>
    14ee:	c5 c0       	rjmp	.+394    	; 0x167a <__mulsf3+0x1e6>
    14f0:	92 30       	cpi	r25, 0x02	; 2
    14f2:	51 f4       	brne	.+20     	; 0x1508 <__mulsf3+0x74>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14f8:	9a 89       	ldd	r25, Y+18	; 0x12
    14fa:	29 17       	cp	r18, r25
    14fc:	09 f4       	brne	.+2      	; 0x1500 <__mulsf3+0x6c>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	8a 8f       	std	Y+26, r24	; 0x1a
    1502:	ce 01       	movw	r24, r28
    1504:	49 96       	adiw	r24, 0x19	; 25
    1506:	bb c0       	rjmp	.+374    	; 0x167e <__mulsf3+0x1ea>
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	51 f4       	brne	.+20     	; 0x1520 <__mulsf3+0x8c>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1510:	9a 89       	ldd	r25, Y+18	; 0x12
    1512:	29 17       	cp	r18, r25
    1514:	09 f4       	brne	.+2      	; 0x1518 <__mulsf3+0x84>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	8a 8b       	std	Y+18, r24	; 0x12
    151a:	ce 01       	movw	r24, r28
    151c:	41 96       	adiw	r24, 0x11	; 17
    151e:	af c0       	rjmp	.+350    	; 0x167e <__mulsf3+0x1ea>
    1520:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1522:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1524:	6f 8c       	ldd	r6, Y+31	; 0x1f
    1526:	78 a0       	lds	r23, 0x88
    1528:	0d 89       	ldd	r16, Y+21	; 0x15
    152a:	1e 89       	ldd	r17, Y+22	; 0x16
    152c:	2f 89       	ldd	r18, Y+23	; 0x17
    152e:	38 8d       	ldd	r19, Y+24	; 0x18
    1530:	e0 e2       	ldi	r30, 0x20	; 32
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	ba 01       	movw	r22, r20
    153a:	88 24       	eor	r8, r8
    153c:	99 24       	eor	r9, r9
    153e:	54 01       	movw	r10, r8
    1540:	cc 24       	eor	r12, r12
    1542:	dd 24       	eor	r13, r13
    1544:	76 01       	movw	r14, r12
    1546:	c2 01       	movw	r24, r4
    1548:	81 70       	andi	r24, 0x01	; 1
    154a:	90 70       	andi	r25, 0x00	; 0
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	d1 f0       	breq	.+52     	; 0x1584 <__mulsf3+0xf0>
    1550:	c0 0e       	add	r12, r16
    1552:	d1 1e       	adc	r13, r17
    1554:	e2 1e       	adc	r14, r18
    1556:	f3 1e       	adc	r15, r19
    1558:	db 01       	movw	r26, r22
    155a:	ca 01       	movw	r24, r20
    155c:	88 0d       	add	r24, r8
    155e:	99 1d       	adc	r25, r9
    1560:	aa 1d       	adc	r26, r10
    1562:	bb 1d       	adc	r27, r11
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	c0 16       	cp	r12, r16
    156e:	d1 06       	cpc	r13, r17
    1570:	e2 06       	cpc	r14, r18
    1572:	f3 06       	cpc	r15, r19
    1574:	18 f0       	brcs	.+6      	; 0x157c <__mulsf3+0xe8>
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	ba 01       	movw	r22, r20
    157c:	48 0f       	add	r20, r24
    157e:	59 1f       	adc	r21, r25
    1580:	6a 1f       	adc	r22, r26
    1582:	7b 1f       	adc	r23, r27
    1584:	88 0c       	add	r8, r8
    1586:	99 1c       	adc	r9, r9
    1588:	aa 1c       	adc	r10, r10
    158a:	bb 1c       	adc	r11, r11
    158c:	37 ff       	sbrs	r19, 7
    158e:	08 c0       	rjmp	.+16     	; 0x15a0 <__mulsf3+0x10c>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 e0       	ldi	r26, 0x00	; 0
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	88 2a       	or	r8, r24
    159a:	99 2a       	or	r9, r25
    159c:	aa 2a       	or	r10, r26
    159e:	bb 2a       	or	r11, r27
    15a0:	00 0f       	add	r16, r16
    15a2:	11 1f       	adc	r17, r17
    15a4:	22 1f       	adc	r18, r18
    15a6:	33 1f       	adc	r19, r19
    15a8:	76 94       	lsr	r7
    15aa:	67 94       	ror	r6
    15ac:	57 94       	ror	r5
    15ae:	47 94       	ror	r4
    15b0:	31 97       	sbiw	r30, 0x01	; 1
    15b2:	49 f6       	brne	.-110    	; 0x1546 <__mulsf3+0xb2>
    15b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b8:	2b 89       	ldd	r18, Y+19	; 0x13
    15ba:	3c 89       	ldd	r19, Y+20	; 0x14
    15bc:	82 0f       	add	r24, r18
    15be:	93 1f       	adc	r25, r19
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	9c 87       	std	Y+12, r25	; 0x0c
    15c4:	8b 87       	std	Y+11, r24	; 0x0b
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    15ca:	9a 89       	ldd	r25, Y+18	; 0x12
    15cc:	29 17       	cp	r18, r25
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <__mulsf3+0x13e>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	8a 87       	std	Y+10, r24	; 0x0a
    15d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    15d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    15d8:	17 c0       	rjmp	.+46     	; 0x1608 <__mulsf3+0x174>
    15da:	ca 01       	movw	r24, r20
    15dc:	81 70       	andi	r24, 0x01	; 1
    15de:	90 70       	andi	r25, 0x00	; 0
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	61 f0       	breq	.+24     	; 0x15fc <__mulsf3+0x168>
    15e4:	f6 94       	lsr	r15
    15e6:	e7 94       	ror	r14
    15e8:	d7 94       	ror	r13
    15ea:	c7 94       	ror	r12
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e8       	ldi	r27, 0x80	; 128
    15f4:	c8 2a       	or	r12, r24
    15f6:	d9 2a       	or	r13, r25
    15f8:	ea 2a       	or	r14, r26
    15fa:	fb 2a       	or	r15, r27
    15fc:	76 95       	lsr	r23
    15fe:	67 95       	ror	r22
    1600:	57 95       	ror	r21
    1602:	47 95       	ror	r20
    1604:	2f 5f       	subi	r18, 0xFF	; 255
    1606:	3f 4f       	sbci	r19, 0xFF	; 255
    1608:	77 fd       	sbrc	r23, 7
    160a:	e7 cf       	rjmp	.-50     	; 0x15da <__mulsf3+0x146>
    160c:	c9 01       	movw	r24, r18
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <__mulsf3+0x192>
    1610:	44 0f       	add	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	66 1f       	adc	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	f7 fc       	sbrc	r15, 7
    161a:	41 60       	ori	r20, 0x01	; 1
    161c:	cc 0c       	add	r12, r12
    161e:	dd 1c       	adc	r13, r13
    1620:	ee 1c       	adc	r14, r14
    1622:	ff 1c       	adc	r15, r15
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	40 30       	cpi	r20, 0x00	; 0
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	5a 07       	cpc	r21, r26
    162c:	a0 e0       	ldi	r26, 0x00	; 0
    162e:	6a 07       	cpc	r22, r26
    1630:	a0 e4       	ldi	r26, 0x40	; 64
    1632:	7a 07       	cpc	r23, r26
    1634:	68 f3       	brcs	.-38     	; 0x1610 <__mulsf3+0x17c>
    1636:	8b 87       	std	Y+11, r24	; 0x0b
    1638:	9c 87       	std	Y+12, r25	; 0x0c
    163a:	db 01       	movw	r26, r22
    163c:	ca 01       	movw	r24, r20
    163e:	8f 77       	andi	r24, 0x7F	; 127
    1640:	90 70       	andi	r25, 0x00	; 0
    1642:	a0 70       	andi	r26, 0x00	; 0
    1644:	b0 70       	andi	r27, 0x00	; 0
    1646:	80 34       	cpi	r24, 0x40	; 64
    1648:	91 05       	cpc	r25, r1
    164a:	a1 05       	cpc	r26, r1
    164c:	b1 05       	cpc	r27, r1
    164e:	61 f4       	brne	.+24     	; 0x1668 <__mulsf3+0x1d4>
    1650:	47 fd       	sbrc	r20, 7
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <__mulsf3+0x1d4>
    1654:	c1 14       	cp	r12, r1
    1656:	d1 04       	cpc	r13, r1
    1658:	e1 04       	cpc	r14, r1
    165a:	f1 04       	cpc	r15, r1
    165c:	29 f0       	breq	.+10     	; 0x1668 <__mulsf3+0x1d4>
    165e:	40 5c       	subi	r20, 0xC0	; 192
    1660:	5f 4f       	sbci	r21, 0xFF	; 255
    1662:	6f 4f       	sbci	r22, 0xFF	; 255
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	40 78       	andi	r20, 0x80	; 128
    1668:	4d 87       	std	Y+13, r20	; 0x0d
    166a:	5e 87       	std	Y+14, r21	; 0x0e
    166c:	6f 87       	std	Y+15, r22	; 0x0f
    166e:	78 8b       	std	Y+16, r23	; 0x10
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	89 87       	std	Y+9, r24	; 0x09
    1674:	ce 01       	movw	r24, r28
    1676:	09 96       	adiw	r24, 0x09	; 9
    1678:	02 c0       	rjmp	.+4      	; 0x167e <__mulsf3+0x1ea>
    167a:	81 e5       	ldi	r24, 0x51	; 81
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	0e 94 97 0c 	call	0x192e	; 0x192e <__pack_f>
    1682:	46 2f       	mov	r20, r22
    1684:	57 2f       	mov	r21, r23
    1686:	68 2f       	mov	r22, r24
    1688:	79 2f       	mov	r23, r25
    168a:	cb 01       	movw	r24, r22
    168c:	ba 01       	movw	r22, r20
    168e:	a0 96       	adiw	r28, 0x20	; 32
    1690:	e0 e1       	ldi	r30, 0x10	; 16
    1692:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__epilogue_restores__+0x4>

00001696 <__gesf2>:
    1696:	a8 e1       	ldi	r26, 0x18	; 24
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e1 e5       	ldi	r30, 0x51	; 81
    169c:	fb e0       	ldi	r31, 0x0B	; 11
    169e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__+0x20>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	af 83       	std	Y+7, r26	; 0x07
    16ac:	b8 87       	std	Y+8, r27	; 0x08
    16ae:	29 83       	std	Y+1, r18	; 0x01
    16b0:	3a 83       	std	Y+2, r19	; 0x02
    16b2:	4b 83       	std	Y+3, r20	; 0x03
    16b4:	5c 83       	std	Y+4, r21	; 0x04
    16b6:	ce 01       	movw	r24, r28
    16b8:	05 96       	adiw	r24, 0x05	; 5
    16ba:	be 01       	movw	r22, r28
    16bc:	6f 5e       	subi	r22, 0xEF	; 239
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    16c4:	ce 01       	movw	r24, r28
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	be 01       	movw	r22, r28
    16ca:	67 5f       	subi	r22, 0xF7	; 247
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    16d2:	89 89       	ldd	r24, Y+17	; 0x11
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	58 f0       	brcs	.+22     	; 0x16ee <__gesf2+0x58>
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	40 f0       	brcs	.+16     	; 0x16ee <__gesf2+0x58>
    16de:	ce 01       	movw	r24, r28
    16e0:	41 96       	adiw	r24, 0x11	; 17
    16e2:	be 01       	movw	r22, r28
    16e4:	67 5f       	subi	r22, 0xF7	; 247
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__fpcmp_parts_f>
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <__gesf2+0x5a>
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
    16f0:	68 96       	adiw	r28, 0x18	; 24
    16f2:	e2 e0       	ldi	r30, 0x02	; 2
    16f4:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__+0x20>

000016f8 <__floatsisf>:
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	28 97       	sbiw	r28, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	6b 01       	movw	r12, r22
    1716:	7c 01       	movw	r14, r24
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	d7 01       	movw	r26, r14
    171e:	c6 01       	movw	r24, r12
    1720:	88 27       	eor	r24, r24
    1722:	b7 fd       	sbrc	r27, 7
    1724:	83 95       	inc	r24
    1726:	99 27       	eor	r25, r25
    1728:	aa 27       	eor	r26, r26
    172a:	bb 27       	eor	r27, r27
    172c:	28 2f       	mov	r18, r24
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	c1 14       	cp	r12, r1
    1732:	d1 04       	cpc	r13, r1
    1734:	e1 04       	cpc	r14, r1
    1736:	f1 04       	cpc	r15, r1
    1738:	19 f4       	brne	.+6      	; 0x1740 <__floatsisf+0x48>
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	35 c0       	rjmp	.+106    	; 0x17aa <__floatsisf+0xb2>
    1740:	8e e1       	ldi	r24, 0x1E	; 30
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    1748:	22 23       	and	r18, r18
    174a:	89 f0       	breq	.+34     	; 0x176e <__floatsisf+0x76>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	c8 16       	cp	r12, r24
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	d8 06       	cpc	r13, r24
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	e8 06       	cpc	r14, r24
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	f8 06       	cpc	r15, r24
    175c:	59 f1       	breq	.+86     	; 0x17b4 <__floatsisf+0xbc>
    175e:	f0 94       	com	r15
    1760:	e0 94       	com	r14
    1762:	d0 94       	com	r13
    1764:	c0 94       	com	r12
    1766:	c1 1c       	adc	r12, r1
    1768:	d1 1c       	adc	r13, r1
    176a:	e1 1c       	adc	r14, r1
    176c:	f1 1c       	adc	r15, r1
    176e:	cd 82       	std	Y+5, r12	; 0x05
    1770:	de 82       	std	Y+6, r13	; 0x06
    1772:	ef 82       	std	Y+7, r14	; 0x07
    1774:	f8 86       	std	Y+8, r15	; 0x08
    1776:	c7 01       	movw	r24, r14
    1778:	b6 01       	movw	r22, r12
    177a:	0e 94 44 0c 	call	0x1888	; 0x1888 <__clzsi2>
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	18 16       	cp	r1, r24
    1782:	19 06       	cpc	r1, r25
    1784:	94 f4       	brge	.+36     	; 0x17aa <__floatsisf+0xb2>
    1786:	08 2e       	mov	r0, r24
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <__floatsisf+0x9a>
    178a:	cc 0c       	add	r12, r12
    178c:	dd 1c       	adc	r13, r13
    178e:	ee 1c       	adc	r14, r14
    1790:	ff 1c       	adc	r15, r15
    1792:	0a 94       	dec	r0
    1794:	d2 f7       	brpl	.-12     	; 0x178a <__floatsisf+0x92>
    1796:	cd 82       	std	Y+5, r12	; 0x05
    1798:	de 82       	std	Y+6, r13	; 0x06
    179a:	ef 82       	std	Y+7, r14	; 0x07
    179c:	f8 86       	std	Y+8, r15	; 0x08
    179e:	2e e1       	ldi	r18, 0x1E	; 30
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	28 1b       	sub	r18, r24
    17a4:	39 0b       	sbc	r19, r25
    17a6:	3c 83       	std	Y+4, r19	; 0x04
    17a8:	2b 83       	std	Y+3, r18	; 0x03
    17aa:	ce 01       	movw	r24, r28
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	0e 94 97 0c 	call	0x192e	; 0x192e <__pack_f>
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <__floatsisf+0xc4>
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	9f ec       	ldi	r25, 0xCF	; 207
    17bc:	38 2f       	mov	r19, r24
    17be:	29 2f       	mov	r18, r25
    17c0:	86 2f       	mov	r24, r22
    17c2:	97 2f       	mov	r25, r23
    17c4:	a3 2f       	mov	r26, r19
    17c6:	b2 2f       	mov	r27, r18
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	28 96       	adiw	r28, 0x08	; 8
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	df 90       	pop	r13
    17e2:	cf 90       	pop	r12
    17e4:	08 95       	ret

000017e6 <__fixsfsi>:
    17e6:	ac e0       	ldi	r26, 0x0C	; 12
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e9 ef       	ldi	r30, 0xF9	; 249
    17ec:	fb e0       	ldi	r31, 0x0B	; 11
    17ee:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__prologue_saves__+0x1c>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	ab 83       	std	Y+3, r26	; 0x03
    17fc:	bc 83       	std	Y+4, r27	; 0x04
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	be 01       	movw	r22, r28
    1804:	6b 5f       	subi	r22, 0xFB	; 251
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__unpack_f>
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	82 30       	cpi	r24, 0x02	; 2
    1810:	69 f1       	breq	.+90     	; 0x186c <__fixsfsi+0x86>
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	58 f1       	brcs	.+86     	; 0x186c <__fixsfsi+0x86>
    1816:	84 30       	cpi	r24, 0x04	; 4
    1818:	39 f0       	breq	.+14     	; 0x1828 <__fixsfsi+0x42>
    181a:	2f 81       	ldd	r18, Y+7	; 0x07
    181c:	38 85       	ldd	r19, Y+8	; 0x08
    181e:	37 fd       	sbrc	r19, 7
    1820:	25 c0       	rjmp	.+74     	; 0x186c <__fixsfsi+0x86>
    1822:	2f 31       	cpi	r18, 0x1F	; 31
    1824:	31 05       	cpc	r19, r1
    1826:	44 f0       	brlt	.+16     	; 0x1838 <__fixsfsi+0x52>
    1828:	8e 81       	ldd	r24, Y+6	; 0x06
    182a:	88 23       	and	r24, r24
    182c:	19 f1       	breq	.+70     	; 0x1874 <__fixsfsi+0x8e>
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e8       	ldi	r19, 0x80	; 128
    1836:	22 c0       	rjmp	.+68     	; 0x187c <__fixsfsi+0x96>
    1838:	8e e1       	ldi	r24, 0x1E	; 30
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	09 85       	ldd	r16, Y+9	; 0x09
    1842:	1a 85       	ldd	r17, Y+10	; 0x0a
    1844:	2b 85       	ldd	r18, Y+11	; 0x0b
    1846:	3c 85       	ldd	r19, Y+12	; 0x0c
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <__fixsfsi+0x6c>
    184a:	36 95       	lsr	r19
    184c:	27 95       	ror	r18
    184e:	17 95       	ror	r17
    1850:	07 95       	ror	r16
    1852:	8a 95       	dec	r24
    1854:	d2 f7       	brpl	.-12     	; 0x184a <__fixsfsi+0x64>
    1856:	8e 81       	ldd	r24, Y+6	; 0x06
    1858:	88 23       	and	r24, r24
    185a:	81 f0       	breq	.+32     	; 0x187c <__fixsfsi+0x96>
    185c:	30 95       	com	r19
    185e:	20 95       	com	r18
    1860:	10 95       	com	r17
    1862:	01 95       	neg	r16
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	2f 4f       	sbci	r18, 0xFF	; 255
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	08 c0       	rjmp	.+16     	; 0x187c <__fixsfsi+0x96>
    186c:	00 e0       	ldi	r16, 0x00	; 0
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	98 01       	movw	r18, r16
    1872:	04 c0       	rjmp	.+8      	; 0x187c <__fixsfsi+0x96>
    1874:	0f ef       	ldi	r16, 0xFF	; 255
    1876:	1f ef       	ldi	r17, 0xFF	; 255
    1878:	2f ef       	ldi	r18, 0xFF	; 255
    187a:	3f e7       	ldi	r19, 0x7F	; 127
    187c:	b8 01       	movw	r22, r16
    187e:	c9 01       	movw	r24, r18
    1880:	2c 96       	adiw	r28, 0x0c	; 12
    1882:	e4 e0       	ldi	r30, 0x04	; 4
    1884:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__epilogue_restores__+0x1c>

00001888 <__clzsi2>:
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	8b 01       	movw	r16, r22
    1896:	9c 01       	movw	r18, r24
    1898:	00 30       	cpi	r16, 0x00	; 0
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	18 07       	cpc	r17, r24
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	28 07       	cpc	r18, r24
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	38 07       	cpc	r19, r24
    18a6:	50 f4       	brcc	.+20     	; 0x18bc <__clzsi2+0x34>
    18a8:	0f 3f       	cpi	r16, 0xFF	; 255
    18aa:	11 05       	cpc	r17, r1
    18ac:	21 05       	cpc	r18, r1
    18ae:	31 05       	cpc	r19, r1
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <__clzsi2+0x2c>
    18b2:	88 f4       	brcc	.+34     	; 0x18d6 <__clzsi2+0x4e>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	dc 01       	movw	r26, r24
    18ba:	16 c0       	rjmp	.+44     	; 0x18e8 <__clzsi2+0x60>
    18bc:	00 30       	cpi	r16, 0x00	; 0
    18be:	e0 e0       	ldi	r30, 0x00	; 0
    18c0:	1e 07       	cpc	r17, r30
    18c2:	e0 e0       	ldi	r30, 0x00	; 0
    18c4:	2e 07       	cpc	r18, r30
    18c6:	e1 e0       	ldi	r30, 0x01	; 1
    18c8:	3e 07       	cpc	r19, r30
    18ca:	50 f4       	brcc	.+20     	; 0x18e0 <__clzsi2+0x58>
    18cc:	80 e1       	ldi	r24, 0x10	; 16
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e0       	ldi	r26, 0x00	; 0
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <__clzsi2+0x60>
    18d6:	88 e0       	ldi	r24, 0x08	; 8
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <__clzsi2+0x60>
    18e0:	88 e1       	ldi	r24, 0x18	; 24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 e0       	ldi	r26, 0x00	; 0
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	48 1b       	sub	r20, r24
    18f2:	59 0b       	sbc	r21, r25
    18f4:	6a 0b       	sbc	r22, r26
    18f6:	7b 0b       	sbc	r23, r27
    18f8:	68 01       	movw	r12, r16
    18fa:	79 01       	movw	r14, r18
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <__clzsi2+0x7e>
    18fe:	f6 94       	lsr	r15
    1900:	e7 94       	ror	r14
    1902:	d7 94       	ror	r13
    1904:	c7 94       	ror	r12
    1906:	8a 95       	dec	r24
    1908:	d2 f7       	brpl	.-12     	; 0x18fe <__clzsi2+0x76>
    190a:	d7 01       	movw	r26, r14
    190c:	c6 01       	movw	r24, r12
    190e:	87 5a       	subi	r24, 0xA7	; 167
    1910:	9c 4f       	sbci	r25, 0xFC	; 252
    1912:	fc 01       	movw	r30, r24
    1914:	80 81       	ld	r24, Z
    1916:	48 1b       	sub	r20, r24
    1918:	51 09       	sbc	r21, r1
    191a:	61 09       	sbc	r22, r1
    191c:	71 09       	sbc	r23, r1
    191e:	ca 01       	movw	r24, r20
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	08 95       	ret

0000192e <__pack_f>:
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	dc 01       	movw	r26, r24
    193c:	14 96       	adiw	r26, 0x04	; 4
    193e:	4d 91       	ld	r20, X+
    1940:	5d 91       	ld	r21, X+
    1942:	6d 91       	ld	r22, X+
    1944:	7c 91       	ld	r23, X
    1946:	17 97       	sbiw	r26, 0x07	; 7
    1948:	11 96       	adiw	r26, 0x01	; 1
    194a:	ec 91       	ld	r30, X
    194c:	11 97       	sbiw	r26, 0x01	; 1
    194e:	8c 91       	ld	r24, X
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	20 f4       	brcc	.+8      	; 0x195c <__pack_f+0x2e>
    1954:	60 61       	ori	r22, 0x10	; 16
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a5 c0       	rjmp	.+330    	; 0x1aa6 <__pack_f+0x178>
    195c:	84 30       	cpi	r24, 0x04	; 4
    195e:	09 f4       	brne	.+2      	; 0x1962 <__pack_f+0x34>
    1960:	9d c0       	rjmp	.+314    	; 0x1a9c <__pack_f+0x16e>
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	09 f4       	brne	.+2      	; 0x1968 <__pack_f+0x3a>
    1966:	94 c0       	rjmp	.+296    	; 0x1a90 <__pack_f+0x162>
    1968:	41 15       	cp	r20, r1
    196a:	51 05       	cpc	r21, r1
    196c:	61 05       	cpc	r22, r1
    196e:	71 05       	cpc	r23, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <__pack_f+0x46>
    1972:	91 c0       	rjmp	.+290    	; 0x1a96 <__pack_f+0x168>
    1974:	12 96       	adiw	r26, 0x02	; 2
    1976:	8d 91       	ld	r24, X+
    1978:	9c 91       	ld	r25, X
    197a:	13 97       	sbiw	r26, 0x03	; 3
    197c:	2f ef       	ldi	r18, 0xFF	; 255
    197e:	82 38       	cpi	r24, 0x82	; 130
    1980:	92 07       	cpc	r25, r18
    1982:	0c f0       	brlt	.+2      	; 0x1986 <__pack_f+0x58>
    1984:	59 c0       	rjmp	.+178    	; 0x1a38 <__pack_f+0x10a>
    1986:	22 e8       	ldi	r18, 0x82	; 130
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	28 1b       	sub	r18, r24
    198c:	39 0b       	sbc	r19, r25
    198e:	2a 31       	cpi	r18, 0x1A	; 26
    1990:	31 05       	cpc	r19, r1
    1992:	64 f5       	brge	.+88     	; 0x19ec <__pack_f+0xbe>
    1994:	6a 01       	movw	r12, r20
    1996:	7b 01       	movw	r14, r22
    1998:	02 2e       	mov	r0, r18
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <__pack_f+0x76>
    199c:	f6 94       	lsr	r15
    199e:	e7 94       	ror	r14
    19a0:	d7 94       	ror	r13
    19a2:	c7 94       	ror	r12
    19a4:	0a 94       	dec	r0
    19a6:	d2 f7       	brpl	.-12     	; 0x199c <__pack_f+0x6e>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <__pack_f+0x8c>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	aa 1f       	adc	r26, r26
    19b8:	bb 1f       	adc	r27, r27
    19ba:	2a 95       	dec	r18
    19bc:	d2 f7       	brpl	.-12     	; 0x19b2 <__pack_f+0x84>
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	a1 09       	sbc	r26, r1
    19c2:	b1 09       	sbc	r27, r1
    19c4:	84 23       	and	r24, r20
    19c6:	95 23       	and	r25, r21
    19c8:	a6 23       	and	r26, r22
    19ca:	b7 23       	and	r27, r23
    19cc:	41 e0       	ldi	r20, 0x01	; 1
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	a1 05       	cpc	r26, r1
    19d8:	b1 05       	cpc	r27, r1
    19da:	19 f4       	brne	.+6      	; 0x19e2 <__pack_f+0xb4>
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	ba 01       	movw	r22, r20
    19e2:	4c 29       	or	r20, r12
    19e4:	5d 29       	or	r21, r13
    19e6:	6e 29       	or	r22, r14
    19e8:	7f 29       	or	r23, r15
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <__pack_f+0xc4>
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	ba 01       	movw	r22, r20
    19f2:	db 01       	movw	r26, r22
    19f4:	ca 01       	movw	r24, r20
    19f6:	8f 77       	andi	r24, 0x7F	; 127
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	a0 70       	andi	r26, 0x00	; 0
    19fc:	b0 70       	andi	r27, 0x00	; 0
    19fe:	80 34       	cpi	r24, 0x40	; 64
    1a00:	91 05       	cpc	r25, r1
    1a02:	a1 05       	cpc	r26, r1
    1a04:	b1 05       	cpc	r27, r1
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <__pack_f+0xe8>
    1a08:	47 ff       	sbrs	r20, 7
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <__pack_f+0xf0>
    1a0c:	40 5c       	subi	r20, 0xC0	; 192
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	6f 4f       	sbci	r22, 0xFF	; 255
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <__pack_f+0xf0>
    1a16:	41 5c       	subi	r20, 0xC1	; 193
    1a18:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1a:	6f 4f       	sbci	r22, 0xFF	; 255
    1a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	40 30       	cpi	r20, 0x00	; 0
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	52 07       	cpc	r21, r18
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	62 07       	cpc	r22, r18
    1a2c:	20 e4       	ldi	r18, 0x40	; 64
    1a2e:	72 07       	cpc	r23, r18
    1a30:	38 f5       	brcc	.+78     	; 0x1a80 <__pack_f+0x152>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	24 c0       	rjmp	.+72     	; 0x1a80 <__pack_f+0x152>
    1a38:	80 38       	cpi	r24, 0x80	; 128
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	7c f5       	brge	.+94     	; 0x1a9c <__pack_f+0x16e>
    1a3e:	8a 01       	movw	r16, r20
    1a40:	9b 01       	movw	r18, r22
    1a42:	0f 77       	andi	r16, 0x7F	; 127
    1a44:	10 70       	andi	r17, 0x00	; 0
    1a46:	20 70       	andi	r18, 0x00	; 0
    1a48:	30 70       	andi	r19, 0x00	; 0
    1a4a:	00 34       	cpi	r16, 0x40	; 64
    1a4c:	11 05       	cpc	r17, r1
    1a4e:	21 05       	cpc	r18, r1
    1a50:	31 05       	cpc	r19, r1
    1a52:	39 f4       	brne	.+14     	; 0x1a62 <__pack_f+0x134>
    1a54:	47 ff       	sbrs	r20, 7
    1a56:	09 c0       	rjmp	.+18     	; 0x1a6a <__pack_f+0x13c>
    1a58:	40 5c       	subi	r20, 0xC0	; 192
    1a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5c:	6f 4f       	sbci	r22, 0xFF	; 255
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <__pack_f+0x13c>
    1a62:	41 5c       	subi	r20, 0xC1	; 193
    1a64:	5f 4f       	sbci	r21, 0xFF	; 255
    1a66:	6f 4f       	sbci	r22, 0xFF	; 255
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	77 fd       	sbrc	r23, 7
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <__pack_f+0x146>
    1a6e:	81 58       	subi	r24, 0x81	; 129
    1a70:	9f 4f       	sbci	r25, 0xFF	; 255
    1a72:	06 c0       	rjmp	.+12     	; 0x1a80 <__pack_f+0x152>
    1a74:	76 95       	lsr	r23
    1a76:	67 95       	ror	r22
    1a78:	57 95       	ror	r21
    1a7a:	47 95       	ror	r20
    1a7c:	80 58       	subi	r24, 0x80	; 128
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	97 e0       	ldi	r25, 0x07	; 7
    1a82:	76 95       	lsr	r23
    1a84:	67 95       	ror	r22
    1a86:	57 95       	ror	r21
    1a88:	47 95       	ror	r20
    1a8a:	9a 95       	dec	r25
    1a8c:	d1 f7       	brne	.-12     	; 0x1a82 <__pack_f+0x154>
    1a8e:	0b c0       	rjmp	.+22     	; 0x1aa6 <__pack_f+0x178>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <__pack_f+0x172>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <__pack_f+0x178>
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	ba 01       	movw	r22, r20
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	97 95       	ror	r25
    1aaa:	99 27       	eor	r25, r25
    1aac:	97 95       	ror	r25
    1aae:	a6 2f       	mov	r26, r22
    1ab0:	af 77       	andi	r26, 0x7F	; 127
    1ab2:	e7 95       	ror	r30
    1ab4:	ee 27       	eor	r30, r30
    1ab6:	e7 95       	ror	r30
    1ab8:	86 95       	lsr	r24
    1aba:	3a 2f       	mov	r19, r26
    1abc:	39 2b       	or	r19, r25
    1abe:	28 2f       	mov	r18, r24
    1ac0:	2e 2b       	or	r18, r30
    1ac2:	84 2f       	mov	r24, r20
    1ac4:	95 2f       	mov	r25, r21
    1ac6:	a3 2f       	mov	r26, r19
    1ac8:	b2 2f       	mov	r27, r18
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	08 95       	ret

00001adc <__unpack_f>:
    1adc:	dc 01       	movw	r26, r24
    1ade:	fb 01       	movw	r30, r22
    1ae0:	4c 91       	ld	r20, X
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	5c 91       	ld	r21, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	12 96       	adiw	r26, 0x02	; 2
    1aea:	8c 91       	ld	r24, X
    1aec:	12 97       	sbiw	r26, 0x02	; 2
    1aee:	68 2f       	mov	r22, r24
    1af0:	6f 77       	andi	r22, 0x7F	; 127
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	98 2f       	mov	r25, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	99 27       	eor	r25, r25
    1afa:	99 1f       	adc	r25, r25
    1afc:	13 96       	adiw	r26, 0x03	; 3
    1afe:	2c 91       	ld	r18, X
    1b00:	13 97       	sbiw	r26, 0x03	; 3
    1b02:	82 2f       	mov	r24, r18
    1b04:	88 0f       	add	r24, r24
    1b06:	89 2b       	or	r24, r25
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	22 1f       	adc	r18, r18
    1b0c:	22 27       	eor	r18, r18
    1b0e:	22 1f       	adc	r18, r18
    1b10:	21 83       	std	Z+1, r18	; 0x01
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	39 f5       	brne	.+78     	; 0x1b64 <__unpack_f+0x88>
    1b16:	41 15       	cp	r20, r1
    1b18:	51 05       	cpc	r21, r1
    1b1a:	61 05       	cpc	r22, r1
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <__unpack_f+0x48>
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	29 c0       	rjmp	.+82     	; 0x1b76 <__unpack_f+0x9a>
    1b24:	82 e8       	ldi	r24, 0x82	; 130
    1b26:	9f ef       	ldi	r25, 0xFF	; 255
    1b28:	93 83       	std	Z+3, r25	; 0x03
    1b2a:	82 83       	std	Z+2, r24	; 0x02
    1b2c:	27 e0       	ldi	r18, 0x07	; 7
    1b2e:	44 0f       	add	r20, r20
    1b30:	55 1f       	adc	r21, r21
    1b32:	66 1f       	adc	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	2a 95       	dec	r18
    1b38:	d1 f7       	brne	.-12     	; 0x1b2e <__unpack_f+0x52>
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	80 83       	st	Z, r24
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <__unpack_f+0x76>
    1b40:	44 0f       	add	r20, r20
    1b42:	55 1f       	adc	r21, r21
    1b44:	66 1f       	adc	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	93 83       	std	Z+3, r25	; 0x03
    1b50:	82 83       	std	Z+2, r24	; 0x02
    1b52:	40 30       	cpi	r20, 0x00	; 0
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	58 07       	cpc	r21, r24
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	68 07       	cpc	r22, r24
    1b5c:	80 e4       	ldi	r24, 0x40	; 64
    1b5e:	78 07       	cpc	r23, r24
    1b60:	78 f3       	brcs	.-34     	; 0x1b40 <__unpack_f+0x64>
    1b62:	20 c0       	rjmp	.+64     	; 0x1ba4 <__unpack_f+0xc8>
    1b64:	8f 3f       	cpi	r24, 0xFF	; 255
    1b66:	91 05       	cpc	r25, r1
    1b68:	79 f4       	brne	.+30     	; 0x1b88 <__unpack_f+0xac>
    1b6a:	41 15       	cp	r20, r1
    1b6c:	51 05       	cpc	r21, r1
    1b6e:	61 05       	cpc	r22, r1
    1b70:	71 05       	cpc	r23, r1
    1b72:	19 f4       	brne	.+6      	; 0x1b7a <__unpack_f+0x9e>
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	80 83       	st	Z, r24
    1b78:	08 95       	ret
    1b7a:	64 ff       	sbrs	r22, 4
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <__unpack_f+0xa8>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 83       	st	Z, r24
    1b82:	10 c0       	rjmp	.+32     	; 0x1ba4 <__unpack_f+0xc8>
    1b84:	10 82       	st	Z, r1
    1b86:	0e c0       	rjmp	.+28     	; 0x1ba4 <__unpack_f+0xc8>
    1b88:	8f 57       	subi	r24, 0x7F	; 127
    1b8a:	90 40       	sbci	r25, 0x00	; 0
    1b8c:	93 83       	std	Z+3, r25	; 0x03
    1b8e:	82 83       	std	Z+2, r24	; 0x02
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	80 83       	st	Z, r24
    1b94:	87 e0       	ldi	r24, 0x07	; 7
    1b96:	44 0f       	add	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	8a 95       	dec	r24
    1ba0:	d1 f7       	brne	.-12     	; 0x1b96 <__unpack_f+0xba>
    1ba2:	70 64       	ori	r23, 0x40	; 64
    1ba4:	44 83       	std	Z+4, r20	; 0x04
    1ba6:	55 83       	std	Z+5, r21	; 0x05
    1ba8:	66 83       	std	Z+6, r22	; 0x06
    1baa:	77 83       	std	Z+7, r23	; 0x07
    1bac:	08 95       	ret

00001bae <__fpcmp_parts_f>:
    1bae:	cf 93       	push	r28
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	db 01       	movw	r26, r22
    1bb4:	90 81       	ld	r25, Z
    1bb6:	92 30       	cpi	r25, 0x02	; 2
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <__fpcmp_parts_f+0xe>
    1bba:	4c c0       	rjmp	.+152    	; 0x1c54 <__fpcmp_parts_f+0xa6>
    1bbc:	8c 91       	ld	r24, X
    1bbe:	82 30       	cpi	r24, 0x02	; 2
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <__fpcmp_parts_f+0x16>
    1bc2:	48 c0       	rjmp	.+144    	; 0x1c54 <__fpcmp_parts_f+0xa6>
    1bc4:	94 30       	cpi	r25, 0x04	; 4
    1bc6:	69 f4       	brne	.+26     	; 0x1be2 <__fpcmp_parts_f+0x34>
    1bc8:	21 81       	ldd	r18, Z+1	; 0x01
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	39 f4       	brne	.+14     	; 0x1bdc <__fpcmp_parts_f+0x2e>
    1bce:	11 96       	adiw	r26, 0x01	; 1
    1bd0:	8c 91       	ld	r24, X
    1bd2:	11 97       	sbiw	r26, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	82 1b       	sub	r24, r18
    1bd8:	91 09       	sbc	r25, r1
    1bda:	44 c0       	rjmp	.+136    	; 0x1c64 <__fpcmp_parts_f+0xb6>
    1bdc:	22 23       	and	r18, r18
    1bde:	d1 f1       	breq	.+116    	; 0x1c54 <__fpcmp_parts_f+0xa6>
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <__fpcmp_parts_f+0xb2>
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	21 f0       	breq	.+8      	; 0x1bee <__fpcmp_parts_f+0x40>
    1be6:	92 30       	cpi	r25, 0x02	; 2
    1be8:	41 f4       	brne	.+16     	; 0x1bfa <__fpcmp_parts_f+0x4c>
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	b1 f1       	breq	.+108    	; 0x1c5a <__fpcmp_parts_f+0xac>
    1bee:	11 96       	adiw	r26, 0x01	; 1
    1bf0:	8c 91       	ld	r24, X
    1bf2:	11 97       	sbiw	r26, 0x01	; 1
    1bf4:	88 23       	and	r24, r24
    1bf6:	a1 f1       	breq	.+104    	; 0x1c60 <__fpcmp_parts_f+0xb2>
    1bf8:	2d c0       	rjmp	.+90     	; 0x1c54 <__fpcmp_parts_f+0xa6>
    1bfa:	c1 81       	ldd	r28, Z+1	; 0x01
    1bfc:	82 30       	cpi	r24, 0x02	; 2
    1bfe:	01 f1       	breq	.+64     	; 0x1c40 <__fpcmp_parts_f+0x92>
    1c00:	11 96       	adiw	r26, 0x01	; 1
    1c02:	8c 91       	ld	r24, X
    1c04:	11 97       	sbiw	r26, 0x01	; 1
    1c06:	c8 17       	cp	r28, r24
    1c08:	d9 f4       	brne	.+54     	; 0x1c40 <__fpcmp_parts_f+0x92>
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	12 96       	adiw	r26, 0x02	; 2
    1c10:	2d 91       	ld	r18, X+
    1c12:	3c 91       	ld	r19, X
    1c14:	13 97       	sbiw	r26, 0x03	; 3
    1c16:	28 17       	cp	r18, r24
    1c18:	39 07       	cpc	r19, r25
    1c1a:	94 f0       	brlt	.+36     	; 0x1c40 <__fpcmp_parts_f+0x92>
    1c1c:	82 17       	cp	r24, r18
    1c1e:	93 07       	cpc	r25, r19
    1c20:	bc f0       	brlt	.+46     	; 0x1c50 <__fpcmp_parts_f+0xa2>
    1c22:	44 81       	ldd	r20, Z+4	; 0x04
    1c24:	55 81       	ldd	r21, Z+5	; 0x05
    1c26:	66 81       	ldd	r22, Z+6	; 0x06
    1c28:	77 81       	ldd	r23, Z+7	; 0x07
    1c2a:	14 96       	adiw	r26, 0x04	; 4
    1c2c:	8d 91       	ld	r24, X+
    1c2e:	9d 91       	ld	r25, X+
    1c30:	0d 90       	ld	r0, X+
    1c32:	bc 91       	ld	r27, X
    1c34:	a0 2d       	mov	r26, r0
    1c36:	84 17       	cp	r24, r20
    1c38:	95 07       	cpc	r25, r21
    1c3a:	a6 07       	cpc	r26, r22
    1c3c:	b7 07       	cpc	r27, r23
    1c3e:	18 f4       	brcc	.+6      	; 0x1c46 <__fpcmp_parts_f+0x98>
    1c40:	cc 23       	and	r28, r28
    1c42:	41 f0       	breq	.+16     	; 0x1c54 <__fpcmp_parts_f+0xa6>
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <__fpcmp_parts_f+0xb2>
    1c46:	48 17       	cp	r20, r24
    1c48:	59 07       	cpc	r21, r25
    1c4a:	6a 07       	cpc	r22, r26
    1c4c:	7b 07       	cpc	r23, r27
    1c4e:	28 f4       	brcc	.+10     	; 0x1c5a <__fpcmp_parts_f+0xac>
    1c50:	cc 23       	and	r28, r28
    1c52:	31 f0       	breq	.+12     	; 0x1c60 <__fpcmp_parts_f+0xb2>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <__fpcmp_parts_f+0xb6>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <__fpcmp_parts_f+0xb6>
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	9f ef       	ldi	r25, 0xFF	; 255
    1c64:	cf 91       	pop	r28
    1c66:	08 95       	ret

00001c68 <main>:
#include "Task_queue.h"
#include "Timer.h"
#include "spi.h"

int main()
{
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	2a 97       	sbiw	r28, 0x0a	; 10
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;

	uart_init();
    1c7c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <uart_init>
	task_init();
    1c80:	0e 94 39 03 	call	0x672	; 0x672 <task_init>
	timer_init();
    1c84:	0e 94 26 05 	call	0xa4c	; 0xa4c <timer_init>
	spi_init();
    1c88:	0e 94 f5 07 	call	0xfea	; 0xfea <spi_init>

	sei();
    1c8c:	78 94       	sei

	printf("$ ");
    1c8e:	0f 92       	push	r0
    1c90:	0f 92       	push	r0
    1c92:	86 e3       	ldi	r24, 0x36	; 54
    1c94:	92 e0       	ldi	r25, 0x02	; 2
    1c96:	ed b7       	in	r30, 0x3d	; 61
    1c98:	fe b7       	in	r31, 0x3e	; 62
    1c9a:	92 83       	std	Z+2, r25	; 0x02
    1c9c:	81 83       	std	Z+1, r24	; 0x01
    1c9e:	0e 94 aa 10 	call	0x2154	; 0x2154 <printf>
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0

	while(1) {
		cli();
    1ca6:	f8 94       	cli
		tag = task_delete(&task);
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	0e 94 82 03 	call	0x704	; 0x704 <task_delete>
		sei();
    1cb0:	78 94       	sei
		if (tag)
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	c1 f3       	breq	.-16     	; 0x1ca6 <main+0x3e>
			(*(task.fun))(task.arg);
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	ce 01       	movw	r24, r28
    1cbc:	03 96       	adiw	r24, 0x03	; 3
    1cbe:	19 95       	eicall
    1cc0:	f2 cf       	rjmp	.-28     	; 0x1ca6 <main+0x3e>

00001cc2 <__divmodhi4>:
    1cc2:	97 fb       	bst	r25, 7
    1cc4:	09 2e       	mov	r0, r25
    1cc6:	07 26       	eor	r0, r23
    1cc8:	0a d0       	rcall	.+20     	; 0x1cde <__divmodhi4_neg1>
    1cca:	77 fd       	sbrc	r23, 7
    1ccc:	04 d0       	rcall	.+8      	; 0x1cd6 <__divmodhi4_neg2>
    1cce:	0c d0       	rcall	.+24     	; 0x1ce8 <__udivmodhi4>
    1cd0:	06 d0       	rcall	.+12     	; 0x1cde <__divmodhi4_neg1>
    1cd2:	00 20       	and	r0, r0
    1cd4:	1a f4       	brpl	.+6      	; 0x1cdc <__divmodhi4_exit>

00001cd6 <__divmodhi4_neg2>:
    1cd6:	70 95       	com	r23
    1cd8:	61 95       	neg	r22
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255

00001cdc <__divmodhi4_exit>:
    1cdc:	08 95       	ret

00001cde <__divmodhi4_neg1>:
    1cde:	f6 f7       	brtc	.-4      	; 0x1cdc <__divmodhi4_exit>
    1ce0:	90 95       	com	r25
    1ce2:	81 95       	neg	r24
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	08 95       	ret

00001ce8 <__udivmodhi4>:
    1ce8:	aa 1b       	sub	r26, r26
    1cea:	bb 1b       	sub	r27, r27
    1cec:	51 e1       	ldi	r21, 0x11	; 17
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <__udivmodhi4_ep>

00001cf0 <__udivmodhi4_loop>:
    1cf0:	aa 1f       	adc	r26, r26
    1cf2:	bb 1f       	adc	r27, r27
    1cf4:	a6 17       	cp	r26, r22
    1cf6:	b7 07       	cpc	r27, r23
    1cf8:	10 f0       	brcs	.+4      	; 0x1cfe <__udivmodhi4_ep>
    1cfa:	a6 1b       	sub	r26, r22
    1cfc:	b7 0b       	sbc	r27, r23

00001cfe <__udivmodhi4_ep>:
    1cfe:	88 1f       	adc	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	5a 95       	dec	r21
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__udivmodhi4_loop>
    1d06:	80 95       	com	r24
    1d08:	90 95       	com	r25
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	08 95       	ret

00001d10 <__prologue_saves__>:
    1d10:	2f 92       	push	r2
    1d12:	3f 92       	push	r3
    1d14:	4f 92       	push	r4
    1d16:	5f 92       	push	r5
    1d18:	6f 92       	push	r6
    1d1a:	7f 92       	push	r7
    1d1c:	8f 92       	push	r8
    1d1e:	9f 92       	push	r9
    1d20:	af 92       	push	r10
    1d22:	bf 92       	push	r11
    1d24:	cf 92       	push	r12
    1d26:	df 92       	push	r13
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	ca 1b       	sub	r28, r26
    1d3a:	db 0b       	sbc	r29, r27
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	19 94       	eijmp

00001d48 <__epilogue_restores__>:
    1d48:	2a 88       	ldd	r2, Y+18	; 0x12
    1d4a:	39 88       	ldd	r3, Y+17	; 0x11
    1d4c:	48 88       	ldd	r4, Y+16	; 0x10
    1d4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d5e:	df 80       	ldd	r13, Y+7	; 0x07
    1d60:	ee 80       	ldd	r14, Y+6	; 0x06
    1d62:	fd 80       	ldd	r15, Y+5	; 0x05
    1d64:	0c 81       	ldd	r16, Y+4	; 0x04
    1d66:	1b 81       	ldd	r17, Y+3	; 0x03
    1d68:	aa 81       	ldd	r26, Y+2	; 0x02
    1d6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d6c:	ce 0f       	add	r28, r30
    1d6e:	d1 1d       	adc	r29, r1
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	ed 01       	movw	r28, r26
    1d7c:	08 95       	ret

00001d7e <malloc>:
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	ac 01       	movw	r20, r24
    1d84:	82 30       	cpi	r24, 0x02	; 2
    1d86:	91 05       	cpc	r25, r1
    1d88:	10 f4       	brcc	.+4      	; 0x1d8e <malloc+0x10>
    1d8a:	42 e0       	ldi	r20, 0x02	; 2
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	e0 91 9c 05 	lds	r30, 0x059C
    1d92:	f0 91 9d 05 	lds	r31, 0x059D
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	24 c0       	rjmp	.+72     	; 0x1de8 <malloc+0x6a>
    1da0:	80 81       	ld	r24, Z
    1da2:	91 81       	ldd	r25, Z+1	; 0x01
    1da4:	84 17       	cp	r24, r20
    1da6:	95 07       	cpc	r25, r21
    1da8:	d0 f0       	brcs	.+52     	; 0x1dde <malloc+0x60>
    1daa:	84 17       	cp	r24, r20
    1dac:	95 07       	cpc	r25, r21
    1dae:	71 f4       	brne	.+28     	; 0x1dcc <malloc+0x4e>
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	10 97       	sbiw	r26, 0x00	; 0
    1db6:	29 f0       	breq	.+10     	; 0x1dc2 <malloc+0x44>
    1db8:	13 96       	adiw	r26, 0x03	; 3
    1dba:	9c 93       	st	X, r25
    1dbc:	8e 93       	st	-X, r24
    1dbe:	12 97       	sbiw	r26, 0x02	; 2
    1dc0:	2c c0       	rjmp	.+88     	; 0x1e1a <malloc+0x9c>
    1dc2:	90 93 9d 05 	sts	0x059D, r25
    1dc6:	80 93 9c 05 	sts	0x059C, r24
    1dca:	27 c0       	rjmp	.+78     	; 0x1e1a <malloc+0x9c>
    1dcc:	21 15       	cp	r18, r1
    1dce:	31 05       	cpc	r19, r1
    1dd0:	19 f0       	breq	.+6      	; 0x1dd8 <malloc+0x5a>
    1dd2:	82 17       	cp	r24, r18
    1dd4:	93 07       	cpc	r25, r19
    1dd6:	18 f4       	brcc	.+6      	; 0x1dde <malloc+0x60>
    1dd8:	9c 01       	movw	r18, r24
    1dda:	bd 01       	movw	r22, r26
    1ddc:	ef 01       	movw	r28, r30
    1dde:	92 81       	ldd	r25, Z+2	; 0x02
    1de0:	83 81       	ldd	r24, Z+3	; 0x03
    1de2:	df 01       	movw	r26, r30
    1de4:	e9 2f       	mov	r30, r25
    1de6:	f8 2f       	mov	r31, r24
    1de8:	30 97       	sbiw	r30, 0x00	; 0
    1dea:	d1 f6       	brne	.-76     	; 0x1da0 <malloc+0x22>
    1dec:	21 15       	cp	r18, r1
    1dee:	31 05       	cpc	r19, r1
    1df0:	f9 f0       	breq	.+62     	; 0x1e30 <malloc+0xb2>
    1df2:	c9 01       	movw	r24, r18
    1df4:	84 1b       	sub	r24, r20
    1df6:	95 0b       	sbc	r25, r21
    1df8:	84 30       	cpi	r24, 0x04	; 4
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	80 f4       	brcc	.+32     	; 0x1e1e <malloc+0xa0>
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	61 15       	cp	r22, r1
    1e04:	71 05       	cpc	r23, r1
    1e06:	21 f0       	breq	.+8      	; 0x1e10 <malloc+0x92>
    1e08:	fb 01       	movw	r30, r22
    1e0a:	93 83       	std	Z+3, r25	; 0x03
    1e0c:	82 83       	std	Z+2, r24	; 0x02
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <malloc+0x9a>
    1e10:	90 93 9d 05 	sts	0x059D, r25
    1e14:	80 93 9c 05 	sts	0x059C, r24
    1e18:	fe 01       	movw	r30, r28
    1e1a:	32 96       	adiw	r30, 0x02	; 2
    1e1c:	42 c0       	rjmp	.+132    	; 0x1ea2 <malloc+0x124>
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e8 0f       	add	r30, r24
    1e22:	f9 1f       	adc	r31, r25
    1e24:	41 93       	st	Z+, r20
    1e26:	51 93       	st	Z+, r21
    1e28:	02 97       	sbiw	r24, 0x02	; 2
    1e2a:	99 83       	std	Y+1, r25	; 0x01
    1e2c:	88 83       	st	Y, r24
    1e2e:	39 c0       	rjmp	.+114    	; 0x1ea2 <malloc+0x124>
    1e30:	80 91 9a 05 	lds	r24, 0x059A
    1e34:	90 91 9b 05 	lds	r25, 0x059B
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	41 f4       	brne	.+16     	; 0x1e4c <malloc+0xce>
    1e3c:	80 91 5b 04 	lds	r24, 0x045B
    1e40:	90 91 5c 04 	lds	r25, 0x045C
    1e44:	90 93 9b 05 	sts	0x059B, r25
    1e48:	80 93 9a 05 	sts	0x059A, r24
    1e4c:	20 91 59 04 	lds	r18, 0x0459
    1e50:	30 91 5a 04 	lds	r19, 0x045A
    1e54:	21 15       	cp	r18, r1
    1e56:	31 05       	cpc	r19, r1
    1e58:	41 f4       	brne	.+16     	; 0x1e6a <malloc+0xec>
    1e5a:	2d b7       	in	r18, 0x3d	; 61
    1e5c:	3e b7       	in	r19, 0x3e	; 62
    1e5e:	80 91 5d 04 	lds	r24, 0x045D
    1e62:	90 91 5e 04 	lds	r25, 0x045E
    1e66:	28 1b       	sub	r18, r24
    1e68:	39 0b       	sbc	r19, r25
    1e6a:	e0 91 9a 05 	lds	r30, 0x059A
    1e6e:	f0 91 9b 05 	lds	r31, 0x059B
    1e72:	e2 17       	cp	r30, r18
    1e74:	f3 07       	cpc	r31, r19
    1e76:	98 f4       	brcc	.+38     	; 0x1e9e <malloc+0x120>
    1e78:	2e 1b       	sub	r18, r30
    1e7a:	3f 0b       	sbc	r19, r31
    1e7c:	24 17       	cp	r18, r20
    1e7e:	35 07       	cpc	r19, r21
    1e80:	70 f0       	brcs	.+28     	; 0x1e9e <malloc+0x120>
    1e82:	ca 01       	movw	r24, r20
    1e84:	02 96       	adiw	r24, 0x02	; 2
    1e86:	28 17       	cp	r18, r24
    1e88:	39 07       	cpc	r19, r25
    1e8a:	48 f0       	brcs	.+18     	; 0x1e9e <malloc+0x120>
    1e8c:	8e 0f       	add	r24, r30
    1e8e:	9f 1f       	adc	r25, r31
    1e90:	90 93 9b 05 	sts	0x059B, r25
    1e94:	80 93 9a 05 	sts	0x059A, r24
    1e98:	41 93       	st	Z+, r20
    1e9a:	51 93       	st	Z+, r21
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <malloc+0x124>
    1e9e:	e0 e0       	ldi	r30, 0x00	; 0
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	cf 01       	movw	r24, r30
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <free>:
    1eaa:	0f 93       	push	r16
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	9c 01       	movw	r18, r24
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <free+0x10>
    1eb8:	8c c0       	rjmp	.+280    	; 0x1fd2 <free+0x128>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	12 97       	sbiw	r26, 0x02	; 2
    1ebe:	13 96       	adiw	r26, 0x03	; 3
    1ec0:	1c 92       	st	X, r1
    1ec2:	1e 92       	st	-X, r1
    1ec4:	12 97       	sbiw	r26, 0x02	; 2
    1ec6:	60 91 9c 05 	lds	r22, 0x059C
    1eca:	70 91 9d 05 	lds	r23, 0x059D
    1ece:	61 15       	cp	r22, r1
    1ed0:	71 05       	cpc	r23, r1
    1ed2:	89 f4       	brne	.+34     	; 0x1ef6 <free+0x4c>
    1ed4:	8d 91       	ld	r24, X+
    1ed6:	9c 91       	ld	r25, X
    1ed8:	11 97       	sbiw	r26, 0x01	; 1
    1eda:	82 0f       	add	r24, r18
    1edc:	93 1f       	adc	r25, r19
    1ede:	20 91 9a 05 	lds	r18, 0x059A
    1ee2:	30 91 9b 05 	lds	r19, 0x059B
    1ee6:	28 17       	cp	r18, r24
    1ee8:	39 07       	cpc	r19, r25
    1eea:	69 f5       	brne	.+90     	; 0x1f46 <free+0x9c>
    1eec:	b0 93 9b 05 	sts	0x059B, r27
    1ef0:	a0 93 9a 05 	sts	0x059A, r26
    1ef4:	6e c0       	rjmp	.+220    	; 0x1fd2 <free+0x128>
    1ef6:	fb 01       	movw	r30, r22
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <free+0x56>
    1efe:	fc 01       	movw	r30, r24
    1f00:	ea 17       	cp	r30, r26
    1f02:	fb 07       	cpc	r31, r27
    1f04:	30 f4       	brcc	.+12     	; 0x1f12 <free+0x68>
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	af 01       	movw	r20, r30
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	b9 f7       	brne	.-18     	; 0x1efe <free+0x54>
    1f10:	1f c0       	rjmp	.+62     	; 0x1f50 <free+0xa6>
    1f12:	e9 01       	movw	r28, r18
    1f14:	22 97       	sbiw	r28, 0x02	; 2
    1f16:	fb 83       	std	Y+3, r31	; 0x03
    1f18:	ea 83       	std	Y+2, r30	; 0x02
    1f1a:	08 81       	ld	r16, Y
    1f1c:	19 81       	ldd	r17, Y+1	; 0x01
    1f1e:	c9 01       	movw	r24, r18
    1f20:	80 0f       	add	r24, r16
    1f22:	91 1f       	adc	r25, r17
    1f24:	8e 17       	cp	r24, r30
    1f26:	9f 07       	cpc	r25, r31
    1f28:	59 f4       	brne	.+22     	; 0x1f40 <free+0x96>
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	80 0f       	add	r24, r16
    1f30:	91 1f       	adc	r25, r17
    1f32:	02 96       	adiw	r24, 0x02	; 2
    1f34:	99 83       	std	Y+1, r25	; 0x01
    1f36:	88 83       	st	Y, r24
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	93 81       	ldd	r25, Z+3	; 0x03
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	41 15       	cp	r20, r1
    1f42:	51 05       	cpc	r21, r1
    1f44:	29 f4       	brne	.+10     	; 0x1f50 <free+0xa6>
    1f46:	b0 93 9d 05 	sts	0x059D, r27
    1f4a:	a0 93 9c 05 	sts	0x059C, r26
    1f4e:	41 c0       	rjmp	.+130    	; 0x1fd2 <free+0x128>
    1f50:	fa 01       	movw	r30, r20
    1f52:	b3 83       	std	Z+3, r27	; 0x03
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	c1 91       	ld	r28, Z+
    1f58:	d1 91       	ld	r29, Z+
    1f5a:	ec 0f       	add	r30, r28
    1f5c:	fd 1f       	adc	r31, r29
    1f5e:	ae 17       	cp	r26, r30
    1f60:	bf 07       	cpc	r27, r31
    1f62:	81 f4       	brne	.+32     	; 0x1f84 <free+0xda>
    1f64:	f9 01       	movw	r30, r18
    1f66:	92 91       	ld	r25, -Z
    1f68:	82 91       	ld	r24, -Z
    1f6a:	8c 0f       	add	r24, r28
    1f6c:	9d 1f       	adc	r25, r29
    1f6e:	02 96       	adiw	r24, 0x02	; 2
    1f70:	da 01       	movw	r26, r20
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	9c 93       	st	X, r25
    1f76:	8e 93       	st	-X, r24
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	13 96       	adiw	r26, 0x03	; 3
    1f7e:	9c 93       	st	X, r25
    1f80:	8e 93       	st	-X, r24
    1f82:	12 97       	sbiw	r26, 0x02	; 2
    1f84:	e0 e0       	ldi	r30, 0x00	; 0
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <free+0xe4>
    1f8a:	fb 01       	movw	r30, r22
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	db 01       	movw	r26, r22
    1f90:	12 96       	adiw	r26, 0x02	; 2
    1f92:	8d 91       	ld	r24, X+
    1f94:	9c 91       	ld	r25, X
    1f96:	13 97       	sbiw	r26, 0x03	; 3
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	b9 f7       	brne	.-18     	; 0x1f8a <free+0xe0>
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	02 96       	adiw	r24, 0x02	; 2
    1fa0:	2d 91       	ld	r18, X+
    1fa2:	3c 91       	ld	r19, X
    1fa4:	11 97       	sbiw	r26, 0x01	; 1
    1fa6:	82 0f       	add	r24, r18
    1fa8:	93 1f       	adc	r25, r19
    1faa:	20 91 9a 05 	lds	r18, 0x059A
    1fae:	30 91 9b 05 	lds	r19, 0x059B
    1fb2:	28 17       	cp	r18, r24
    1fb4:	39 07       	cpc	r19, r25
    1fb6:	69 f4       	brne	.+26     	; 0x1fd2 <free+0x128>
    1fb8:	30 97       	sbiw	r30, 0x00	; 0
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <free+0x11c>
    1fbc:	10 92 9d 05 	sts	0x059D, r1
    1fc0:	10 92 9c 05 	sts	0x059C, r1
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <free+0x120>
    1fc6:	13 82       	std	Z+3, r1	; 0x03
    1fc8:	12 82       	std	Z+2, r1	; 0x02
    1fca:	70 93 9b 05 	sts	0x059B, r23
    1fce:	60 93 9a 05 	sts	0x059A, r22
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <atoi>:
    1fdc:	fc 01       	movw	r30, r24
    1fde:	88 27       	eor	r24, r24
    1fe0:	99 27       	eor	r25, r25
    1fe2:	e8 94       	clt
    1fe4:	21 91       	ld	r18, Z+
    1fe6:	20 32       	cpi	r18, 0x20	; 32
    1fe8:	e9 f3       	breq	.-6      	; 0x1fe4 <atoi+0x8>
    1fea:	29 30       	cpi	r18, 0x09	; 9
    1fec:	10 f0       	brcs	.+4      	; 0x1ff2 <atoi+0x16>
    1fee:	2e 30       	cpi	r18, 0x0E	; 14
    1ff0:	c8 f3       	brcs	.-14     	; 0x1fe4 <atoi+0x8>
    1ff2:	2b 32       	cpi	r18, 0x2B	; 43
    1ff4:	41 f0       	breq	.+16     	; 0x2006 <atoi+0x2a>
    1ff6:	2d 32       	cpi	r18, 0x2D	; 45
    1ff8:	39 f4       	brne	.+14     	; 0x2008 <atoi+0x2c>
    1ffa:	68 94       	set
    1ffc:	04 c0       	rjmp	.+8      	; 0x2006 <atoi+0x2a>
    1ffe:	0e 94 48 10 	call	0x2090	; 0x2090 <__mulhi_const_10>
    2002:	82 0f       	add	r24, r18
    2004:	91 1d       	adc	r25, r1
    2006:	21 91       	ld	r18, Z+
    2008:	20 53       	subi	r18, 0x30	; 48
    200a:	2a 30       	cpi	r18, 0x0A	; 10
    200c:	c0 f3       	brcs	.-16     	; 0x1ffe <atoi+0x22>
    200e:	1e f4       	brtc	.+6      	; 0x2016 <atoi+0x3a>
    2010:	90 95       	com	r25
    2012:	81 95       	neg	r24
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	08 95       	ret

00002018 <strtok>:
    2018:	4b e6       	ldi	r20, 0x6B	; 107
    201a:	54 e0       	ldi	r21, 0x04	; 4
    201c:	0e 94 21 10 	call	0x2042	; 0x2042 <strtok_r>
    2020:	08 95       	ret

00002022 <strcmp>:
    2022:	fb 01       	movw	r30, r22
    2024:	dc 01       	movw	r26, r24
    2026:	8d 91       	ld	r24, X+
    2028:	01 90       	ld	r0, Z+
    202a:	80 19       	sub	r24, r0
    202c:	01 10       	cpse	r0, r1
    202e:	d9 f3       	breq	.-10     	; 0x2026 <strcmp+0x4>
    2030:	99 0b       	sbc	r25, r25
    2032:	08 95       	ret

00002034 <strcpy>:
    2034:	fb 01       	movw	r30, r22
    2036:	dc 01       	movw	r26, r24
    2038:	01 90       	ld	r0, Z+
    203a:	0d 92       	st	X+, r0
    203c:	00 20       	and	r0, r0
    203e:	e1 f7       	brne	.-8      	; 0x2038 <strcpy+0x4>
    2040:	08 95       	ret

00002042 <strtok_r>:
    2042:	fa 01       	movw	r30, r20
    2044:	a1 91       	ld	r26, Z+
    2046:	b0 81       	ld	r27, Z
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	19 f4       	brne	.+6      	; 0x2052 <strtok_r+0x10>
    204c:	10 97       	sbiw	r26, 0x00	; 0
    204e:	e1 f0       	breq	.+56     	; 0x2088 <strtok_r+0x46>
    2050:	cd 01       	movw	r24, r26
    2052:	dc 01       	movw	r26, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0d 90       	ld	r0, X+
    2058:	00 20       	and	r0, r0
    205a:	11 f4       	brne	.+4      	; 0x2060 <strtok_r+0x1e>
    205c:	c0 01       	movw	r24, r0
    205e:	13 c0       	rjmp	.+38     	; 0x2086 <strtok_r+0x44>
    2060:	fb 01       	movw	r30, r22
    2062:	21 91       	ld	r18, Z+
    2064:	22 23       	and	r18, r18
    2066:	19 f0       	breq	.+6      	; 0x206e <strtok_r+0x2c>
    2068:	20 15       	cp	r18, r0
    206a:	d9 f7       	brne	.-10     	; 0x2062 <strtok_r+0x20>
    206c:	f3 cf       	rjmp	.-26     	; 0x2054 <strtok_r+0x12>
    206e:	fb 01       	movw	r30, r22
    2070:	21 91       	ld	r18, Z+
    2072:	20 15       	cp	r18, r0
    2074:	19 f4       	brne	.+6      	; 0x207c <strtok_r+0x3a>
    2076:	1e 92       	st	-X, r1
    2078:	11 96       	adiw	r26, 0x01	; 1
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <strtok_r+0x46>
    207c:	22 23       	and	r18, r18
    207e:	c1 f7       	brne	.-16     	; 0x2070 <strtok_r+0x2e>
    2080:	0d 90       	ld	r0, X+
    2082:	00 20       	and	r0, r0
    2084:	a1 f7       	brne	.-24     	; 0x206e <strtok_r+0x2c>
    2086:	d0 01       	movw	r26, r0
    2088:	fa 01       	movw	r30, r20
    208a:	a1 93       	st	Z+, r26
    208c:	b0 83       	st	Z, r27
    208e:	08 95       	ret

00002090 <__mulhi_const_10>:
    2090:	7a e0       	ldi	r23, 0x0A	; 10
    2092:	97 9f       	mul	r25, r23
    2094:	90 2d       	mov	r25, r0
    2096:	87 9f       	mul	r24, r23
    2098:	80 2d       	mov	r24, r0
    209a:	91 0d       	add	r25, r1
    209c:	11 24       	eor	r1, r1
    209e:	08 95       	ret

000020a0 <fgets>:
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	8c 01       	movw	r16, r24
    20b2:	6a 01       	movw	r12, r20
    20b4:	fa 01       	movw	r30, r20
    20b6:	83 81       	ldd	r24, Z+3	; 0x03
    20b8:	80 ff       	sbrs	r24, 0
    20ba:	1a c0       	rjmp	.+52     	; 0x20f0 <fgets+0x50>
    20bc:	16 16       	cp	r1, r22
    20be:	17 06       	cpc	r1, r23
    20c0:	bc f4       	brge	.+46     	; 0x20f0 <fgets+0x50>
    20c2:	7b 01       	movw	r14, r22
    20c4:	e8 01       	movw	r28, r16
    20c6:	0e c0       	rjmp	.+28     	; 0x20e4 <fgets+0x44>
    20c8:	c6 01       	movw	r24, r12
    20ca:	0e 94 3d 13 	call	0x267a	; 0x267a <fgetc>
    20ce:	ff ef       	ldi	r31, 0xFF	; 255
    20d0:	8f 3f       	cpi	r24, 0xFF	; 255
    20d2:	9f 07       	cpc	r25, r31
    20d4:	69 f0       	breq	.+26     	; 0x20f0 <fgets+0x50>
    20d6:	89 93       	st	Y+, r24
    20d8:	08 94       	sec
    20da:	e1 08       	sbc	r14, r1
    20dc:	f1 08       	sbc	r15, r1
    20de:	8a 30       	cpi	r24, 0x0A	; 10
    20e0:	91 05       	cpc	r25, r1
    20e2:	21 f0       	breq	.+8      	; 0x20ec <fgets+0x4c>
    20e4:	21 e0       	ldi	r18, 0x01	; 1
    20e6:	e2 16       	cp	r14, r18
    20e8:	f1 04       	cpc	r15, r1
    20ea:	71 f7       	brne	.-36     	; 0x20c8 <fgets+0x28>
    20ec:	18 82       	st	Y, r1
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <fgets+0x54>
    20f0:	00 e0       	ldi	r16, 0x00	; 0
    20f2:	10 e0       	ldi	r17, 0x00	; 0
    20f4:	c8 01       	movw	r24, r16
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	ff 90       	pop	r15
    2100:	ef 90       	pop	r14
    2102:	df 90       	pop	r13
    2104:	cf 90       	pop	r12
    2106:	08 95       	ret

00002108 <gets>:
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	8c 01       	movw	r16, r24
    2112:	e0 91 9e 05 	lds	r30, 0x059E
    2116:	f0 91 9f 05 	lds	r31, 0x059F
    211a:	83 81       	ldd	r24, Z+3	; 0x03
    211c:	80 ff       	sbrs	r24, 0
    211e:	12 c0       	rjmp	.+36     	; 0x2144 <gets+0x3c>
    2120:	e8 01       	movw	r28, r16
    2122:	80 91 9e 05 	lds	r24, 0x059E
    2126:	90 91 9f 05 	lds	r25, 0x059F
    212a:	0e 94 3d 13 	call	0x267a	; 0x267a <fgetc>
    212e:	2f ef       	ldi	r18, 0xFF	; 255
    2130:	8f 3f       	cpi	r24, 0xFF	; 255
    2132:	92 07       	cpc	r25, r18
    2134:	39 f0       	breq	.+14     	; 0x2144 <gets+0x3c>
    2136:	89 93       	st	Y+, r24
    2138:	8a 30       	cpi	r24, 0x0A	; 10
    213a:	91 05       	cpc	r25, r1
    213c:	91 f7       	brne	.-28     	; 0x2122 <gets+0x1a>
    213e:	21 97       	sbiw	r28, 0x01	; 1
    2140:	18 82       	st	Y, r1
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <gets+0x40>
    2144:	00 e0       	ldi	r16, 0x00	; 0
    2146:	10 e0       	ldi	r17, 0x00	; 0
    2148:	c8 01       	movw	r24, r16
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	08 95       	ret

00002154 <printf>:
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	fe 01       	movw	r30, r28
    215e:	36 96       	adiw	r30, 0x06	; 6
    2160:	61 91       	ld	r22, Z+
    2162:	71 91       	ld	r23, Z+
    2164:	80 91 a0 05 	lds	r24, 0x05A0
    2168:	90 91 a1 05 	lds	r25, 0x05A1
    216c:	af 01       	movw	r20, r30
    216e:	0e 94 20 11 	call	0x2240	; 0x2240 <vfprintf>
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <putchar>:
    2178:	60 91 a0 05 	lds	r22, 0x05A0
    217c:	70 91 a1 05 	lds	r23, 0x05A1
    2180:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    2184:	08 95       	ret

00002186 <puts>:
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	8c 01       	movw	r16, r24
    2190:	e0 91 a0 05 	lds	r30, 0x05A0
    2194:	f0 91 a1 05 	lds	r31, 0x05A1
    2198:	83 81       	ldd	r24, Z+3	; 0x03
    219a:	81 ff       	sbrs	r24, 1
    219c:	1a c0       	rjmp	.+52     	; 0x21d2 <puts+0x4c>
    219e:	c0 e0       	ldi	r28, 0x00	; 0
    21a0:	d0 e0       	ldi	r29, 0x00	; 0
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <puts+0x28>
    21a4:	19 95       	eicall
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	11 f0       	breq	.+4      	; 0x21ae <puts+0x28>
    21aa:	cf ef       	ldi	r28, 0xFF	; 255
    21ac:	df ef       	ldi	r29, 0xFF	; 255
    21ae:	f8 01       	movw	r30, r16
    21b0:	81 91       	ld	r24, Z+
    21b2:	8f 01       	movw	r16, r30
    21b4:	60 91 a0 05 	lds	r22, 0x05A0
    21b8:	70 91 a1 05 	lds	r23, 0x05A1
    21bc:	db 01       	movw	r26, r22
    21be:	18 96       	adiw	r26, 0x08	; 8
    21c0:	ed 91       	ld	r30, X+
    21c2:	fc 91       	ld	r31, X
    21c4:	19 97       	sbiw	r26, 0x09	; 9
    21c6:	88 23       	and	r24, r24
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <puts+0x1e>
    21ca:	8a e0       	ldi	r24, 0x0A	; 10
    21cc:	19 95       	eicall
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	11 f0       	breq	.+4      	; 0x21d6 <puts+0x50>
    21d2:	cf ef       	ldi	r28, 0xFF	; 255
    21d4:	df ef       	ldi	r29, 0xFF	; 255
    21d6:	ce 01       	movw	r24, r28
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	08 95       	ret

000021e2 <sprintf>:
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	2e 97       	sbiw	r28, 0x0e	; 14
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	0e 89       	ldd	r16, Y+22	; 0x16
    21fc:	1f 89       	ldd	r17, Y+23	; 0x17
    21fe:	86 e0       	ldi	r24, 0x06	; 6
    2200:	8c 83       	std	Y+4, r24	; 0x04
    2202:	1a 83       	std	Y+2, r17	; 0x02
    2204:	09 83       	std	Y+1, r16	; 0x01
    2206:	8f ef       	ldi	r24, 0xFF	; 255
    2208:	9f e7       	ldi	r25, 0x7F	; 127
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	ae 01       	movw	r20, r28
    2210:	46 5e       	subi	r20, 0xE6	; 230
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	ce 01       	movw	r24, r28
    2216:	01 96       	adiw	r24, 0x01	; 1
    2218:	68 8d       	ldd	r22, Y+24	; 0x18
    221a:	79 8d       	ldd	r23, Y+25	; 0x19
    221c:	0e 94 20 11 	call	0x2240	; 0x2240 <vfprintf>
    2220:	ef 81       	ldd	r30, Y+7	; 0x07
    2222:	f8 85       	ldd	r31, Y+8	; 0x08
    2224:	e0 0f       	add	r30, r16
    2226:	f1 1f       	adc	r31, r17
    2228:	10 82       	st	Z, r1
    222a:	2e 96       	adiw	r28, 0x0e	; 14
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <vfprintf>:
    2240:	2f 92       	push	r2
    2242:	3f 92       	push	r3
    2244:	4f 92       	push	r4
    2246:	5f 92       	push	r5
    2248:	6f 92       	push	r6
    224a:	7f 92       	push	r7
    224c:	8f 92       	push	r8
    224e:	9f 92       	push	r9
    2250:	af 92       	push	r10
    2252:	bf 92       	push	r11
    2254:	cf 92       	push	r12
    2256:	df 92       	push	r13
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	2d 97       	sbiw	r28, 0x0d	; 13
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	3c 01       	movw	r6, r24
    2276:	7d 87       	std	Y+13, r23	; 0x0d
    2278:	6c 87       	std	Y+12, r22	; 0x0c
    227a:	5a 01       	movw	r10, r20
    227c:	fc 01       	movw	r30, r24
    227e:	17 82       	std	Z+7, r1	; 0x07
    2280:	16 82       	std	Z+6, r1	; 0x06
    2282:	83 81       	ldd	r24, Z+3	; 0x03
    2284:	81 ff       	sbrs	r24, 1
    2286:	c8 c1       	rjmp	.+912    	; 0x2618 <vfprintf+0x3d8>
    2288:	2e 01       	movw	r4, r28
    228a:	08 94       	sec
    228c:	41 1c       	adc	r4, r1
    228e:	51 1c       	adc	r5, r1
    2290:	f3 01       	movw	r30, r6
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	ec 85       	ldd	r30, Y+12	; 0x0c
    2296:	fd 85       	ldd	r31, Y+13	; 0x0d
    2298:	93 fd       	sbrc	r25, 3
    229a:	85 91       	lpm	r24, Z+
    229c:	93 ff       	sbrs	r25, 3
    229e:	81 91       	ld	r24, Z+
    22a0:	fd 87       	std	Y+13, r31	; 0x0d
    22a2:	ec 87       	std	Y+12, r30	; 0x0c
    22a4:	88 23       	and	r24, r24
    22a6:	09 f4       	brne	.+2      	; 0x22aa <vfprintf+0x6a>
    22a8:	b3 c1       	rjmp	.+870    	; 0x2610 <vfprintf+0x3d0>
    22aa:	85 32       	cpi	r24, 0x25	; 37
    22ac:	41 f4       	brne	.+16     	; 0x22be <vfprintf+0x7e>
    22ae:	93 fd       	sbrc	r25, 3
    22b0:	85 91       	lpm	r24, Z+
    22b2:	93 ff       	sbrs	r25, 3
    22b4:	81 91       	ld	r24, Z+
    22b6:	fd 87       	std	Y+13, r31	; 0x0d
    22b8:	ec 87       	std	Y+12, r30	; 0x0c
    22ba:	85 32       	cpi	r24, 0x25	; 37
    22bc:	29 f4       	brne	.+10     	; 0x22c8 <vfprintf+0x88>
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	b3 01       	movw	r22, r6
    22c2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    22c6:	e4 cf       	rjmp	.-56     	; 0x2290 <vfprintf+0x50>
    22c8:	ff 24       	eor	r15, r15
    22ca:	ee 24       	eor	r14, r14
    22cc:	10 e0       	ldi	r17, 0x00	; 0
    22ce:	10 32       	cpi	r17, 0x20	; 32
    22d0:	b0 f4       	brcc	.+44     	; 0x22fe <vfprintf+0xbe>
    22d2:	8b 32       	cpi	r24, 0x2B	; 43
    22d4:	69 f0       	breq	.+26     	; 0x22f0 <vfprintf+0xb0>
    22d6:	8c 32       	cpi	r24, 0x2C	; 44
    22d8:	28 f4       	brcc	.+10     	; 0x22e4 <vfprintf+0xa4>
    22da:	80 32       	cpi	r24, 0x20	; 32
    22dc:	51 f0       	breq	.+20     	; 0x22f2 <vfprintf+0xb2>
    22de:	83 32       	cpi	r24, 0x23	; 35
    22e0:	71 f4       	brne	.+28     	; 0x22fe <vfprintf+0xbe>
    22e2:	0b c0       	rjmp	.+22     	; 0x22fa <vfprintf+0xba>
    22e4:	8d 32       	cpi	r24, 0x2D	; 45
    22e6:	39 f0       	breq	.+14     	; 0x22f6 <vfprintf+0xb6>
    22e8:	80 33       	cpi	r24, 0x30	; 48
    22ea:	49 f4       	brne	.+18     	; 0x22fe <vfprintf+0xbe>
    22ec:	11 60       	ori	r17, 0x01	; 1
    22ee:	2c c0       	rjmp	.+88     	; 0x2348 <vfprintf+0x108>
    22f0:	12 60       	ori	r17, 0x02	; 2
    22f2:	14 60       	ori	r17, 0x04	; 4
    22f4:	29 c0       	rjmp	.+82     	; 0x2348 <vfprintf+0x108>
    22f6:	18 60       	ori	r17, 0x08	; 8
    22f8:	27 c0       	rjmp	.+78     	; 0x2348 <vfprintf+0x108>
    22fa:	10 61       	ori	r17, 0x10	; 16
    22fc:	25 c0       	rjmp	.+74     	; 0x2348 <vfprintf+0x108>
    22fe:	17 fd       	sbrc	r17, 7
    2300:	2e c0       	rjmp	.+92     	; 0x235e <vfprintf+0x11e>
    2302:	28 2f       	mov	r18, r24
    2304:	20 53       	subi	r18, 0x30	; 48
    2306:	2a 30       	cpi	r18, 0x0A	; 10
    2308:	98 f4       	brcc	.+38     	; 0x2330 <vfprintf+0xf0>
    230a:	16 ff       	sbrs	r17, 6
    230c:	08 c0       	rjmp	.+16     	; 0x231e <vfprintf+0xde>
    230e:	8f 2d       	mov	r24, r15
    2310:	88 0f       	add	r24, r24
    2312:	f8 2e       	mov	r15, r24
    2314:	ff 0c       	add	r15, r15
    2316:	ff 0c       	add	r15, r15
    2318:	f8 0e       	add	r15, r24
    231a:	f2 0e       	add	r15, r18
    231c:	15 c0       	rjmp	.+42     	; 0x2348 <vfprintf+0x108>
    231e:	8e 2d       	mov	r24, r14
    2320:	88 0f       	add	r24, r24
    2322:	e8 2e       	mov	r14, r24
    2324:	ee 0c       	add	r14, r14
    2326:	ee 0c       	add	r14, r14
    2328:	e8 0e       	add	r14, r24
    232a:	e2 0e       	add	r14, r18
    232c:	10 62       	ori	r17, 0x20	; 32
    232e:	0c c0       	rjmp	.+24     	; 0x2348 <vfprintf+0x108>
    2330:	8e 32       	cpi	r24, 0x2E	; 46
    2332:	21 f4       	brne	.+8      	; 0x233c <vfprintf+0xfc>
    2334:	16 fd       	sbrc	r17, 6
    2336:	6c c1       	rjmp	.+728    	; 0x2610 <vfprintf+0x3d0>
    2338:	10 64       	ori	r17, 0x40	; 64
    233a:	06 c0       	rjmp	.+12     	; 0x2348 <vfprintf+0x108>
    233c:	8c 36       	cpi	r24, 0x6C	; 108
    233e:	11 f4       	brne	.+4      	; 0x2344 <vfprintf+0x104>
    2340:	10 68       	ori	r17, 0x80	; 128
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <vfprintf+0x108>
    2344:	88 36       	cpi	r24, 0x68	; 104
    2346:	59 f4       	brne	.+22     	; 0x235e <vfprintf+0x11e>
    2348:	ec 85       	ldd	r30, Y+12	; 0x0c
    234a:	fd 85       	ldd	r31, Y+13	; 0x0d
    234c:	93 fd       	sbrc	r25, 3
    234e:	85 91       	lpm	r24, Z+
    2350:	93 ff       	sbrs	r25, 3
    2352:	81 91       	ld	r24, Z+
    2354:	fd 87       	std	Y+13, r31	; 0x0d
    2356:	ec 87       	std	Y+12, r30	; 0x0c
    2358:	88 23       	and	r24, r24
    235a:	09 f0       	breq	.+2      	; 0x235e <vfprintf+0x11e>
    235c:	b8 cf       	rjmp	.-144    	; 0x22ce <vfprintf+0x8e>
    235e:	98 2f       	mov	r25, r24
    2360:	95 54       	subi	r25, 0x45	; 69
    2362:	93 30       	cpi	r25, 0x03	; 3
    2364:	18 f0       	brcs	.+6      	; 0x236c <vfprintf+0x12c>
    2366:	90 52       	subi	r25, 0x20	; 32
    2368:	93 30       	cpi	r25, 0x03	; 3
    236a:	38 f4       	brcc	.+14     	; 0x237a <vfprintf+0x13a>
    236c:	24 e0       	ldi	r18, 0x04	; 4
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	a2 0e       	add	r10, r18
    2372:	b3 1e       	adc	r11, r19
    2374:	3f e3       	ldi	r19, 0x3F	; 63
    2376:	39 83       	std	Y+1, r19	; 0x01
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <vfprintf+0x158>
    237a:	83 36       	cpi	r24, 0x63	; 99
    237c:	31 f0       	breq	.+12     	; 0x238a <vfprintf+0x14a>
    237e:	83 37       	cpi	r24, 0x73	; 115
    2380:	81 f0       	breq	.+32     	; 0x23a2 <vfprintf+0x162>
    2382:	83 35       	cpi	r24, 0x53	; 83
    2384:	09 f0       	breq	.+2      	; 0x2388 <vfprintf+0x148>
    2386:	5a c0       	rjmp	.+180    	; 0x243c <vfprintf+0x1fc>
    2388:	22 c0       	rjmp	.+68     	; 0x23ce <vfprintf+0x18e>
    238a:	f5 01       	movw	r30, r10
    238c:	80 81       	ld	r24, Z
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	22 e0       	ldi	r18, 0x02	; 2
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	a2 0e       	add	r10, r18
    2396:	b3 1e       	adc	r11, r19
    2398:	21 e0       	ldi	r18, 0x01	; 1
    239a:	c2 2e       	mov	r12, r18
    239c:	d1 2c       	mov	r13, r1
    239e:	42 01       	movw	r8, r4
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <vfprintf+0x18a>
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	29 2e       	mov	r2, r25
    23a6:	31 2c       	mov	r3, r1
    23a8:	2a 0c       	add	r2, r10
    23aa:	3b 1c       	adc	r3, r11
    23ac:	f5 01       	movw	r30, r10
    23ae:	80 80       	ld	r8, Z
    23b0:	91 80       	ldd	r9, Z+1	; 0x01
    23b2:	16 ff       	sbrs	r17, 6
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <vfprintf+0x17c>
    23b6:	6f 2d       	mov	r22, r15
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <vfprintf+0x180>
    23bc:	6f ef       	ldi	r22, 0xFF	; 255
    23be:	7f ef       	ldi	r23, 0xFF	; 255
    23c0:	c4 01       	movw	r24, r8
    23c2:	0e 94 32 13 	call	0x2664	; 0x2664 <strnlen>
    23c6:	6c 01       	movw	r12, r24
    23c8:	51 01       	movw	r10, r2
    23ca:	1f 77       	andi	r17, 0x7F	; 127
    23cc:	15 c0       	rjmp	.+42     	; 0x23f8 <vfprintf+0x1b8>
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	28 2e       	mov	r2, r24
    23d2:	31 2c       	mov	r3, r1
    23d4:	2a 0c       	add	r2, r10
    23d6:	3b 1c       	adc	r3, r11
    23d8:	f5 01       	movw	r30, r10
    23da:	80 80       	ld	r8, Z
    23dc:	91 80       	ldd	r9, Z+1	; 0x01
    23de:	16 ff       	sbrs	r17, 6
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <vfprintf+0x1a8>
    23e2:	6f 2d       	mov	r22, r15
    23e4:	70 e0       	ldi	r23, 0x00	; 0
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <vfprintf+0x1ac>
    23e8:	6f ef       	ldi	r22, 0xFF	; 255
    23ea:	7f ef       	ldi	r23, 0xFF	; 255
    23ec:	c4 01       	movw	r24, r8
    23ee:	0e 94 27 13 	call	0x264e	; 0x264e <strnlen_P>
    23f2:	6c 01       	movw	r12, r24
    23f4:	10 68       	ori	r17, 0x80	; 128
    23f6:	51 01       	movw	r10, r2
    23f8:	13 fd       	sbrc	r17, 3
    23fa:	1c c0       	rjmp	.+56     	; 0x2434 <vfprintf+0x1f4>
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <vfprintf+0x1ca>
    23fe:	80 e2       	ldi	r24, 0x20	; 32
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	b3 01       	movw	r22, r6
    2404:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    2408:	ea 94       	dec	r14
    240a:	8e 2d       	mov	r24, r14
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	c8 16       	cp	r12, r24
    2410:	d9 06       	cpc	r13, r25
    2412:	a8 f3       	brcs	.-22     	; 0x23fe <vfprintf+0x1be>
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <vfprintf+0x1f4>
    2416:	f4 01       	movw	r30, r8
    2418:	17 fd       	sbrc	r17, 7
    241a:	85 91       	lpm	r24, Z+
    241c:	17 ff       	sbrs	r17, 7
    241e:	81 91       	ld	r24, Z+
    2420:	4f 01       	movw	r8, r30
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	b3 01       	movw	r22, r6
    2426:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    242a:	e1 10       	cpse	r14, r1
    242c:	ea 94       	dec	r14
    242e:	08 94       	sec
    2430:	c1 08       	sbc	r12, r1
    2432:	d1 08       	sbc	r13, r1
    2434:	c1 14       	cp	r12, r1
    2436:	d1 04       	cpc	r13, r1
    2438:	71 f7       	brne	.-36     	; 0x2416 <vfprintf+0x1d6>
    243a:	e7 c0       	rjmp	.+462    	; 0x260a <vfprintf+0x3ca>
    243c:	84 36       	cpi	r24, 0x64	; 100
    243e:	11 f0       	breq	.+4      	; 0x2444 <vfprintf+0x204>
    2440:	89 36       	cpi	r24, 0x69	; 105
    2442:	51 f5       	brne	.+84     	; 0x2498 <vfprintf+0x258>
    2444:	f5 01       	movw	r30, r10
    2446:	17 ff       	sbrs	r17, 7
    2448:	07 c0       	rjmp	.+14     	; 0x2458 <vfprintf+0x218>
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	a2 81       	ldd	r26, Z+2	; 0x02
    2450:	b3 81       	ldd	r27, Z+3	; 0x03
    2452:	24 e0       	ldi	r18, 0x04	; 4
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	08 c0       	rjmp	.+16     	; 0x2468 <vfprintf+0x228>
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	aa 27       	eor	r26, r26
    245e:	97 fd       	sbrc	r25, 7
    2460:	a0 95       	com	r26
    2462:	ba 2f       	mov	r27, r26
    2464:	22 e0       	ldi	r18, 0x02	; 2
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	a2 0e       	add	r10, r18
    246a:	b3 1e       	adc	r11, r19
    246c:	01 2f       	mov	r16, r17
    246e:	0f 76       	andi	r16, 0x6F	; 111
    2470:	b7 ff       	sbrs	r27, 7
    2472:	08 c0       	rjmp	.+16     	; 0x2484 <vfprintf+0x244>
    2474:	b0 95       	com	r27
    2476:	a0 95       	com	r26
    2478:	90 95       	com	r25
    247a:	81 95       	neg	r24
    247c:	9f 4f       	sbci	r25, 0xFF	; 255
    247e:	af 4f       	sbci	r26, 0xFF	; 255
    2480:	bf 4f       	sbci	r27, 0xFF	; 255
    2482:	00 68       	ori	r16, 0x80	; 128
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	a2 01       	movw	r20, r4
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	0e 94 a9 13 	call	0x2752	; 0x2752 <__ultoa_invert>
    2492:	d8 2e       	mov	r13, r24
    2494:	d4 18       	sub	r13, r4
    2496:	3f c0       	rjmp	.+126    	; 0x2516 <vfprintf+0x2d6>
    2498:	85 37       	cpi	r24, 0x75	; 117
    249a:	21 f4       	brne	.+8      	; 0x24a4 <vfprintf+0x264>
    249c:	1f 7e       	andi	r17, 0xEF	; 239
    249e:	2a e0       	ldi	r18, 0x0A	; 10
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	20 c0       	rjmp	.+64     	; 0x24e4 <vfprintf+0x2a4>
    24a4:	19 7f       	andi	r17, 0xF9	; 249
    24a6:	8f 36       	cpi	r24, 0x6F	; 111
    24a8:	a9 f0       	breq	.+42     	; 0x24d4 <vfprintf+0x294>
    24aa:	80 37       	cpi	r24, 0x70	; 112
    24ac:	20 f4       	brcc	.+8      	; 0x24b6 <vfprintf+0x276>
    24ae:	88 35       	cpi	r24, 0x58	; 88
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <vfprintf+0x274>
    24b2:	ae c0       	rjmp	.+348    	; 0x2610 <vfprintf+0x3d0>
    24b4:	0b c0       	rjmp	.+22     	; 0x24cc <vfprintf+0x28c>
    24b6:	80 37       	cpi	r24, 0x70	; 112
    24b8:	21 f0       	breq	.+8      	; 0x24c2 <vfprintf+0x282>
    24ba:	88 37       	cpi	r24, 0x78	; 120
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <vfprintf+0x280>
    24be:	a8 c0       	rjmp	.+336    	; 0x2610 <vfprintf+0x3d0>
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <vfprintf+0x284>
    24c2:	10 61       	ori	r17, 0x10	; 16
    24c4:	14 ff       	sbrs	r17, 4
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <vfprintf+0x29a>
    24c8:	14 60       	ori	r17, 0x04	; 4
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <vfprintf+0x29a>
    24cc:	14 ff       	sbrs	r17, 4
    24ce:	08 c0       	rjmp	.+16     	; 0x24e0 <vfprintf+0x2a0>
    24d0:	16 60       	ori	r17, 0x06	; 6
    24d2:	06 c0       	rjmp	.+12     	; 0x24e0 <vfprintf+0x2a0>
    24d4:	28 e0       	ldi	r18, 0x08	; 8
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	05 c0       	rjmp	.+10     	; 0x24e4 <vfprintf+0x2a4>
    24da:	20 e1       	ldi	r18, 0x10	; 16
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <vfprintf+0x2a4>
    24e0:	20 e1       	ldi	r18, 0x10	; 16
    24e2:	32 e0       	ldi	r19, 0x02	; 2
    24e4:	f5 01       	movw	r30, r10
    24e6:	17 ff       	sbrs	r17, 7
    24e8:	07 c0       	rjmp	.+14     	; 0x24f8 <vfprintf+0x2b8>
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	44 e0       	ldi	r20, 0x04	; 4
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	06 c0       	rjmp	.+12     	; 0x2504 <vfprintf+0x2c4>
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	42 e0       	ldi	r20, 0x02	; 2
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	a4 0e       	add	r10, r20
    2506:	b5 1e       	adc	r11, r21
    2508:	a2 01       	movw	r20, r4
    250a:	0e 94 a9 13 	call	0x2752	; 0x2752 <__ultoa_invert>
    250e:	d8 2e       	mov	r13, r24
    2510:	d4 18       	sub	r13, r4
    2512:	01 2f       	mov	r16, r17
    2514:	0f 77       	andi	r16, 0x7F	; 127
    2516:	06 ff       	sbrs	r16, 6
    2518:	09 c0       	rjmp	.+18     	; 0x252c <vfprintf+0x2ec>
    251a:	0e 7f       	andi	r16, 0xFE	; 254
    251c:	df 14       	cp	r13, r15
    251e:	30 f4       	brcc	.+12     	; 0x252c <vfprintf+0x2ec>
    2520:	04 ff       	sbrs	r16, 4
    2522:	06 c0       	rjmp	.+12     	; 0x2530 <vfprintf+0x2f0>
    2524:	02 fd       	sbrc	r16, 2
    2526:	04 c0       	rjmp	.+8      	; 0x2530 <vfprintf+0x2f0>
    2528:	0f 7e       	andi	r16, 0xEF	; 239
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <vfprintf+0x2f0>
    252c:	1d 2d       	mov	r17, r13
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <vfprintf+0x2f2>
    2530:	1f 2d       	mov	r17, r15
    2532:	80 2f       	mov	r24, r16
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	04 ff       	sbrs	r16, 4
    2538:	0c c0       	rjmp	.+24     	; 0x2552 <vfprintf+0x312>
    253a:	fe 01       	movw	r30, r28
    253c:	ed 0d       	add	r30, r13
    253e:	f1 1d       	adc	r31, r1
    2540:	20 81       	ld	r18, Z
    2542:	20 33       	cpi	r18, 0x30	; 48
    2544:	11 f4       	brne	.+4      	; 0x254a <vfprintf+0x30a>
    2546:	09 7e       	andi	r16, 0xE9	; 233
    2548:	09 c0       	rjmp	.+18     	; 0x255c <vfprintf+0x31c>
    254a:	02 ff       	sbrs	r16, 2
    254c:	06 c0       	rjmp	.+12     	; 0x255a <vfprintf+0x31a>
    254e:	1e 5f       	subi	r17, 0xFE	; 254
    2550:	05 c0       	rjmp	.+10     	; 0x255c <vfprintf+0x31c>
    2552:	86 78       	andi	r24, 0x86	; 134
    2554:	90 70       	andi	r25, 0x00	; 0
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	09 f0       	breq	.+2      	; 0x255c <vfprintf+0x31c>
    255a:	1f 5f       	subi	r17, 0xFF	; 255
    255c:	80 2e       	mov	r8, r16
    255e:	99 24       	eor	r9, r9
    2560:	03 fd       	sbrc	r16, 3
    2562:	12 c0       	rjmp	.+36     	; 0x2588 <vfprintf+0x348>
    2564:	00 ff       	sbrs	r16, 0
    2566:	0d c0       	rjmp	.+26     	; 0x2582 <vfprintf+0x342>
    2568:	fd 2c       	mov	r15, r13
    256a:	1e 15       	cp	r17, r14
    256c:	50 f4       	brcc	.+20     	; 0x2582 <vfprintf+0x342>
    256e:	fe 0c       	add	r15, r14
    2570:	f1 1a       	sub	r15, r17
    2572:	1e 2d       	mov	r17, r14
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <vfprintf+0x342>
    2576:	80 e2       	ldi	r24, 0x20	; 32
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	b3 01       	movw	r22, r6
    257c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    2580:	1f 5f       	subi	r17, 0xFF	; 255
    2582:	1e 15       	cp	r17, r14
    2584:	c0 f3       	brcs	.-16     	; 0x2576 <vfprintf+0x336>
    2586:	04 c0       	rjmp	.+8      	; 0x2590 <vfprintf+0x350>
    2588:	1e 15       	cp	r17, r14
    258a:	10 f4       	brcc	.+4      	; 0x2590 <vfprintf+0x350>
    258c:	e1 1a       	sub	r14, r17
    258e:	01 c0       	rjmp	.+2      	; 0x2592 <vfprintf+0x352>
    2590:	ee 24       	eor	r14, r14
    2592:	84 fe       	sbrs	r8, 4
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <vfprintf+0x374>
    2596:	80 e3       	ldi	r24, 0x30	; 48
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	b3 01       	movw	r22, r6
    259c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    25a0:	82 fe       	sbrs	r8, 2
    25a2:	1f c0       	rjmp	.+62     	; 0x25e2 <vfprintf+0x3a2>
    25a4:	81 fe       	sbrs	r8, 1
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <vfprintf+0x36e>
    25a8:	88 e5       	ldi	r24, 0x58	; 88
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	10 c0       	rjmp	.+32     	; 0x25ce <vfprintf+0x38e>
    25ae:	88 e7       	ldi	r24, 0x78	; 120
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0d c0       	rjmp	.+26     	; 0x25ce <vfprintf+0x38e>
    25b4:	c4 01       	movw	r24, r8
    25b6:	86 78       	andi	r24, 0x86	; 134
    25b8:	90 70       	andi	r25, 0x00	; 0
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	91 f0       	breq	.+36     	; 0x25e2 <vfprintf+0x3a2>
    25be:	81 fc       	sbrc	r8, 1
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <vfprintf+0x386>
    25c2:	80 e2       	ldi	r24, 0x20	; 32
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <vfprintf+0x388>
    25c6:	8b e2       	ldi	r24, 0x2B	; 43
    25c8:	07 fd       	sbrc	r16, 7
    25ca:	8d e2       	ldi	r24, 0x2D	; 45
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	b3 01       	movw	r22, r6
    25d0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    25d4:	06 c0       	rjmp	.+12     	; 0x25e2 <vfprintf+0x3a2>
    25d6:	80 e3       	ldi	r24, 0x30	; 48
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	b3 01       	movw	r22, r6
    25dc:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    25e0:	fa 94       	dec	r15
    25e2:	df 14       	cp	r13, r15
    25e4:	c0 f3       	brcs	.-16     	; 0x25d6 <vfprintf+0x396>
    25e6:	da 94       	dec	r13
    25e8:	f2 01       	movw	r30, r4
    25ea:	ed 0d       	add	r30, r13
    25ec:	f1 1d       	adc	r31, r1
    25ee:	80 81       	ld	r24, Z
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	b3 01       	movw	r22, r6
    25f4:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    25f8:	dd 20       	and	r13, r13
    25fa:	a9 f7       	brne	.-22     	; 0x25e6 <vfprintf+0x3a6>
    25fc:	06 c0       	rjmp	.+12     	; 0x260a <vfprintf+0x3ca>
    25fe:	80 e2       	ldi	r24, 0x20	; 32
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	b3 01       	movw	r22, r6
    2604:	0e 94 7d 13 	call	0x26fa	; 0x26fa <fputc>
    2608:	ea 94       	dec	r14
    260a:	ee 20       	and	r14, r14
    260c:	c1 f7       	brne	.-16     	; 0x25fe <vfprintf+0x3be>
    260e:	40 ce       	rjmp	.-896    	; 0x2290 <vfprintf+0x50>
    2610:	f3 01       	movw	r30, r6
    2612:	86 81       	ldd	r24, Z+6	; 0x06
    2614:	97 81       	ldd	r25, Z+7	; 0x07
    2616:	02 c0       	rjmp	.+4      	; 0x261c <vfprintf+0x3dc>
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	9f ef       	ldi	r25, 0xFF	; 255
    261c:	2d 96       	adiw	r28, 0x0d	; 13
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	ff 90       	pop	r15
    2632:	ef 90       	pop	r14
    2634:	df 90       	pop	r13
    2636:	cf 90       	pop	r12
    2638:	bf 90       	pop	r11
    263a:	af 90       	pop	r10
    263c:	9f 90       	pop	r9
    263e:	8f 90       	pop	r8
    2640:	7f 90       	pop	r7
    2642:	6f 90       	pop	r6
    2644:	5f 90       	pop	r5
    2646:	4f 90       	pop	r4
    2648:	3f 90       	pop	r3
    264a:	2f 90       	pop	r2
    264c:	08 95       	ret

0000264e <strnlen_P>:
    264e:	fc 01       	movw	r30, r24
    2650:	05 90       	lpm	r0, Z+
    2652:	61 50       	subi	r22, 0x01	; 1
    2654:	70 40       	sbci	r23, 0x00	; 0
    2656:	01 10       	cpse	r0, r1
    2658:	d8 f7       	brcc	.-10     	; 0x2650 <strnlen_P+0x2>
    265a:	80 95       	com	r24
    265c:	90 95       	com	r25
    265e:	8e 0f       	add	r24, r30
    2660:	9f 1f       	adc	r25, r31
    2662:	08 95       	ret

00002664 <strnlen>:
    2664:	fc 01       	movw	r30, r24
    2666:	61 50       	subi	r22, 0x01	; 1
    2668:	70 40       	sbci	r23, 0x00	; 0
    266a:	01 90       	ld	r0, Z+
    266c:	01 10       	cpse	r0, r1
    266e:	d8 f7       	brcc	.-10     	; 0x2666 <strnlen+0x2>
    2670:	80 95       	com	r24
    2672:	90 95       	com	r25
    2674:	8e 0f       	add	r24, r30
    2676:	9f 1f       	adc	r25, r31
    2678:	08 95       	ret

0000267a <fgetc>:
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	ec 01       	movw	r28, r24
    2680:	2b 81       	ldd	r18, Y+3	; 0x03
    2682:	20 ff       	sbrs	r18, 0
    2684:	35 c0       	rjmp	.+106    	; 0x26f0 <fgetc+0x76>
    2686:	26 ff       	sbrs	r18, 6
    2688:	09 c0       	rjmp	.+18     	; 0x269c <fgetc+0x22>
    268a:	2f 7b       	andi	r18, 0xBF	; 191
    268c:	2b 83       	std	Y+3, r18	; 0x03
    268e:	8e 81       	ldd	r24, Y+6	; 0x06
    2690:	9f 81       	ldd	r25, Y+7	; 0x07
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	9f 83       	std	Y+7, r25	; 0x07
    2696:	8e 83       	std	Y+6, r24	; 0x06
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	28 c0       	rjmp	.+80     	; 0x26ec <fgetc+0x72>
    269c:	22 ff       	sbrs	r18, 2
    269e:	0f c0       	rjmp	.+30     	; 0x26be <fgetc+0x44>
    26a0:	e8 81       	ld	r30, Y
    26a2:	f9 81       	ldd	r31, Y+1	; 0x01
    26a4:	80 81       	ld	r24, Z
    26a6:	99 27       	eor	r25, r25
    26a8:	87 fd       	sbrc	r24, 7
    26aa:	90 95       	com	r25
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	19 f4       	brne	.+6      	; 0x26b6 <fgetc+0x3c>
    26b0:	20 62       	ori	r18, 0x20	; 32
    26b2:	2b 83       	std	Y+3, r18	; 0x03
    26b4:	1d c0       	rjmp	.+58     	; 0x26f0 <fgetc+0x76>
    26b6:	31 96       	adiw	r30, 0x01	; 1
    26b8:	f9 83       	std	Y+1, r31	; 0x01
    26ba:	e8 83       	st	Y, r30
    26bc:	11 c0       	rjmp	.+34     	; 0x26e0 <fgetc+0x66>
    26be:	ea 85       	ldd	r30, Y+10	; 0x0a
    26c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    26c2:	ce 01       	movw	r24, r28
    26c4:	19 95       	eicall
    26c6:	97 ff       	sbrs	r25, 7
    26c8:	0b c0       	rjmp	.+22     	; 0x26e0 <fgetc+0x66>
    26ca:	2b 81       	ldd	r18, Y+3	; 0x03
    26cc:	3f ef       	ldi	r19, 0xFF	; 255
    26ce:	8f 3f       	cpi	r24, 0xFF	; 255
    26d0:	93 07       	cpc	r25, r19
    26d2:	11 f4       	brne	.+4      	; 0x26d8 <fgetc+0x5e>
    26d4:	80 e1       	ldi	r24, 0x10	; 16
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <fgetc+0x60>
    26d8:	80 e2       	ldi	r24, 0x20	; 32
    26da:	82 2b       	or	r24, r18
    26dc:	8b 83       	std	Y+3, r24	; 0x03
    26de:	08 c0       	rjmp	.+16     	; 0x26f0 <fgetc+0x76>
    26e0:	2e 81       	ldd	r18, Y+6	; 0x06
    26e2:	3f 81       	ldd	r19, Y+7	; 0x07
    26e4:	2f 5f       	subi	r18, 0xFF	; 255
    26e6:	3f 4f       	sbci	r19, 0xFF	; 255
    26e8:	3f 83       	std	Y+7, r19	; 0x07
    26ea:	2e 83       	std	Y+6, r18	; 0x06
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <fgetc+0x7a>
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	9f ef       	ldi	r25, 0xFF	; 255
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	08 95       	ret

000026fa <fputc>:
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	8c 01       	movw	r16, r24
    2704:	eb 01       	movw	r28, r22
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	81 ff       	sbrs	r24, 1
    270a:	1b c0       	rjmp	.+54     	; 0x2742 <fputc+0x48>
    270c:	82 ff       	sbrs	r24, 2
    270e:	0d c0       	rjmp	.+26     	; 0x272a <fputc+0x30>
    2710:	2e 81       	ldd	r18, Y+6	; 0x06
    2712:	3f 81       	ldd	r19, Y+7	; 0x07
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	28 17       	cp	r18, r24
    271a:	39 07       	cpc	r19, r25
    271c:	64 f4       	brge	.+24     	; 0x2736 <fputc+0x3c>
    271e:	e8 81       	ld	r30, Y
    2720:	f9 81       	ldd	r31, Y+1	; 0x01
    2722:	01 93       	st	Z+, r16
    2724:	f9 83       	std	Y+1, r31	; 0x01
    2726:	e8 83       	st	Y, r30
    2728:	06 c0       	rjmp	.+12     	; 0x2736 <fputc+0x3c>
    272a:	e8 85       	ldd	r30, Y+8	; 0x08
    272c:	f9 85       	ldd	r31, Y+9	; 0x09
    272e:	80 2f       	mov	r24, r16
    2730:	19 95       	eicall
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	31 f4       	brne	.+12     	; 0x2742 <fputc+0x48>
    2736:	8e 81       	ldd	r24, Y+6	; 0x06
    2738:	9f 81       	ldd	r25, Y+7	; 0x07
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	9f 83       	std	Y+7, r25	; 0x07
    273e:	8e 83       	std	Y+6, r24	; 0x06
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <fputc+0x4c>
    2742:	0f ef       	ldi	r16, 0xFF	; 255
    2744:	1f ef       	ldi	r17, 0xFF	; 255
    2746:	c8 01       	movw	r24, r16
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <__ultoa_invert>:
    2752:	fa 01       	movw	r30, r20
    2754:	aa 27       	eor	r26, r26
    2756:	28 30       	cpi	r18, 0x08	; 8
    2758:	51 f1       	breq	.+84     	; 0x27ae <__ultoa_invert+0x5c>
    275a:	20 31       	cpi	r18, 0x10	; 16
    275c:	81 f1       	breq	.+96     	; 0x27be <__ultoa_invert+0x6c>
    275e:	e8 94       	clt
    2760:	6f 93       	push	r22
    2762:	6e 7f       	andi	r22, 0xFE	; 254
    2764:	6e 5f       	subi	r22, 0xFE	; 254
    2766:	7f 4f       	sbci	r23, 0xFF	; 255
    2768:	8f 4f       	sbci	r24, 0xFF	; 255
    276a:	9f 4f       	sbci	r25, 0xFF	; 255
    276c:	af 4f       	sbci	r26, 0xFF	; 255
    276e:	b1 e0       	ldi	r27, 0x01	; 1
    2770:	3e d0       	rcall	.+124    	; 0x27ee <__ultoa_invert+0x9c>
    2772:	b4 e0       	ldi	r27, 0x04	; 4
    2774:	3c d0       	rcall	.+120    	; 0x27ee <__ultoa_invert+0x9c>
    2776:	67 0f       	add	r22, r23
    2778:	78 1f       	adc	r23, r24
    277a:	89 1f       	adc	r24, r25
    277c:	9a 1f       	adc	r25, r26
    277e:	a1 1d       	adc	r26, r1
    2780:	68 0f       	add	r22, r24
    2782:	79 1f       	adc	r23, r25
    2784:	8a 1f       	adc	r24, r26
    2786:	91 1d       	adc	r25, r1
    2788:	a1 1d       	adc	r26, r1
    278a:	6a 0f       	add	r22, r26
    278c:	71 1d       	adc	r23, r1
    278e:	81 1d       	adc	r24, r1
    2790:	91 1d       	adc	r25, r1
    2792:	a1 1d       	adc	r26, r1
    2794:	20 d0       	rcall	.+64     	; 0x27d6 <__ultoa_invert+0x84>
    2796:	09 f4       	brne	.+2      	; 0x279a <__ultoa_invert+0x48>
    2798:	68 94       	set
    279a:	3f 91       	pop	r19
    279c:	2a e0       	ldi	r18, 0x0A	; 10
    279e:	26 9f       	mul	r18, r22
    27a0:	11 24       	eor	r1, r1
    27a2:	30 19       	sub	r19, r0
    27a4:	30 5d       	subi	r19, 0xD0	; 208
    27a6:	31 93       	st	Z+, r19
    27a8:	de f6       	brtc	.-74     	; 0x2760 <__ultoa_invert+0xe>
    27aa:	cf 01       	movw	r24, r30
    27ac:	08 95       	ret
    27ae:	46 2f       	mov	r20, r22
    27b0:	47 70       	andi	r20, 0x07	; 7
    27b2:	40 5d       	subi	r20, 0xD0	; 208
    27b4:	41 93       	st	Z+, r20
    27b6:	b3 e0       	ldi	r27, 0x03	; 3
    27b8:	0f d0       	rcall	.+30     	; 0x27d8 <__ultoa_invert+0x86>
    27ba:	c9 f7       	brne	.-14     	; 0x27ae <__ultoa_invert+0x5c>
    27bc:	f6 cf       	rjmp	.-20     	; 0x27aa <__ultoa_invert+0x58>
    27be:	46 2f       	mov	r20, r22
    27c0:	4f 70       	andi	r20, 0x0F	; 15
    27c2:	40 5d       	subi	r20, 0xD0	; 208
    27c4:	4a 33       	cpi	r20, 0x3A	; 58
    27c6:	18 f0       	brcs	.+6      	; 0x27ce <__ultoa_invert+0x7c>
    27c8:	49 5d       	subi	r20, 0xD9	; 217
    27ca:	31 fd       	sbrc	r19, 1
    27cc:	40 52       	subi	r20, 0x20	; 32
    27ce:	41 93       	st	Z+, r20
    27d0:	02 d0       	rcall	.+4      	; 0x27d6 <__ultoa_invert+0x84>
    27d2:	a9 f7       	brne	.-22     	; 0x27be <__ultoa_invert+0x6c>
    27d4:	ea cf       	rjmp	.-44     	; 0x27aa <__ultoa_invert+0x58>
    27d6:	b4 e0       	ldi	r27, 0x04	; 4
    27d8:	a6 95       	lsr	r26
    27da:	97 95       	ror	r25
    27dc:	87 95       	ror	r24
    27de:	77 95       	ror	r23
    27e0:	67 95       	ror	r22
    27e2:	ba 95       	dec	r27
    27e4:	c9 f7       	brne	.-14     	; 0x27d8 <__ultoa_invert+0x86>
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	61 05       	cpc	r22, r1
    27ea:	71 05       	cpc	r23, r1
    27ec:	08 95       	ret
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	0a 2e       	mov	r0, r26
    27f4:	06 94       	lsr	r0
    27f6:	57 95       	ror	r21
    27f8:	47 95       	ror	r20
    27fa:	37 95       	ror	r19
    27fc:	27 95       	ror	r18
    27fe:	ba 95       	dec	r27
    2800:	c9 f7       	brne	.-14     	; 0x27f4 <__ultoa_invert+0xa2>
    2802:	62 0f       	add	r22, r18
    2804:	73 1f       	adc	r23, r19
    2806:	84 1f       	adc	r24, r20
    2808:	95 1f       	adc	r25, r21
    280a:	a0 1d       	adc	r26, r0
    280c:	08 95       	ret

0000280e <_exit>:
    280e:	f8 94       	cli

00002810 <__stop_program>:
    2810:	ff cf       	rjmp	.-2      	; 0x2810 <__stop_program>
