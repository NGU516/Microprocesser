
pjt10_timer_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800200  00001412  000014a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  008002a2  008002a2  00001548  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a8  00000000  00000000  00002998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002466  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ae  00000000  00000000  000050a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000145d  00000000  00000000  00006254  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  000076b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000749  00000000  00000000  00007d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001871  00000000  00000000  00008495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009d06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e1       	ldi	r30, 0x12	; 18
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 3a       	cpi	r26, 0xA2	; 162
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a2 ea       	ldi	r26, 0xA2	; 162
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ac 33       	cpi	r26, 0x3C	; 60
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 8f 04 	call	0x91e	; 0x91e <main>
     124:	0c 94 07 0a 	jmp	0x140e	; 0x140e <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include <stdlib.h>
#include "linked_list.h"
#include "Timer_linked_list.h"

int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
	int i;
	for (i = 2; i <= n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n % i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include "Timer_linked_list.h"

int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n % i) == 0)
			return 0;
	return 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return 0;
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:

void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 4a 06 	call	0xc94	; 0xc94 <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     18c:	c2 e0       	ldi	r28, 0x02	; 2
     18e:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
		if (is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
			count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	8a e1       	ldi	r24, 0x1A	; 26
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <app_list>:

void app_list(char *ap)
{
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	28 97       	sbiw	r28, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	19 f0       	breq	.+6      	; 0x226 <app_list+0x24>
     220:	fc 01       	movw	r30, r24
     222:	10 81       	ld	r17, Z
     224:	01 c0       	rjmp	.+2      	; 0x228 <app_list+0x26>
	printf("count=%d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     226:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]

	while(1) {
		printf( ">  ");
     228:	24 e2       	ldi	r18, 0x24	; 36
     22a:	e2 2e       	mov	r14, r18
     22c:	22 e0       	ldi	r18, 0x02	; 2
     22e:	f2 2e       	mov	r15, r18
     230:	0f 92       	push	r0
     232:	0f 92       	push	r0
     234:	ed b7       	in	r30, 0x3d	; 61
     236:	fe b7       	in	r31, 0x3e	; 62
     238:	f2 82       	std	Z+2, r15	; 0x02
     23a:	e1 82       	std	Z+1, r14	; 0x01
     23c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	40 91 36 03 	lds	r20, 0x0336
     248:	50 91 37 03 	lds	r21, 0x0337
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	68 e0       	ldi	r22, 0x08	; 8
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fgets>
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	a1 f0       	breq	.+40     	; 0x284 <app_list+0x82>
			break;
		np = get_node();
     25c:	0e 94 c7 01 	call	0x38e	; 0x38e <get_node>
		np->data = buf[0];
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
     266:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     268:	18 36       	cpi	r17, 0x68	; 104
     26a:	19 f0       	breq	.+6      	; 0x272 <app_list+0x70>
     26c:	14 37       	cpi	r17, 0x74	; 116
     26e:	39 f4       	brne	.+14     	; 0x27e <app_list+0x7c>
     270:	03 c0       	rjmp	.+6      	; 0x278 <app_list+0x76>
			case 'h'	: insert_node_head(np); break;
     272:	0e 94 cf 01 	call	0x39e	; 0x39e <insert_node_head>
     276:	dc cf       	rjmp	.-72     	; 0x230 <app_list+0x2e>
			case 't'	: insert_node_tail(np); break;
     278:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <insert_node_tail>
     27c:	d9 cf       	rjmp	.-78     	; 0x230 <app_list+0x2e>
			default 	: insert_node_ascn(np); //	'a'
     27e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <insert_node_ascn>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <app_list+0x2e>
		}
	}

	tour_list();
     284:	0e 94 35 02 	call	0x46a	; 0x46a <tour_list>
	free_list();
     288:	0e 94 62 02 	call	0x4c4	; 0x4c4 <free_list>
}
     28c:	28 96       	adiw	r28, 0x08	; 8
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <app_timer>:

void app_timer(char *ap)
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	62 97       	sbiw	r28, 0x12	; 18
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     2bc:	08 e2       	ldi	r16, 0x28	; 40
     2be:	12 e0       	ldi	r17, 0x02	; 2
     2c0:	0f 92       	push	r0
     2c2:	0f 92       	push	r0
     2c4:	ed b7       	in	r30, 0x3d	; 61
     2c6:	fe b7       	in	r31, 0x3e	; 62
     2c8:	12 83       	std	Z+2, r17	; 0x02
     2ca:	01 83       	std	Z+1, r16	; 0x01
     2cc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	40 91 36 03 	lds	r20, 0x0336
     2d8:	50 91 37 03 	lds	r21, 0x0337
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	68 e0       	ldi	r22, 0x08	; 8
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fgets>
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	61 f0       	breq	.+24     	; 0x304 <app_timer+0x60>
     2ec:	ce 01       	movw	r24, r28
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	0e 94 4a 06 	call	0xc94	; 0xc94 <atoi>
     2f4:	bc 01       	movw	r22, r24
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	29 f0       	breq	.+10     	; 0x304 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     2fa:	ce 01       	movw	r24, r28
     2fc:	09 96       	adiw	r24, 0x09	; 9
     2fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <insert_timer>
	}
     302:	de cf       	rjmp	.-68     	; 0x2c0 <app_timer+0x1c>

	tour_timer();
     304:	0e 94 3c 04 	call	0x878	; 0x878 <tour_timer>
	free_timer();
     308:	0e 94 7e 04 	call	0x8fc	; 0x8fc <free_timer>
}
     30c:	62 96       	adiw	r28, 0x12	; 18
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
     322:	8f ef       	ldi	r24, 0xFF	; 255
     324:	80 93 0b 01 	sts	0x010B, r24
     328:	80 93 0a 01 	sts	0x010A, r24
}
     32c:	08 95       	ret

0000032e <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
     32e:	10 92 0b 01 	sts	0x010B, r1
     332:	10 92 a2 02 	sts	0x02A2, r1
}
     336:	08 95       	ret

00000338 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	80 93 0b 01 	sts	0x010B, r24
     33e:	80 93 a2 02 	sts	0x02A2, r24
}
     342:	08 95       	ret

00000344 <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <led_on+0xa>
     34a:	22 0f       	add	r18, r18
     34c:	33 1f       	adc	r19, r19
     34e:	8a 95       	dec	r24
     350:	e2 f7       	brpl	.-8      	; 0x34a <led_on+0x6>
     352:	20 95       	com	r18
     354:	80 91 a2 02 	lds	r24, 0x02A2
     358:	28 23       	and	r18, r24
     35a:	20 93 a2 02 	sts	0x02A2, r18
	PORTL = Leds;
     35e:	20 93 0b 01 	sts	0x010B, r18
}
     362:	08 95       	ret

00000364 <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	02 c0       	rjmp	.+4      	; 0x36e <led_off+0xa>
     36a:	22 0f       	add	r18, r18
     36c:	33 1f       	adc	r19, r19
     36e:	8a 95       	dec	r24
     370:	e2 f7       	brpl	.-8      	; 0x36a <led_off+0x6>
     372:	80 91 a2 02 	lds	r24, 0x02A2
     376:	82 2b       	or	r24, r18
     378:	80 93 a2 02 	sts	0x02A2, r24
	PORTL = Leds;
     37c:	80 93 0b 01 	sts	0x010B, r24
}
     380:	08 95       	ret

00000382 <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     382:	80 95       	com	r24
     384:	80 93 a2 02 	sts	0x02A2, r24
	PORTL = Leds;
     388:	80 93 0b 01 	sts	0x010B, r24
}
     38c:	08 95       	ret

0000038e <get_node>:

struct node *get_node()
{
	struct node *cp;	// current pointer

	cp = (struct node *)malloc(sizeof(struct node));
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 1b 05 	call	0xa36	; 0xa36 <malloc>
	return cp;
}
     396:	08 95       	ret

00000398 <free_node>:

void free_node(struct node *np)
{
	free(np);
     398:	0e 94 b1 05 	call	0xb62	; 0xb62 <free>
}
     39c:	08 95       	ret

0000039e <insert_node_head>:

void insert_node_head(struct node *np)
{
     39e:	fc 01       	movw	r30, r24
	if (!Head) {
     3a0:	80 91 a3 02 	lds	r24, 0x02A3
     3a4:	90 91 a4 02 	lds	r25, 0x02A4
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	39 f4       	brne	.+14     	; 0x3ba <insert_node_head+0x1c>
		Head = np;
     3ac:	f0 93 a4 02 	sts	0x02A4, r31
     3b0:	e0 93 a3 02 	sts	0x02A3, r30
		np->link = NULL;
     3b4:	13 82       	std	Z+3, r1	; 0x03
     3b6:	12 82       	std	Z+2, r1	; 0x02
     3b8:	08 95       	ret
	}
	else {
		np->link = Head;
     3ba:	93 83       	std	Z+3, r25	; 0x03
     3bc:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     3be:	f0 93 a4 02 	sts	0x02A4, r31
     3c2:	e0 93 a3 02 	sts	0x02A3, r30
     3c6:	08 95       	ret

000003c8 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if (!Head)
     3c8:	e0 91 a3 02 	lds	r30, 0x02A3
     3cc:	f0 91 a4 02 	lds	r31, 0x02A4
     3d0:	30 97       	sbiw	r30, 0x00	; 0
     3d2:	31 f4       	brne	.+12     	; 0x3e0 <insert_node_tail+0x18>
		Head = np;
     3d4:	90 93 a4 02 	sts	0x02A4, r25
     3d8:	80 93 a3 02 	sts	0x02A3, r24
     3dc:	08 c0       	rjmp	.+16     	; 0x3ee <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     3de:	f9 01       	movw	r30, r18
     3e0:	22 81       	ldd	r18, Z+2	; 0x02
     3e2:	33 81       	ldd	r19, Z+3	; 0x03
     3e4:	21 15       	cp	r18, r1
     3e6:	31 05       	cpc	r19, r1
     3e8:	d1 f7       	brne	.-12     	; 0x3de <insert_node_tail+0x16>
		cp->link = np;
     3ea:	93 83       	std	Z+3, r25	; 0x03
     3ec:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     3ee:	fc 01       	movw	r30, r24
     3f0:	13 82       	std	Z+3, r1	; 0x03
     3f2:	12 82       	std	Z+2, r1	; 0x02
}
     3f4:	08 95       	ret

000003f6 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	fc 01       	movw	r30, r24
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
     3fc:	a0 91 a3 02 	lds	r26, 0x02A3
     400:	b0 91 a4 02 	lds	r27, 0x02A4
     404:	10 97       	sbiw	r26, 0x00	; 0
     406:	49 f0       	breq	.+18     	; 0x41a <insert_node_ascn+0x24>
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     408:	60 81       	ld	r22, Z
     40a:	71 81       	ldd	r23, Z+1	; 0x01
     40c:	3a 2f       	mov	r19, r26
     40e:	2b 2f       	mov	r18, r27
     410:	c0 e0       	ldi	r28, 0x00	; 0
     412:	d0 e0       	ldi	r29, 0x00	; 0
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
			np->link = Head;
			Head = np;
     414:	58 2f       	mov	r21, r24
     416:	4f 2f       	mov	r20, r31
     418:	1b c0       	rjmp	.+54     	; 0x450 <insert_node_ascn+0x5a>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
		Head = np;
     41a:	90 93 a4 02 	sts	0x02A4, r25
     41e:	80 93 a3 02 	sts	0x02A3, r24
		np->link = NULL;
     422:	13 82       	std	Z+3, r1	; 0x03
     424:	12 82       	std	Z+2, r1	; 0x02
     426:	1e c0       	rjmp	.+60     	; 0x464 <insert_node_ascn+0x6e>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
     428:	20 97       	sbiw	r28, 0x00	; 0
     42a:	21 f4       	brne	.+8      	; 0x434 <insert_node_ascn+0x3e>
			np->link = Head;
     42c:	32 83       	std	Z+2, r19	; 0x02
     42e:	23 83       	std	Z+3, r18	; 0x03
			Head = np;
     430:	9a 01       	movw	r18, r20
     432:	06 c0       	rjmp	.+12     	; 0x440 <insert_node_ascn+0x4a>
		}
		else {
			np->link = pp->link;
     434:	8a 81       	ldd	r24, Y+2	; 0x02
     436:	9b 81       	ldd	r25, Y+3	; 0x03
     438:	93 83       	std	Z+3, r25	; 0x03
     43a:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     43c:	fb 83       	std	Y+3, r31	; 0x03
     43e:	ea 83       	std	Y+2, r30	; 0x02
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
     440:	12 96       	adiw	r26, 0x02	; 2
     442:	8d 91       	ld	r24, X+
     444:	9c 91       	ld	r25, X
     446:	13 97       	sbiw	r26, 0x03	; 3
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     448:	00 97       	sbiw	r24, 0x00	; 0
     44a:	41 f0       	breq	.+16     	; 0x45c <insert_node_ascn+0x66>
     44c:	ed 01       	movw	r28, r26
												pp = cp, cp = cp->link)
     44e:	dc 01       	movw	r26, r24
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     450:	8d 91       	ld	r24, X+
     452:	9c 91       	ld	r25, X
     454:	11 97       	sbiw	r26, 0x01	; 1
     456:	86 17       	cp	r24, r22
     458:	97 07       	cpc	r25, r23
     45a:	34 f3       	brlt	.-52     	; 0x428 <insert_node_ascn+0x32>
     45c:	30 93 a3 02 	sts	0x02A3, r19
     460:	20 93 a4 02 	sts	0x02A4, r18
			np->link = pp->link;
			pp->link = np;
		}

	}
}
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <tour_list>:

void tour_list()
{
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     472:	8a e0       	ldi	r24, 0x0A	; 10
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <putchar>
	for (cp = Head; cp != NULL; cp = cp->link)
     47a:	c0 91 a3 02 	lds	r28, 0x02A3
     47e:	d0 91 a4 02 	lds	r29, 0x02A4
		printf("-->%c ", cp->data);
     482:	0c e2       	ldi	r16, 0x2C	; 44
     484:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     486:	13 c0       	rjmp	.+38     	; 0x4ae <tour_list+0x44>
		printf("-->%c ", cp->data);
     488:	00 d0       	rcall	.+0      	; 0x48a <tour_list+0x20>
     48a:	0f 92       	push	r0
     48c:	ed b7       	in	r30, 0x3d	; 61
     48e:	fe b7       	in	r31, 0x3e	; 62
     490:	12 83       	std	Z+2, r17	; 0x02
     492:	01 83       	std	Z+1, r16	; 0x01
     494:	88 81       	ld	r24, Y
     496:	99 81       	ldd	r25, Y+1	; 0x01
     498:	94 83       	std	Z+4, r25	; 0x04
     49a:	83 83       	std	Z+3, r24	; 0x03
     49c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     4a0:	0a 80       	ldd	r0, Y+2	; 0x02
     4a2:	db 81       	ldd	r29, Y+3	; 0x03
     4a4:	c0 2d       	mov	r28, r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	20 97       	sbiw	r28, 0x00	; 0
     4b0:	59 f7       	brne	.-42     	; 0x488 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     4b2:	8a e0       	ldi	r24, 0x0A	; 10
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <putchar>
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	08 95       	ret

000004c4 <free_list>:

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     4c6:	fc 01       	movw	r30, r24
     4c8:	22 81       	ldd	r18, Z+2	; 0x02
     4ca:	33 81       	ldd	r19, Z+3	; 0x03
     4cc:	30 93 a4 02 	sts	0x02A4, r19
     4d0:	20 93 a3 02 	sts	0x02A3, r18
	return cp;
}

void free_node(struct node *np)
{
	free(np);
     4d4:	0e 94 b1 05 	call	0xb62	; 0xb62 <free>

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     4d8:	80 91 a3 02 	lds	r24, 0x02A3
     4dc:	90 91 a4 02 	lds	r25, 0x02A4
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	89 f7       	brne	.-30     	; 0x4c6 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     4e4:	08 95       	ret

000004e6 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     4e6:	f8 94       	cli
		ch = qi_delete();
     4e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <qi_delete>
		sei();
     4ec:	78 94       	sei
	} while (ch == 0);
     4ee:	88 23       	and	r24, r24
     4f0:	d1 f3       	breq	.-12     	; 0x4e6 <uart_getchar>

	if (ch == E0T) return -1;
     4f2:	84 30       	cpi	r24, 0x04	; 4
     4f4:	11 f0       	breq	.+4      	; 0x4fa <uart_getchar+0x14>
	else 		   return ch;
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return ch;
}
     4fe:	08 95       	ret

00000500 <uart_putchar>:
	sbi(UCSR0B, RXEN0);				// RX enable
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
}

int uart_putchar(char ch, FILE *stream)
{
     500:	cf 93       	push	r28
     502:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     504:	8a 30       	cpi	r24, 0x0A	; 10
     506:	19 f4       	brne	.+6      	; 0x50e <uart_putchar+0xe>
     508:	8d e0       	ldi	r24, 0x0D	; 13
     50a:	0e 94 80 02 	call	0x500	; 0x500 <uart_putchar>
	cli();
     50e:	f8 94       	cli
	if(!uart_busy) {
     510:	80 91 a9 02 	lds	r24, 0x02A9
     514:	88 23       	and	r24, r24
     516:	59 f4       	brne	.+22     	; 0x52e <uart_putchar+0x2e>
		UDR0 = ch;
     518:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 a9 02 	sts	0x02A9, r24
     522:	0a c0       	rjmp	.+20     	; 0x538 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     524:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     526:	86 ef       	ldi	r24, 0xF6	; 246
     528:	8a 95       	dec	r24
     52a:	f1 f7       	brne	.-4      	; 0x528 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     52c:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     52e:	8c 2f       	mov	r24, r28
     530:	0e 94 8f 03 	call	0x71e	; 0x71e <qo_insert>
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	b1 f3       	breq	.-20     	; 0x524 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     538:	78 94       	sei
	return 1;
}
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <uart_init>:
FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     542:	85 e7       	ldi	r24, 0x75	; 117
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	90 93 37 03 	sts	0x0337, r25
     54a:	80 93 36 03 	sts	0x0336, r24
     54e:	83 e8       	ldi	r24, 0x83	; 131
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	90 93 39 03 	sts	0x0339, r25
     556:	80 93 38 03 	sts	0x0338, r24
	q_init();
     55a:	0e 94 3f 03 	call	0x67e	; 0x67e <q_init>
	uart_busy = 0;
     55e:	10 92 a9 02 	sts	0x02A9, r1

	UBRR0H = 0x00; UBRR0L = 0x03;	// 115.2Kbps
     562:	10 92 c5 00 	sts	0x00C5, r1
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0B, TXEN0);				// TX enable
     56c:	e1 ec       	ldi	r30, 0xC1	; 193
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	88 60       	ori	r24, 0x08	; 8
     574:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);			// TX complete interrupt
     576:	80 81       	ld	r24, Z
     578:	80 64       	ori	r24, 0x40	; 64
     57a:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);				// RX enable
     57c:	80 81       	ld	r24, Z
     57e:	80 61       	ori	r24, 0x10	; 16
     580:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
     582:	80 81       	ld	r24, Z
     584:	80 68       	ori	r24, 0x80	; 128
     586:	80 83       	st	Z, r24
}
     588:	08 95       	ret

0000058a <uart_echo>:
	if (ch == E0T) return -1;
	else 		   return ch;
}

void uart_echo(char ch)
{
     58a:	cf 93       	push	r28
     58c:	c8 2f       	mov	r28, r24
	if (ch == '\n')	uart_echo( '\r' );
     58e:	8a 30       	cpi	r24, 0x0A	; 10
     590:	19 f4       	brne	.+6      	; 0x598 <uart_echo+0xe>
     592:	8d e0       	ldi	r24, 0x0D	; 13
     594:	0e 94 c5 02 	call	0x58a	; 0x58a <uart_echo>
	if (!uart_busy) {
     598:	80 91 a9 02 	lds	r24, 0x02A9
     59c:	88 23       	and	r24, r24
     59e:	31 f4       	brne	.+12     	; 0x5ac <uart_echo+0x22>
		UDR0 = ch;
     5a0:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 a9 02 	sts	0x02A9, r24
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     5ac:	8c 2f       	mov	r24, r28
     5ae:	0e 94 8f 03 	call	0x71e	; 0x71e <qo_insert>

}
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <__vector_27>:

////////////////////////////////////////////
ISR(USART0_TX_vect)
{
     5b6:	1f 92       	push	r1
     5b8:	0f 92       	push	r0
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	0f 92       	push	r0
     5be:	0b b6       	in	r0, 0x3b	; 59
     5c0:	0f 92       	push	r0
     5c2:	11 24       	eor	r1, r1
     5c4:	2f 93       	push	r18
     5c6:	3f 93       	push	r19
     5c8:	4f 93       	push	r20
     5ca:	5f 93       	push	r21
     5cc:	6f 93       	push	r22
     5ce:	7f 93       	push	r23
     5d0:	8f 93       	push	r24
     5d2:	9f 93       	push	r25
     5d4:	af 93       	push	r26
     5d6:	bf 93       	push	r27
     5d8:	ef 93       	push	r30
     5da:	ff 93       	push	r31
	char ch;

	if ((ch = qo_delete()) == 0)
     5dc:	0e 94 b1 03 	call	0x762	; 0x762 <qo_delete>
     5e0:	88 23       	and	r24, r24
     5e2:	19 f4       	brne	.+6      	; 0x5ea <__vector_27+0x34>
		uart_busy = 0;
     5e4:	10 92 a9 02 	sts	0x02A9, r1
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__vector_27+0x38>
	else
		UDR0 = ch;
     5ea:	80 93 c6 00 	sts	0x00C6, r24
}
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	0b be       	out	0x3b, r0	; 59
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <__vector_25>:

ISR(USART0_RX_vect)
{
     614:	1f 92       	push	r1
     616:	0f 92       	push	r0
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	0f 92       	push	r0
     61c:	0b b6       	in	r0, 0x3b	; 59
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	2f 93       	push	r18
     624:	3f 93       	push	r19
     626:	4f 93       	push	r20
     628:	5f 93       	push	r21
     62a:	6f 93       	push	r22
     62c:	7f 93       	push	r23
     62e:	8f 93       	push	r24
     630:	9f 93       	push	r25
     632:	af 93       	push	r26
     634:	bf 93       	push	r27
     636:	cf 93       	push	r28
     638:	ef 93       	push	r30
     63a:	ff 93       	push	r31
	char ch;
	ch = UDR0;
     63c:	c0 91 c6 00 	lds	r28, 0x00C6
	if (ch != EOT) {
     640:	c4 30       	cpi	r28, 0x04	; 4
     642:	31 f0       	breq	.+12     	; 0x650 <__vector_25+0x3c>
		if (ch == '\r') ch = '\n';
     644:	cd 30       	cpi	r28, 0x0D	; 13
     646:	09 f4       	brne	.+2      	; 0x64a <__vector_25+0x36>
     648:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     64a:	8c 2f       	mov	r24, r28
     64c:	0e 94 c5 02 	call	0x58a	; 0x58a <uart_echo>
	}
	qi_insert(ch);
     650:	8c 2f       	mov	r24, r28
     652:	0e 94 50 03 	call	0x6a0	; 0x6a0 <qi_insert>
}
     656:	ff 91       	pop	r31
     658:	ef 91       	pop	r30
     65a:	cf 91       	pop	r28
     65c:	bf 91       	pop	r27
     65e:	af 91       	pop	r26
     660:	9f 91       	pop	r25
     662:	8f 91       	pop	r24
     664:	7f 91       	pop	r23
     666:	6f 91       	pop	r22
     668:	5f 91       	pop	r21
     66a:	4f 91       	pop	r20
     66c:	3f 91       	pop	r19
     66e:	2f 91       	pop	r18
     670:	0f 90       	pop	r0
     672:	0b be       	out	0x3b, r0	; 59
     674:	0f 90       	pop	r0
     676:	0f be       	out	0x3f, r0	; 63
     678:	0f 90       	pop	r0
     67a:	1f 90       	pop	r1
     67c:	18 95       	reti

0000067e <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     67e:	10 92 ef 02 	sts	0x02EF, r1
     682:	10 92 ee 02 	sts	0x02EE, r1
     686:	10 92 ed 02 	sts	0x02ED, r1
     68a:	10 92 ec 02 	sts	0x02EC, r1
     68e:	10 92 f1 02 	sts	0x02F1, r1
     692:	10 92 f0 02 	sts	0x02F0, r1
     696:	10 92 ab 02 	sts	0x02AB, r1
     69a:	10 92 aa 02 	sts	0x02AA, r1
}
     69e:	08 95       	ret

000006a0 <qi_insert>:

int qi_insert(char ch)
{
     6a0:	48 2f       	mov	r20, r24
	if ((ri + 1) % QI_SIZE == fi)
     6a2:	20 91 f0 02 	lds	r18, 0x02F0
     6a6:	30 91 f1 02 	lds	r19, 0x02F1
     6aa:	2f 5f       	subi	r18, 0xFF	; 255
     6ac:	3f 4f       	sbci	r19, 0xFF	; 255
     6ae:	c9 01       	movw	r24, r18
     6b0:	60 e4       	ldi	r22, 0x40	; 64
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__divmodhi4>
     6b8:	9c 01       	movw	r18, r24
     6ba:	80 91 aa 02 	lds	r24, 0x02AA
     6be:	90 91 ab 02 	lds	r25, 0x02AB
     6c2:	28 17       	cp	r18, r24
     6c4:	39 07       	cpc	r19, r25
     6c6:	59 f0       	breq	.+22     	; 0x6de <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     6c8:	30 93 f1 02 	sts	0x02F1, r19
     6cc:	20 93 f0 02 	sts	0x02F0, r18
	qi[ri] = ch;
     6d0:	2e 50       	subi	r18, 0x0E	; 14
     6d2:	3d 4f       	sbci	r19, 0xFD	; 253
     6d4:	f9 01       	movw	r30, r18
     6d6:	40 83       	st	Z, r20
	return 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri + 1) % QI_SIZE == fi)
		return 0;
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     6e2:	08 95       	ret

000006e4 <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     6e4:	80 91 aa 02 	lds	r24, 0x02AA
     6e8:	90 91 ab 02 	lds	r25, 0x02AB
     6ec:	20 91 f0 02 	lds	r18, 0x02F0
     6f0:	30 91 f1 02 	lds	r19, 0x02F1
     6f4:	28 17       	cp	r18, r24
     6f6:	39 07       	cpc	r19, r25
     6f8:	79 f0       	breq	.+30     	; 0x718 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	60 e4       	ldi	r22, 0x40	; 64
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__divmodhi4>
     704:	90 93 ab 02 	sts	0x02AB, r25
     708:	80 93 aa 02 	sts	0x02AA, r24
	return qi[fi];
     70c:	8e 50       	subi	r24, 0x0E	; 14
     70e:	9d 4f       	sbci	r25, 0xFD	; 253
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     71c:	08 95       	ret

0000071e <qo_insert>:

int qo_insert(char ch)
{
     71e:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     720:	20 91 ee 02 	lds	r18, 0x02EE
     724:	30 91 ef 02 	lds	r19, 0x02EF
     728:	2f 5f       	subi	r18, 0xFF	; 255
     72a:	3f 4f       	sbci	r19, 0xFF	; 255
     72c:	c9 01       	movw	r24, r18
     72e:	60 e4       	ldi	r22, 0x40	; 64
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__divmodhi4>
     736:	9c 01       	movw	r18, r24
     738:	80 91 ec 02 	lds	r24, 0x02EC
     73c:	90 91 ed 02 	lds	r25, 0x02ED
     740:	28 17       	cp	r18, r24
     742:	39 07       	cpc	r19, r25
     744:	59 f0       	breq	.+22     	; 0x75c <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     746:	30 93 ef 02 	sts	0x02EF, r19
     74a:	20 93 ee 02 	sts	0x02EE, r18
	qo[ro] = ch;
     74e:	24 55       	subi	r18, 0x54	; 84
     750:	3d 4f       	sbci	r19, 0xFD	; 253
     752:	f9 01       	movw	r30, r18
     754:	40 83       	st	Z, r20
	return 1;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     760:	08 95       	ret

00000762 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     762:	80 91 ec 02 	lds	r24, 0x02EC
     766:	90 91 ed 02 	lds	r25, 0x02ED
     76a:	20 91 ee 02 	lds	r18, 0x02EE
     76e:	30 91 ef 02 	lds	r19, 0x02EF
     772:	28 17       	cp	r18, r24
     774:	39 07       	cpc	r19, r25
     776:	79 f0       	breq	.+30     	; 0x796 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     778:	01 96       	adiw	r24, 0x01	; 1
     77a:	60 e4       	ldi	r22, 0x40	; 64
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__divmodhi4>
     782:	90 93 ed 02 	sts	0x02ED, r25
     786:	80 93 ec 02 	sts	0x02EC, r24
	return qo[fo];
     78a:	84 55       	subi	r24, 0x54	; 84
     78c:	9d 4f       	sbci	r25, 0xFD	; 253
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     79a:	08 95       	ret

0000079c <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     79c:	8e e0       	ldi	r24, 0x0E	; 14
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 1b 05 	call	0xa36	; 0xa36 <malloc>
	return tp;
}
     7a4:	08 95       	ret

000007a6 <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	f8 2e       	mov	r15, r24
     7b4:	e9 2e       	mov	r14, r25
     7b6:	8b 01       	movw	r16, r22
	int 		 total;
	struct timer *tp, *cp, *pp;	// timer, current, previous pointer

	tp = get_timer();
     7b8:	0e 94 ce 03 	call	0x79c	; 0x79c <get_timer>
     7bc:	dc 01       	movw	r26, r24
	tp->task = *tskp;	// task pointer
     7be:	fc 01       	movw	r30, r24
     7c0:	32 96       	adiw	r30, 0x02	; 2
     7c2:	cf 2d       	mov	r28, r15
     7c4:	de 2d       	mov	r29, r14
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	09 90       	ld	r0, Y+
     7ca:	01 92       	st	Z+, r0
     7cc:	81 50       	subi	r24, 0x01	; 1
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <insert_timer+0x22>
	tp->time = ms;
     7d0:	11 96       	adiw	r26, 0x01	; 1
     7d2:	1c 93       	st	X, r17
     7d4:	0e 93       	st	-X, r16

	if (Thead == NULL) {	// list empty
     7d6:	c0 91 a5 02 	lds	r28, 0x02A5
     7da:	d0 91 a6 02 	lds	r29, 0x02A6
     7de:	20 97       	sbiw	r28, 0x00	; 0
     7e0:	29 f4       	brne	.+10     	; 0x7ec <insert_timer+0x46>
		Thead = tp, tp->link = NULL;
     7e2:	b0 93 a6 02 	sts	0x02A6, r27
     7e6:	a0 93 a5 02 	sts	0x02A5, r26
     7ea:	30 c0       	rjmp	.+96     	; 0x84c <insert_timer+0xa6>

	tp = get_timer();
	tp->task = *tskp;	// task pointer
	tp->time = ms;

	if (Thead == NULL) {	// list empty
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <insert_timer+0x52>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     7f6:	ef 01       	movw	r28, r30
		total += cp->time;
     7f8:	88 81       	ld	r24, Y
     7fa:	99 81       	ldd	r25, Y+1	; 0x01
     7fc:	48 0f       	add	r20, r24
     7fe:	59 1f       	adc	r21, r25
		if (total >= ms)
     800:	40 17       	cp	r20, r16
     802:	51 07       	cpc	r21, r17
     804:	34 f4       	brge	.+12     	; 0x812 <insert_timer+0x6c>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     806:	ec 85       	ldd	r30, Y+12	; 0x0c
     808:	fd 85       	ldd	r31, Y+13	; 0x0d
     80a:	9e 01       	movw	r18, r28
     80c:	30 97       	sbiw	r30, 0x00	; 0
     80e:	99 f7       	brne	.-26     	; 0x7f6 <insert_timer+0x50>
     810:	01 c0       	rjmp	.+2      	; 0x814 <insert_timer+0x6e>
		total += cp->time;
		if (total >= ms)
     812:	fe 01       	movw	r30, r28
			break;
		pp = cp;
	}
	if (pp == NULL) {	// First insert
     814:	21 15       	cp	r18, r1
     816:	31 05       	cpc	r19, r1
     818:	79 f4       	brne	.+30     	; 0x838 <insert_timer+0x92>
		cp->time -= tp->time;
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	80 1b       	sub	r24, r16
     820:	91 0b       	sbc	r25, r17
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	80 83       	st	Z, r24
		tp->link = cp, Thead = tp;
     826:	1d 96       	adiw	r26, 0x0d	; 13
     828:	fc 93       	st	X, r31
     82a:	ee 93       	st	-X, r30
     82c:	1c 97       	sbiw	r26, 0x0c	; 12
     82e:	b0 93 a6 02 	sts	0x02A6, r27
     832:	a0 93 a5 02 	sts	0x02A5, r26
     836:	19 c0       	rjmp	.+50     	; 0x86a <insert_timer+0xc4>
	}
	else if (cp == NULL) {	// Last insert
     838:	30 97       	sbiw	r30, 0x00	; 0
     83a:	69 f4       	brne	.+26     	; 0x856 <insert_timer+0xb0>
		tp->time -= total;	// pp->time
     83c:	04 1b       	sub	r16, r20
     83e:	15 0b       	sbc	r17, r21
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	1c 93       	st	X, r17
     844:	0e 93       	st	-X, r16
		pp->link = tp;
     846:	e9 01       	movw	r28, r18
     848:	bd 87       	std	Y+13, r27	; 0x0d
     84a:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = NULL;
     84c:	1d 96       	adiw	r26, 0x0d	; 13
     84e:	1c 92       	st	X, r1
     850:	1e 92       	st	-X, r1
     852:	1c 97       	sbiw	r26, 0x0c	; 12
     854:	0a c0       	rjmp	.+20     	; 0x86a <insert_timer+0xc4>
	}
	else {	// Middle insert
		total -= cp->time;	// just before
		tp->time -= tp->time;
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	1c 92       	st	X, r1
     85a:	1e 92       	st	-X, r1
		pp->link = tp;
     85c:	e9 01       	movw	r28, r18
     85e:	bd 87       	std	Y+13, r27	; 0x0d
     860:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = cp;
     862:	1d 96       	adiw	r26, 0x0d	; 13
     864:	fc 93       	st	X, r31
     866:	ee 93       	st	-X, r30
     868:	1c 97       	sbiw	r26, 0x0c	; 12
	}
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	08 95       	ret

00000878 <tour_timer>:

void tour_timer()
{
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     884:	8a e0       	ldi	r24, 0x0A	; 10
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     88c:	c0 91 a5 02 	lds	r28, 0x02A5
     890:	d0 91 a6 02 	lds	r29, 0x02A6
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     898:	81 e9       	ldi	r24, 0x91	; 145
     89a:	e8 2e       	mov	r14, r24
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     8a0:	20 c0       	rjmp	.+64     	; 0x8e2 <tour_timer+0x6a>
		total += cp->time;
     8a2:	88 81       	ld	r24, Y
     8a4:	99 81       	ldd	r25, Y+1	; 0x01
     8a6:	08 0f       	add	r16, r24
     8a8:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <tour_timer+0x34>
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <tour_timer+0x36>
     8ae:	ed b7       	in	r30, 0x3d	; 61
     8b0:	fe b7       	in	r31, 0x3e	; 62
     8b2:	31 96       	adiw	r30, 0x01	; 1
     8b4:	ad b7       	in	r26, 0x3d	; 61
     8b6:	be b7       	in	r27, 0x3e	; 62
     8b8:	12 96       	adiw	r26, 0x02	; 2
     8ba:	fc 92       	st	X, r15
     8bc:	ee 92       	st	-X, r14
     8be:	11 97       	sbiw	r26, 0x01	; 1
     8c0:	93 83       	std	Z+3, r25	; 0x03
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	15 83       	std	Z+5, r17	; 0x05
     8c6:	04 83       	std	Z+4, r16	; 0x04
     8c8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     8cc:	0c 84       	ldd	r0, Y+12	; 0x0c
     8ce:	dd 85       	ldd	r29, Y+13	; 0x0d
     8d0:	c0 2d       	mov	r28, r0
     8d2:	8d b7       	in	r24, 0x3d	; 61
     8d4:	9e b7       	in	r25, 0x3e	; 62
     8d6:	06 96       	adiw	r24, 0x06	; 6
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	9e bf       	out	0x3e, r25	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	8d bf       	out	0x3d, r24	; 61
     8e2:	20 97       	sbiw	r28, 0x00	; 0
     8e4:	f1 f6       	brne	.-68     	; 0x8a2 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     8e6:	8a e0       	ldi	r24, 0x0A	; 10
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <putchar>
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	08 95       	ret

000008fc <free_timer>:

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     8fc:	09 c0       	rjmp	.+18     	; 0x910 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     8fe:	fc 01       	movw	r30, r24
     900:	24 85       	ldd	r18, Z+12	; 0x0c
     902:	35 85       	ldd	r19, Z+13	; 0x0d
     904:	30 93 a6 02 	sts	0x02A6, r19
     908:	20 93 a5 02 	sts	0x02A5, r18
		free(cp);
     90c:	0e 94 b1 05 	call	0xb62	; 0xb62 <free>

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     910:	80 91 a5 02 	lds	r24, 0x02A5
     914:	90 91 a6 02 	lds	r25, 0x02A6
     918:	00 97       	sbiw	r24, 0x00	; 0
     91a:	89 f7       	brne	.-30     	; 0x8fe <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     91c:	08 95       	ret

0000091e <main>:
#include "linked_list.h"
#include "Timer_linked_list.h"
#include "app.h"

int main()
{
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	c0 58       	subi	r28, 0x80	; 128
     928:	d0 40       	sbci	r29, 0x00	; 0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;

	uart_init();
     934:	0e 94 a1 02 	call	0x542	; 0x542 <uart_init>
	led_init();
     938:	0e 94 91 01 	call	0x322	; 0x322 <led_init>
	
	sei();
     93c:	78 94       	sei

	while(1) {
		printf("$ ");
     93e:	83 e3       	ldi	r24, 0x33	; 51
     940:	c8 2e       	mov	r12, r24
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	d8 2e       	mov	r13, r24
     946:	0f 92       	push	r0
     948:	0f 92       	push	r0
     94a:	ed b7       	in	r30, 0x3d	; 61
     94c:	fe b7       	in	r31, 0x3e	; 62
     94e:	d2 82       	std	Z+2, r13	; 0x02
     950:	c1 82       	std	Z+1, r12	; 0x01
     952:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL)
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	40 91 36 03 	lds	r20, 0x0336
     95e:	50 91 37 03 	lds	r21, 0x0337
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	60 e8       	ldi	r22, 0x80	; 128
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <fgets>
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	b1 f1       	breq	.+108    	; 0x9de <main+0xc0>
			break;
		if ((cp = strtok(cmd,  "\n\r\t  ")) == NULL) continue;
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	66 e3       	ldi	r22, 0x36	; 54
     978:	72 e0       	ldi	r23, 0x02	; 2
     97a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <strtok>
     97e:	8c 01       	movw	r16, r24
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	09 f3       	breq	.-62     	; 0x946 <main+0x28>
		ap = strtok(NULL, "\n\r\t  ");
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	66 e3       	ldi	r22, 0x36	; 54
     98a:	72 e0       	ldi	r23, 0x02	; 2
     98c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <strtok>
     990:	7c 01       	movw	r14, r24
		if 		(!strcmp(cp, "prime")) app_prime(ap);
     992:	c8 01       	movw	r24, r16
     994:	6c e3       	ldi	r22, 0x3C	; 60
     996:	72 e0       	ldi	r23, 0x02	; 2
     998:	0e 94 6d 06 	call	0xcda	; 0xcda <strcmp>
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	21 f4       	brne	.+8      	; 0x9a8 <main+0x8a>
     9a0:	c7 01       	movw	r24, r14
     9a2:	0e 94 b4 00 	call	0x168	; 0x168 <app_prime>
     9a6:	cf cf       	rjmp	.-98     	; 0x946 <main+0x28>
		else if (!strcmp(cp, "list"))  app_list(ap);
     9a8:	c8 01       	movw	r24, r16
     9aa:	62 e4       	ldi	r22, 0x42	; 66
     9ac:	72 e0       	ldi	r23, 0x02	; 2
     9ae:	0e 94 6d 06 	call	0xcda	; 0xcda <strcmp>
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	21 f4       	brne	.+8      	; 0x9be <main+0xa0>
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 01 01 	call	0x202	; 0x202 <app_list>
     9bc:	c4 cf       	rjmp	.-120    	; 0x946 <main+0x28>
		else if (!strcmp(cp, "timer")) app_timer(ap);
     9be:	c8 01       	movw	r24, r16
     9c0:	67 e4       	ldi	r22, 0x47	; 71
     9c2:	72 e0       	ldi	r23, 0x02	; 2
     9c4:	0e 94 6d 06 	call	0xcda	; 0xcda <strcmp>
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <main+0xb6>
     9cc:	c7 01       	movw	r24, r14
     9ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <app_timer>
     9d2:	b9 cf       	rjmp	.-142    	; 0x946 <main+0x28>
		else					   printf("Unknown command...\n");
     9d4:	8d e4       	ldi	r24, 0x4D	; 77
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	0e 94 f2 06 	call	0xde4	; 0xde4 <puts>
     9dc:	b4 cf       	rjmp	.-152    	; 0x946 <main+0x28>
		
	}
	printf("logout, good bye !!!\n");
     9de:	80 e6       	ldi	r24, 0x60	; 96
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 f2 06 	call	0xde4	; 0xde4 <puts>
     9e6:	ff cf       	rjmp	.-2      	; 0x9e6 <main+0xc8>

000009e8 <__divmodhi4>:
     9e8:	97 fb       	bst	r25, 7
     9ea:	09 2e       	mov	r0, r25
     9ec:	07 26       	eor	r0, r23
     9ee:	0a d0       	rcall	.+20     	; 0xa04 <__divmodhi4_neg1>
     9f0:	77 fd       	sbrc	r23, 7
     9f2:	04 d0       	rcall	.+8      	; 0x9fc <__divmodhi4_neg2>
     9f4:	0c d0       	rcall	.+24     	; 0xa0e <__udivmodhi4>
     9f6:	06 d0       	rcall	.+12     	; 0xa04 <__divmodhi4_neg1>
     9f8:	00 20       	and	r0, r0
     9fa:	1a f4       	brpl	.+6      	; 0xa02 <__divmodhi4_exit>

000009fc <__divmodhi4_neg2>:
     9fc:	70 95       	com	r23
     9fe:	61 95       	neg	r22
     a00:	7f 4f       	sbci	r23, 0xFF	; 255

00000a02 <__divmodhi4_exit>:
     a02:	08 95       	ret

00000a04 <__divmodhi4_neg1>:
     a04:	f6 f7       	brtc	.-4      	; 0xa02 <__divmodhi4_exit>
     a06:	90 95       	com	r25
     a08:	81 95       	neg	r24
     a0a:	9f 4f       	sbci	r25, 0xFF	; 255
     a0c:	08 95       	ret

00000a0e <__udivmodhi4>:
     a0e:	aa 1b       	sub	r26, r26
     a10:	bb 1b       	sub	r27, r27
     a12:	51 e1       	ldi	r21, 0x11	; 17
     a14:	07 c0       	rjmp	.+14     	; 0xa24 <__udivmodhi4_ep>

00000a16 <__udivmodhi4_loop>:
     a16:	aa 1f       	adc	r26, r26
     a18:	bb 1f       	adc	r27, r27
     a1a:	a6 17       	cp	r26, r22
     a1c:	b7 07       	cpc	r27, r23
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <__udivmodhi4_ep>
     a20:	a6 1b       	sub	r26, r22
     a22:	b7 0b       	sbc	r27, r23

00000a24 <__udivmodhi4_ep>:
     a24:	88 1f       	adc	r24, r24
     a26:	99 1f       	adc	r25, r25
     a28:	5a 95       	dec	r21
     a2a:	a9 f7       	brne	.-22     	; 0xa16 <__udivmodhi4_loop>
     a2c:	80 95       	com	r24
     a2e:	90 95       	com	r25
     a30:	bc 01       	movw	r22, r24
     a32:	cd 01       	movw	r24, r26
     a34:	08 95       	ret

00000a36 <malloc>:
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ac 01       	movw	r20, r24
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	91 05       	cpc	r25, r1
     a40:	10 f4       	brcc	.+4      	; 0xa46 <malloc+0x10>
     a42:	42 e0       	ldi	r20, 0x02	; 2
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	e0 91 34 03 	lds	r30, 0x0334
     a4a:	f0 91 35 03 	lds	r31, 0x0335
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	24 c0       	rjmp	.+72     	; 0xaa0 <malloc+0x6a>
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	84 17       	cp	r24, r20
     a5e:	95 07       	cpc	r25, r21
     a60:	d0 f0       	brcs	.+52     	; 0xa96 <malloc+0x60>
     a62:	84 17       	cp	r24, r20
     a64:	95 07       	cpc	r25, r21
     a66:	71 f4       	brne	.+28     	; 0xa84 <malloc+0x4e>
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	93 81       	ldd	r25, Z+3	; 0x03
     a6c:	10 97       	sbiw	r26, 0x00	; 0
     a6e:	29 f0       	breq	.+10     	; 0xa7a <malloc+0x44>
     a70:	13 96       	adiw	r26, 0x03	; 3
     a72:	9c 93       	st	X, r25
     a74:	8e 93       	st	-X, r24
     a76:	12 97       	sbiw	r26, 0x02	; 2
     a78:	2c c0       	rjmp	.+88     	; 0xad2 <malloc+0x9c>
     a7a:	90 93 35 03 	sts	0x0335, r25
     a7e:	80 93 34 03 	sts	0x0334, r24
     a82:	27 c0       	rjmp	.+78     	; 0xad2 <malloc+0x9c>
     a84:	21 15       	cp	r18, r1
     a86:	31 05       	cpc	r19, r1
     a88:	19 f0       	breq	.+6      	; 0xa90 <malloc+0x5a>
     a8a:	82 17       	cp	r24, r18
     a8c:	93 07       	cpc	r25, r19
     a8e:	18 f4       	brcc	.+6      	; 0xa96 <malloc+0x60>
     a90:	9c 01       	movw	r18, r24
     a92:	bd 01       	movw	r22, r26
     a94:	ef 01       	movw	r28, r30
     a96:	92 81       	ldd	r25, Z+2	; 0x02
     a98:	83 81       	ldd	r24, Z+3	; 0x03
     a9a:	df 01       	movw	r26, r30
     a9c:	e9 2f       	mov	r30, r25
     a9e:	f8 2f       	mov	r31, r24
     aa0:	30 97       	sbiw	r30, 0x00	; 0
     aa2:	d1 f6       	brne	.-76     	; 0xa58 <malloc+0x22>
     aa4:	21 15       	cp	r18, r1
     aa6:	31 05       	cpc	r19, r1
     aa8:	f9 f0       	breq	.+62     	; 0xae8 <malloc+0xb2>
     aaa:	c9 01       	movw	r24, r18
     aac:	84 1b       	sub	r24, r20
     aae:	95 0b       	sbc	r25, r21
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	91 05       	cpc	r25, r1
     ab4:	80 f4       	brcc	.+32     	; 0xad6 <malloc+0xa0>
     ab6:	8a 81       	ldd	r24, Y+2	; 0x02
     ab8:	9b 81       	ldd	r25, Y+3	; 0x03
     aba:	61 15       	cp	r22, r1
     abc:	71 05       	cpc	r23, r1
     abe:	21 f0       	breq	.+8      	; 0xac8 <malloc+0x92>
     ac0:	fb 01       	movw	r30, r22
     ac2:	93 83       	std	Z+3, r25	; 0x03
     ac4:	82 83       	std	Z+2, r24	; 0x02
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <malloc+0x9a>
     ac8:	90 93 35 03 	sts	0x0335, r25
     acc:	80 93 34 03 	sts	0x0334, r24
     ad0:	fe 01       	movw	r30, r28
     ad2:	32 96       	adiw	r30, 0x02	; 2
     ad4:	42 c0       	rjmp	.+132    	; 0xb5a <malloc+0x124>
     ad6:	fe 01       	movw	r30, r28
     ad8:	e8 0f       	add	r30, r24
     ada:	f9 1f       	adc	r31, r25
     adc:	41 93       	st	Z+, r20
     ade:	51 93       	st	Z+, r21
     ae0:	02 97       	sbiw	r24, 0x02	; 2
     ae2:	99 83       	std	Y+1, r25	; 0x01
     ae4:	88 83       	st	Y, r24
     ae6:	39 c0       	rjmp	.+114    	; 0xb5a <malloc+0x124>
     ae8:	80 91 32 03 	lds	r24, 0x0332
     aec:	90 91 33 03 	lds	r25, 0x0333
     af0:	00 97       	sbiw	r24, 0x00	; 0
     af2:	41 f4       	brne	.+16     	; 0xb04 <malloc+0xce>
     af4:	80 91 9e 02 	lds	r24, 0x029E
     af8:	90 91 9f 02 	lds	r25, 0x029F
     afc:	90 93 33 03 	sts	0x0333, r25
     b00:	80 93 32 03 	sts	0x0332, r24
     b04:	20 91 9c 02 	lds	r18, 0x029C
     b08:	30 91 9d 02 	lds	r19, 0x029D
     b0c:	21 15       	cp	r18, r1
     b0e:	31 05       	cpc	r19, r1
     b10:	41 f4       	brne	.+16     	; 0xb22 <malloc+0xec>
     b12:	2d b7       	in	r18, 0x3d	; 61
     b14:	3e b7       	in	r19, 0x3e	; 62
     b16:	80 91 a0 02 	lds	r24, 0x02A0
     b1a:	90 91 a1 02 	lds	r25, 0x02A1
     b1e:	28 1b       	sub	r18, r24
     b20:	39 0b       	sbc	r19, r25
     b22:	e0 91 32 03 	lds	r30, 0x0332
     b26:	f0 91 33 03 	lds	r31, 0x0333
     b2a:	e2 17       	cp	r30, r18
     b2c:	f3 07       	cpc	r31, r19
     b2e:	98 f4       	brcc	.+38     	; 0xb56 <malloc+0x120>
     b30:	2e 1b       	sub	r18, r30
     b32:	3f 0b       	sbc	r19, r31
     b34:	24 17       	cp	r18, r20
     b36:	35 07       	cpc	r19, r21
     b38:	70 f0       	brcs	.+28     	; 0xb56 <malloc+0x120>
     b3a:	ca 01       	movw	r24, r20
     b3c:	02 96       	adiw	r24, 0x02	; 2
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	48 f0       	brcs	.+18     	; 0xb56 <malloc+0x120>
     b44:	8e 0f       	add	r24, r30
     b46:	9f 1f       	adc	r25, r31
     b48:	90 93 33 03 	sts	0x0333, r25
     b4c:	80 93 32 03 	sts	0x0332, r24
     b50:	41 93       	st	Z+, r20
     b52:	51 93       	st	Z+, r21
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <malloc+0x124>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	cf 01       	movw	r24, r30
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <free>:
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	9c 01       	movw	r18, r24
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	09 f4       	brne	.+2      	; 0xb72 <free+0x10>
     b70:	8c c0       	rjmp	.+280    	; 0xc8a <free+0x128>
     b72:	dc 01       	movw	r26, r24
     b74:	12 97       	sbiw	r26, 0x02	; 2
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	1c 92       	st	X, r1
     b7a:	1e 92       	st	-X, r1
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	60 91 34 03 	lds	r22, 0x0334
     b82:	70 91 35 03 	lds	r23, 0x0335
     b86:	61 15       	cp	r22, r1
     b88:	71 05       	cpc	r23, r1
     b8a:	89 f4       	brne	.+34     	; 0xbae <free+0x4c>
     b8c:	8d 91       	ld	r24, X+
     b8e:	9c 91       	ld	r25, X
     b90:	11 97       	sbiw	r26, 0x01	; 1
     b92:	82 0f       	add	r24, r18
     b94:	93 1f       	adc	r25, r19
     b96:	20 91 32 03 	lds	r18, 0x0332
     b9a:	30 91 33 03 	lds	r19, 0x0333
     b9e:	28 17       	cp	r18, r24
     ba0:	39 07       	cpc	r19, r25
     ba2:	69 f5       	brne	.+90     	; 0xbfe <free+0x9c>
     ba4:	b0 93 33 03 	sts	0x0333, r27
     ba8:	a0 93 32 03 	sts	0x0332, r26
     bac:	6e c0       	rjmp	.+220    	; 0xc8a <free+0x128>
     bae:	fb 01       	movw	r30, r22
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <free+0x56>
     bb6:	fc 01       	movw	r30, r24
     bb8:	ea 17       	cp	r30, r26
     bba:	fb 07       	cpc	r31, r27
     bbc:	30 f4       	brcc	.+12     	; 0xbca <free+0x68>
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	af 01       	movw	r20, r30
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	b9 f7       	brne	.-18     	; 0xbb6 <free+0x54>
     bc8:	1f c0       	rjmp	.+62     	; 0xc08 <free+0xa6>
     bca:	e9 01       	movw	r28, r18
     bcc:	22 97       	sbiw	r28, 0x02	; 2
     bce:	fb 83       	std	Y+3, r31	; 0x03
     bd0:	ea 83       	std	Y+2, r30	; 0x02
     bd2:	08 81       	ld	r16, Y
     bd4:	19 81       	ldd	r17, Y+1	; 0x01
     bd6:	c9 01       	movw	r24, r18
     bd8:	80 0f       	add	r24, r16
     bda:	91 1f       	adc	r25, r17
     bdc:	8e 17       	cp	r24, r30
     bde:	9f 07       	cpc	r25, r31
     be0:	59 f4       	brne	.+22     	; 0xbf8 <free+0x96>
     be2:	80 81       	ld	r24, Z
     be4:	91 81       	ldd	r25, Z+1	; 0x01
     be6:	80 0f       	add	r24, r16
     be8:	91 1f       	adc	r25, r17
     bea:	02 96       	adiw	r24, 0x02	; 2
     bec:	99 83       	std	Y+1, r25	; 0x01
     bee:	88 83       	st	Y, r24
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	9b 83       	std	Y+3, r25	; 0x03
     bf6:	8a 83       	std	Y+2, r24	; 0x02
     bf8:	41 15       	cp	r20, r1
     bfa:	51 05       	cpc	r21, r1
     bfc:	29 f4       	brne	.+10     	; 0xc08 <free+0xa6>
     bfe:	b0 93 35 03 	sts	0x0335, r27
     c02:	a0 93 34 03 	sts	0x0334, r26
     c06:	41 c0       	rjmp	.+130    	; 0xc8a <free+0x128>
     c08:	fa 01       	movw	r30, r20
     c0a:	b3 83       	std	Z+3, r27	; 0x03
     c0c:	a2 83       	std	Z+2, r26	; 0x02
     c0e:	c1 91       	ld	r28, Z+
     c10:	d1 91       	ld	r29, Z+
     c12:	ec 0f       	add	r30, r28
     c14:	fd 1f       	adc	r31, r29
     c16:	ae 17       	cp	r26, r30
     c18:	bf 07       	cpc	r27, r31
     c1a:	81 f4       	brne	.+32     	; 0xc3c <free+0xda>
     c1c:	f9 01       	movw	r30, r18
     c1e:	92 91       	ld	r25, -Z
     c20:	82 91       	ld	r24, -Z
     c22:	8c 0f       	add	r24, r28
     c24:	9d 1f       	adc	r25, r29
     c26:	02 96       	adiw	r24, 0x02	; 2
     c28:	da 01       	movw	r26, r20
     c2a:	11 96       	adiw	r26, 0x01	; 1
     c2c:	9c 93       	st	X, r25
     c2e:	8e 93       	st	-X, r24
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	93 81       	ldd	r25, Z+3	; 0x03
     c34:	13 96       	adiw	r26, 0x03	; 3
     c36:	9c 93       	st	X, r25
     c38:	8e 93       	st	-X, r24
     c3a:	12 97       	sbiw	r26, 0x02	; 2
     c3c:	e0 e0       	ldi	r30, 0x00	; 0
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <free+0xe4>
     c42:	fb 01       	movw	r30, r22
     c44:	bc 01       	movw	r22, r24
     c46:	db 01       	movw	r26, r22
     c48:	12 96       	adiw	r26, 0x02	; 2
     c4a:	8d 91       	ld	r24, X+
     c4c:	9c 91       	ld	r25, X
     c4e:	13 97       	sbiw	r26, 0x03	; 3
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	b9 f7       	brne	.-18     	; 0xc42 <free+0xe0>
     c54:	cb 01       	movw	r24, r22
     c56:	02 96       	adiw	r24, 0x02	; 2
     c58:	2d 91       	ld	r18, X+
     c5a:	3c 91       	ld	r19, X
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	82 0f       	add	r24, r18
     c60:	93 1f       	adc	r25, r19
     c62:	20 91 32 03 	lds	r18, 0x0332
     c66:	30 91 33 03 	lds	r19, 0x0333
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	69 f4       	brne	.+26     	; 0xc8a <free+0x128>
     c70:	30 97       	sbiw	r30, 0x00	; 0
     c72:	29 f4       	brne	.+10     	; 0xc7e <free+0x11c>
     c74:	10 92 35 03 	sts	0x0335, r1
     c78:	10 92 34 03 	sts	0x0334, r1
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <free+0x120>
     c7e:	13 82       	std	Z+3, r1	; 0x03
     c80:	12 82       	std	Z+2, r1	; 0x02
     c82:	70 93 33 03 	sts	0x0333, r23
     c86:	60 93 32 03 	sts	0x0332, r22
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <atoi>:
     c94:	fc 01       	movw	r30, r24
     c96:	88 27       	eor	r24, r24
     c98:	99 27       	eor	r25, r25
     c9a:	e8 94       	clt
     c9c:	21 91       	ld	r18, Z+
     c9e:	20 32       	cpi	r18, 0x20	; 32
     ca0:	e9 f3       	breq	.-6      	; 0xc9c <atoi+0x8>
     ca2:	29 30       	cpi	r18, 0x09	; 9
     ca4:	10 f0       	brcs	.+4      	; 0xcaa <atoi+0x16>
     ca6:	2e 30       	cpi	r18, 0x0E	; 14
     ca8:	c8 f3       	brcs	.-14     	; 0xc9c <atoi+0x8>
     caa:	2b 32       	cpi	r18, 0x2B	; 43
     cac:	41 f0       	breq	.+16     	; 0xcbe <atoi+0x2a>
     cae:	2d 32       	cpi	r18, 0x2D	; 45
     cb0:	39 f4       	brne	.+14     	; 0xcc0 <atoi+0x2c>
     cb2:	68 94       	set
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <atoi+0x2a>
     cb6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulhi_const_10>
     cba:	82 0f       	add	r24, r18
     cbc:	91 1d       	adc	r25, r1
     cbe:	21 91       	ld	r18, Z+
     cc0:	20 53       	subi	r18, 0x30	; 48
     cc2:	2a 30       	cpi	r18, 0x0A	; 10
     cc4:	c0 f3       	brcs	.-16     	; 0xcb6 <atoi+0x22>
     cc6:	1e f4       	brtc	.+6      	; 0xcce <atoi+0x3a>
     cc8:	90 95       	com	r25
     cca:	81 95       	neg	r24
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	08 95       	ret

00000cd0 <strtok>:
     cd0:	47 ea       	ldi	r20, 0xA7	; 167
     cd2:	52 e0       	ldi	r21, 0x02	; 2
     cd4:	0e 94 76 06 	call	0xcec	; 0xcec <strtok_r>
     cd8:	08 95       	ret

00000cda <strcmp>:
     cda:	fb 01       	movw	r30, r22
     cdc:	dc 01       	movw	r26, r24
     cde:	8d 91       	ld	r24, X+
     ce0:	01 90       	ld	r0, Z+
     ce2:	80 19       	sub	r24, r0
     ce4:	01 10       	cpse	r0, r1
     ce6:	d9 f3       	breq	.-10     	; 0xcde <strcmp+0x4>
     ce8:	99 0b       	sbc	r25, r25
     cea:	08 95       	ret

00000cec <strtok_r>:
     cec:	fa 01       	movw	r30, r20
     cee:	a1 91       	ld	r26, Z+
     cf0:	b0 81       	ld	r27, Z
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	19 f4       	brne	.+6      	; 0xcfc <strtok_r+0x10>
     cf6:	10 97       	sbiw	r26, 0x00	; 0
     cf8:	e1 f0       	breq	.+56     	; 0xd32 <strtok_r+0x46>
     cfa:	cd 01       	movw	r24, r26
     cfc:	dc 01       	movw	r26, r24
     cfe:	cd 01       	movw	r24, r26
     d00:	0d 90       	ld	r0, X+
     d02:	00 20       	and	r0, r0
     d04:	11 f4       	brne	.+4      	; 0xd0a <strtok_r+0x1e>
     d06:	c0 01       	movw	r24, r0
     d08:	13 c0       	rjmp	.+38     	; 0xd30 <strtok_r+0x44>
     d0a:	fb 01       	movw	r30, r22
     d0c:	21 91       	ld	r18, Z+
     d0e:	22 23       	and	r18, r18
     d10:	19 f0       	breq	.+6      	; 0xd18 <strtok_r+0x2c>
     d12:	20 15       	cp	r18, r0
     d14:	d9 f7       	brne	.-10     	; 0xd0c <strtok_r+0x20>
     d16:	f3 cf       	rjmp	.-26     	; 0xcfe <strtok_r+0x12>
     d18:	fb 01       	movw	r30, r22
     d1a:	21 91       	ld	r18, Z+
     d1c:	20 15       	cp	r18, r0
     d1e:	19 f4       	brne	.+6      	; 0xd26 <strtok_r+0x3a>
     d20:	1e 92       	st	-X, r1
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	06 c0       	rjmp	.+12     	; 0xd32 <strtok_r+0x46>
     d26:	22 23       	and	r18, r18
     d28:	c1 f7       	brne	.-16     	; 0xd1a <strtok_r+0x2e>
     d2a:	0d 90       	ld	r0, X+
     d2c:	00 20       	and	r0, r0
     d2e:	a1 f7       	brne	.-24     	; 0xd18 <strtok_r+0x2c>
     d30:	d0 01       	movw	r26, r0
     d32:	fa 01       	movw	r30, r20
     d34:	a1 93       	st	Z+, r26
     d36:	b0 83       	st	Z, r27
     d38:	08 95       	ret

00000d3a <__mulhi_const_10>:
     d3a:	7a e0       	ldi	r23, 0x0A	; 10
     d3c:	97 9f       	mul	r25, r23
     d3e:	90 2d       	mov	r25, r0
     d40:	87 9f       	mul	r24, r23
     d42:	80 2d       	mov	r24, r0
     d44:	91 0d       	add	r25, r1
     d46:	11 24       	eor	r1, r1
     d48:	08 95       	ret

00000d4a <fgets>:
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	8c 01       	movw	r16, r24
     d5c:	6a 01       	movw	r12, r20
     d5e:	fa 01       	movw	r30, r20
     d60:	83 81       	ldd	r24, Z+3	; 0x03
     d62:	80 ff       	sbrs	r24, 0
     d64:	1a c0       	rjmp	.+52     	; 0xd9a <fgets+0x50>
     d66:	16 16       	cp	r1, r22
     d68:	17 06       	cpc	r1, r23
     d6a:	bc f4       	brge	.+46     	; 0xd9a <fgets+0x50>
     d6c:	7b 01       	movw	r14, r22
     d6e:	e8 01       	movw	r28, r16
     d70:	0e c0       	rjmp	.+28     	; 0xd8e <fgets+0x44>
     d72:	c6 01       	movw	r24, r12
     d74:	0e 94 3d 09 	call	0x127a	; 0x127a <fgetc>
     d78:	ff ef       	ldi	r31, 0xFF	; 255
     d7a:	8f 3f       	cpi	r24, 0xFF	; 255
     d7c:	9f 07       	cpc	r25, r31
     d7e:	69 f0       	breq	.+26     	; 0xd9a <fgets+0x50>
     d80:	89 93       	st	Y+, r24
     d82:	08 94       	sec
     d84:	e1 08       	sbc	r14, r1
     d86:	f1 08       	sbc	r15, r1
     d88:	8a 30       	cpi	r24, 0x0A	; 10
     d8a:	91 05       	cpc	r25, r1
     d8c:	21 f0       	breq	.+8      	; 0xd96 <fgets+0x4c>
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	e2 16       	cp	r14, r18
     d92:	f1 04       	cpc	r15, r1
     d94:	71 f7       	brne	.-36     	; 0xd72 <fgets+0x28>
     d96:	18 82       	st	Y, r1
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <fgets+0x54>
     d9a:	00 e0       	ldi	r16, 0x00	; 0
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	c8 01       	movw	r24, r16
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	08 95       	ret

00000db2 <printf>:
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	fe 01       	movw	r30, r28
     dbc:	36 96       	adiw	r30, 0x06	; 6
     dbe:	61 91       	ld	r22, Z+
     dc0:	71 91       	ld	r23, Z+
     dc2:	80 91 38 03 	lds	r24, 0x0338
     dc6:	90 91 39 03 	lds	r25, 0x0339
     dca:	af 01       	movw	r20, r30
     dcc:	0e 94 20 07 	call	0xe40	; 0xe40 <vfprintf>
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <putchar>:
     dd6:	60 91 38 03 	lds	r22, 0x0338
     dda:	70 91 39 03 	lds	r23, 0x0339
     dde:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
     de2:	08 95       	ret

00000de4 <puts>:
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	8c 01       	movw	r16, r24
     dee:	e0 91 38 03 	lds	r30, 0x0338
     df2:	f0 91 39 03 	lds	r31, 0x0339
     df6:	83 81       	ldd	r24, Z+3	; 0x03
     df8:	81 ff       	sbrs	r24, 1
     dfa:	1a c0       	rjmp	.+52     	; 0xe30 <puts+0x4c>
     dfc:	c0 e0       	ldi	r28, 0x00	; 0
     dfe:	d0 e0       	ldi	r29, 0x00	; 0
     e00:	05 c0       	rjmp	.+10     	; 0xe0c <puts+0x28>
     e02:	19 95       	eicall
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	11 f0       	breq	.+4      	; 0xe0c <puts+0x28>
     e08:	cf ef       	ldi	r28, 0xFF	; 255
     e0a:	df ef       	ldi	r29, 0xFF	; 255
     e0c:	f8 01       	movw	r30, r16
     e0e:	81 91       	ld	r24, Z+
     e10:	8f 01       	movw	r16, r30
     e12:	60 91 38 03 	lds	r22, 0x0338
     e16:	70 91 39 03 	lds	r23, 0x0339
     e1a:	db 01       	movw	r26, r22
     e1c:	18 96       	adiw	r26, 0x08	; 8
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	19 97       	sbiw	r26, 0x09	; 9
     e24:	88 23       	and	r24, r24
     e26:	69 f7       	brne	.-38     	; 0xe02 <puts+0x1e>
     e28:	8a e0       	ldi	r24, 0x0A	; 10
     e2a:	19 95       	eicall
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	11 f0       	breq	.+4      	; 0xe34 <puts+0x50>
     e30:	cf ef       	ldi	r28, 0xFF	; 255
     e32:	df ef       	ldi	r29, 0xFF	; 255
     e34:	ce 01       	movw	r24, r28
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <vfprintf>:
     e40:	2f 92       	push	r2
     e42:	3f 92       	push	r3
     e44:	4f 92       	push	r4
     e46:	5f 92       	push	r5
     e48:	6f 92       	push	r6
     e4a:	7f 92       	push	r7
     e4c:	8f 92       	push	r8
     e4e:	9f 92       	push	r9
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	2d 97       	sbiw	r28, 0x0d	; 13
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	3c 01       	movw	r6, r24
     e76:	7d 87       	std	Y+13, r23	; 0x0d
     e78:	6c 87       	std	Y+12, r22	; 0x0c
     e7a:	5a 01       	movw	r10, r20
     e7c:	fc 01       	movw	r30, r24
     e7e:	17 82       	std	Z+7, r1	; 0x07
     e80:	16 82       	std	Z+6, r1	; 0x06
     e82:	83 81       	ldd	r24, Z+3	; 0x03
     e84:	81 ff       	sbrs	r24, 1
     e86:	c8 c1       	rjmp	.+912    	; 0x1218 <vfprintf+0x3d8>
     e88:	2e 01       	movw	r4, r28
     e8a:	08 94       	sec
     e8c:	41 1c       	adc	r4, r1
     e8e:	51 1c       	adc	r5, r1
     e90:	f3 01       	movw	r30, r6
     e92:	93 81       	ldd	r25, Z+3	; 0x03
     e94:	ec 85       	ldd	r30, Y+12	; 0x0c
     e96:	fd 85       	ldd	r31, Y+13	; 0x0d
     e98:	93 fd       	sbrc	r25, 3
     e9a:	85 91       	lpm	r24, Z+
     e9c:	93 ff       	sbrs	r25, 3
     e9e:	81 91       	ld	r24, Z+
     ea0:	fd 87       	std	Y+13, r31	; 0x0d
     ea2:	ec 87       	std	Y+12, r30	; 0x0c
     ea4:	88 23       	and	r24, r24
     ea6:	09 f4       	brne	.+2      	; 0xeaa <vfprintf+0x6a>
     ea8:	b3 c1       	rjmp	.+870    	; 0x1210 <vfprintf+0x3d0>
     eaa:	85 32       	cpi	r24, 0x25	; 37
     eac:	41 f4       	brne	.+16     	; 0xebe <vfprintf+0x7e>
     eae:	93 fd       	sbrc	r25, 3
     eb0:	85 91       	lpm	r24, Z+
     eb2:	93 ff       	sbrs	r25, 3
     eb4:	81 91       	ld	r24, Z+
     eb6:	fd 87       	std	Y+13, r31	; 0x0d
     eb8:	ec 87       	std	Y+12, r30	; 0x0c
     eba:	85 32       	cpi	r24, 0x25	; 37
     ebc:	29 f4       	brne	.+10     	; 0xec8 <vfprintf+0x88>
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	b3 01       	movw	r22, r6
     ec2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
     ec6:	e4 cf       	rjmp	.-56     	; 0xe90 <vfprintf+0x50>
     ec8:	ff 24       	eor	r15, r15
     eca:	ee 24       	eor	r14, r14
     ecc:	10 e0       	ldi	r17, 0x00	; 0
     ece:	10 32       	cpi	r17, 0x20	; 32
     ed0:	b0 f4       	brcc	.+44     	; 0xefe <vfprintf+0xbe>
     ed2:	8b 32       	cpi	r24, 0x2B	; 43
     ed4:	69 f0       	breq	.+26     	; 0xef0 <vfprintf+0xb0>
     ed6:	8c 32       	cpi	r24, 0x2C	; 44
     ed8:	28 f4       	brcc	.+10     	; 0xee4 <vfprintf+0xa4>
     eda:	80 32       	cpi	r24, 0x20	; 32
     edc:	51 f0       	breq	.+20     	; 0xef2 <vfprintf+0xb2>
     ede:	83 32       	cpi	r24, 0x23	; 35
     ee0:	71 f4       	brne	.+28     	; 0xefe <vfprintf+0xbe>
     ee2:	0b c0       	rjmp	.+22     	; 0xefa <vfprintf+0xba>
     ee4:	8d 32       	cpi	r24, 0x2D	; 45
     ee6:	39 f0       	breq	.+14     	; 0xef6 <vfprintf+0xb6>
     ee8:	80 33       	cpi	r24, 0x30	; 48
     eea:	49 f4       	brne	.+18     	; 0xefe <vfprintf+0xbe>
     eec:	11 60       	ori	r17, 0x01	; 1
     eee:	2c c0       	rjmp	.+88     	; 0xf48 <vfprintf+0x108>
     ef0:	12 60       	ori	r17, 0x02	; 2
     ef2:	14 60       	ori	r17, 0x04	; 4
     ef4:	29 c0       	rjmp	.+82     	; 0xf48 <vfprintf+0x108>
     ef6:	18 60       	ori	r17, 0x08	; 8
     ef8:	27 c0       	rjmp	.+78     	; 0xf48 <vfprintf+0x108>
     efa:	10 61       	ori	r17, 0x10	; 16
     efc:	25 c0       	rjmp	.+74     	; 0xf48 <vfprintf+0x108>
     efe:	17 fd       	sbrc	r17, 7
     f00:	2e c0       	rjmp	.+92     	; 0xf5e <vfprintf+0x11e>
     f02:	28 2f       	mov	r18, r24
     f04:	20 53       	subi	r18, 0x30	; 48
     f06:	2a 30       	cpi	r18, 0x0A	; 10
     f08:	98 f4       	brcc	.+38     	; 0xf30 <vfprintf+0xf0>
     f0a:	16 ff       	sbrs	r17, 6
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <vfprintf+0xde>
     f0e:	8f 2d       	mov	r24, r15
     f10:	88 0f       	add	r24, r24
     f12:	f8 2e       	mov	r15, r24
     f14:	ff 0c       	add	r15, r15
     f16:	ff 0c       	add	r15, r15
     f18:	f8 0e       	add	r15, r24
     f1a:	f2 0e       	add	r15, r18
     f1c:	15 c0       	rjmp	.+42     	; 0xf48 <vfprintf+0x108>
     f1e:	8e 2d       	mov	r24, r14
     f20:	88 0f       	add	r24, r24
     f22:	e8 2e       	mov	r14, r24
     f24:	ee 0c       	add	r14, r14
     f26:	ee 0c       	add	r14, r14
     f28:	e8 0e       	add	r14, r24
     f2a:	e2 0e       	add	r14, r18
     f2c:	10 62       	ori	r17, 0x20	; 32
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <vfprintf+0x108>
     f30:	8e 32       	cpi	r24, 0x2E	; 46
     f32:	21 f4       	brne	.+8      	; 0xf3c <vfprintf+0xfc>
     f34:	16 fd       	sbrc	r17, 6
     f36:	6c c1       	rjmp	.+728    	; 0x1210 <vfprintf+0x3d0>
     f38:	10 64       	ori	r17, 0x40	; 64
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <vfprintf+0x108>
     f3c:	8c 36       	cpi	r24, 0x6C	; 108
     f3e:	11 f4       	brne	.+4      	; 0xf44 <vfprintf+0x104>
     f40:	10 68       	ori	r17, 0x80	; 128
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0x108>
     f44:	88 36       	cpi	r24, 0x68	; 104
     f46:	59 f4       	brne	.+22     	; 0xf5e <vfprintf+0x11e>
     f48:	ec 85       	ldd	r30, Y+12	; 0x0c
     f4a:	fd 85       	ldd	r31, Y+13	; 0x0d
     f4c:	93 fd       	sbrc	r25, 3
     f4e:	85 91       	lpm	r24, Z+
     f50:	93 ff       	sbrs	r25, 3
     f52:	81 91       	ld	r24, Z+
     f54:	fd 87       	std	Y+13, r31	; 0x0d
     f56:	ec 87       	std	Y+12, r30	; 0x0c
     f58:	88 23       	and	r24, r24
     f5a:	09 f0       	breq	.+2      	; 0xf5e <vfprintf+0x11e>
     f5c:	b8 cf       	rjmp	.-144    	; 0xece <vfprintf+0x8e>
     f5e:	98 2f       	mov	r25, r24
     f60:	95 54       	subi	r25, 0x45	; 69
     f62:	93 30       	cpi	r25, 0x03	; 3
     f64:	18 f0       	brcs	.+6      	; 0xf6c <vfprintf+0x12c>
     f66:	90 52       	subi	r25, 0x20	; 32
     f68:	93 30       	cpi	r25, 0x03	; 3
     f6a:	38 f4       	brcc	.+14     	; 0xf7a <vfprintf+0x13a>
     f6c:	24 e0       	ldi	r18, 0x04	; 4
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	a2 0e       	add	r10, r18
     f72:	b3 1e       	adc	r11, r19
     f74:	3f e3       	ldi	r19, 0x3F	; 63
     f76:	39 83       	std	Y+1, r19	; 0x01
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <vfprintf+0x158>
     f7a:	83 36       	cpi	r24, 0x63	; 99
     f7c:	31 f0       	breq	.+12     	; 0xf8a <vfprintf+0x14a>
     f7e:	83 37       	cpi	r24, 0x73	; 115
     f80:	81 f0       	breq	.+32     	; 0xfa2 <vfprintf+0x162>
     f82:	83 35       	cpi	r24, 0x53	; 83
     f84:	09 f0       	breq	.+2      	; 0xf88 <vfprintf+0x148>
     f86:	5a c0       	rjmp	.+180    	; 0x103c <vfprintf+0x1fc>
     f88:	22 c0       	rjmp	.+68     	; 0xfce <vfprintf+0x18e>
     f8a:	f5 01       	movw	r30, r10
     f8c:	80 81       	ld	r24, Z
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	22 e0       	ldi	r18, 0x02	; 2
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	a2 0e       	add	r10, r18
     f96:	b3 1e       	adc	r11, r19
     f98:	21 e0       	ldi	r18, 0x01	; 1
     f9a:	c2 2e       	mov	r12, r18
     f9c:	d1 2c       	mov	r13, r1
     f9e:	42 01       	movw	r8, r4
     fa0:	14 c0       	rjmp	.+40     	; 0xfca <vfprintf+0x18a>
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	29 2e       	mov	r2, r25
     fa6:	31 2c       	mov	r3, r1
     fa8:	2a 0c       	add	r2, r10
     faa:	3b 1c       	adc	r3, r11
     fac:	f5 01       	movw	r30, r10
     fae:	80 80       	ld	r8, Z
     fb0:	91 80       	ldd	r9, Z+1	; 0x01
     fb2:	16 ff       	sbrs	r17, 6
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <vfprintf+0x17c>
     fb6:	6f 2d       	mov	r22, r15
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x180>
     fbc:	6f ef       	ldi	r22, 0xFF	; 255
     fbe:	7f ef       	ldi	r23, 0xFF	; 255
     fc0:	c4 01       	movw	r24, r8
     fc2:	0e 94 32 09 	call	0x1264	; 0x1264 <strnlen>
     fc6:	6c 01       	movw	r12, r24
     fc8:	51 01       	movw	r10, r2
     fca:	1f 77       	andi	r17, 0x7F	; 127
     fcc:	15 c0       	rjmp	.+42     	; 0xff8 <vfprintf+0x1b8>
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	28 2e       	mov	r2, r24
     fd2:	31 2c       	mov	r3, r1
     fd4:	2a 0c       	add	r2, r10
     fd6:	3b 1c       	adc	r3, r11
     fd8:	f5 01       	movw	r30, r10
     fda:	80 80       	ld	r8, Z
     fdc:	91 80       	ldd	r9, Z+1	; 0x01
     fde:	16 ff       	sbrs	r17, 6
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <vfprintf+0x1a8>
     fe2:	6f 2d       	mov	r22, r15
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <vfprintf+0x1ac>
     fe8:	6f ef       	ldi	r22, 0xFF	; 255
     fea:	7f ef       	ldi	r23, 0xFF	; 255
     fec:	c4 01       	movw	r24, r8
     fee:	0e 94 27 09 	call	0x124e	; 0x124e <strnlen_P>
     ff2:	6c 01       	movw	r12, r24
     ff4:	10 68       	ori	r17, 0x80	; 128
     ff6:	51 01       	movw	r10, r2
     ff8:	13 fd       	sbrc	r17, 3
     ffa:	1c c0       	rjmp	.+56     	; 0x1034 <vfprintf+0x1f4>
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <vfprintf+0x1ca>
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	b3 01       	movw	r22, r6
    1004:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    1008:	ea 94       	dec	r14
    100a:	8e 2d       	mov	r24, r14
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	c8 16       	cp	r12, r24
    1010:	d9 06       	cpc	r13, r25
    1012:	a8 f3       	brcs	.-22     	; 0xffe <vfprintf+0x1be>
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <vfprintf+0x1f4>
    1016:	f4 01       	movw	r30, r8
    1018:	17 fd       	sbrc	r17, 7
    101a:	85 91       	lpm	r24, Z+
    101c:	17 ff       	sbrs	r17, 7
    101e:	81 91       	ld	r24, Z+
    1020:	4f 01       	movw	r8, r30
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	b3 01       	movw	r22, r6
    1026:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    102a:	e1 10       	cpse	r14, r1
    102c:	ea 94       	dec	r14
    102e:	08 94       	sec
    1030:	c1 08       	sbc	r12, r1
    1032:	d1 08       	sbc	r13, r1
    1034:	c1 14       	cp	r12, r1
    1036:	d1 04       	cpc	r13, r1
    1038:	71 f7       	brne	.-36     	; 0x1016 <vfprintf+0x1d6>
    103a:	e7 c0       	rjmp	.+462    	; 0x120a <vfprintf+0x3ca>
    103c:	84 36       	cpi	r24, 0x64	; 100
    103e:	11 f0       	breq	.+4      	; 0x1044 <vfprintf+0x204>
    1040:	89 36       	cpi	r24, 0x69	; 105
    1042:	51 f5       	brne	.+84     	; 0x1098 <vfprintf+0x258>
    1044:	f5 01       	movw	r30, r10
    1046:	17 ff       	sbrs	r17, 7
    1048:	07 c0       	rjmp	.+14     	; 0x1058 <vfprintf+0x218>
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	a2 81       	ldd	r26, Z+2	; 0x02
    1050:	b3 81       	ldd	r27, Z+3	; 0x03
    1052:	24 e0       	ldi	r18, 0x04	; 4
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	08 c0       	rjmp	.+16     	; 0x1068 <vfprintf+0x228>
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	aa 27       	eor	r26, r26
    105e:	97 fd       	sbrc	r25, 7
    1060:	a0 95       	com	r26
    1062:	ba 2f       	mov	r27, r26
    1064:	22 e0       	ldi	r18, 0x02	; 2
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	a2 0e       	add	r10, r18
    106a:	b3 1e       	adc	r11, r19
    106c:	01 2f       	mov	r16, r17
    106e:	0f 76       	andi	r16, 0x6F	; 111
    1070:	b7 ff       	sbrs	r27, 7
    1072:	08 c0       	rjmp	.+16     	; 0x1084 <vfprintf+0x244>
    1074:	b0 95       	com	r27
    1076:	a0 95       	com	r26
    1078:	90 95       	com	r25
    107a:	81 95       	neg	r24
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	af 4f       	sbci	r26, 0xFF	; 255
    1080:	bf 4f       	sbci	r27, 0xFF	; 255
    1082:	00 68       	ori	r16, 0x80	; 128
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	a2 01       	movw	r20, r4
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	0e 94 a9 09 	call	0x1352	; 0x1352 <__ultoa_invert>
    1092:	d8 2e       	mov	r13, r24
    1094:	d4 18       	sub	r13, r4
    1096:	3f c0       	rjmp	.+126    	; 0x1116 <vfprintf+0x2d6>
    1098:	85 37       	cpi	r24, 0x75	; 117
    109a:	21 f4       	brne	.+8      	; 0x10a4 <vfprintf+0x264>
    109c:	1f 7e       	andi	r17, 0xEF	; 239
    109e:	2a e0       	ldi	r18, 0x0A	; 10
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	20 c0       	rjmp	.+64     	; 0x10e4 <vfprintf+0x2a4>
    10a4:	19 7f       	andi	r17, 0xF9	; 249
    10a6:	8f 36       	cpi	r24, 0x6F	; 111
    10a8:	a9 f0       	breq	.+42     	; 0x10d4 <vfprintf+0x294>
    10aa:	80 37       	cpi	r24, 0x70	; 112
    10ac:	20 f4       	brcc	.+8      	; 0x10b6 <vfprintf+0x276>
    10ae:	88 35       	cpi	r24, 0x58	; 88
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <vfprintf+0x274>
    10b2:	ae c0       	rjmp	.+348    	; 0x1210 <vfprintf+0x3d0>
    10b4:	0b c0       	rjmp	.+22     	; 0x10cc <vfprintf+0x28c>
    10b6:	80 37       	cpi	r24, 0x70	; 112
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <vfprintf+0x282>
    10ba:	88 37       	cpi	r24, 0x78	; 120
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <vfprintf+0x280>
    10be:	a8 c0       	rjmp	.+336    	; 0x1210 <vfprintf+0x3d0>
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <vfprintf+0x284>
    10c2:	10 61       	ori	r17, 0x10	; 16
    10c4:	14 ff       	sbrs	r17, 4
    10c6:	09 c0       	rjmp	.+18     	; 0x10da <vfprintf+0x29a>
    10c8:	14 60       	ori	r17, 0x04	; 4
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <vfprintf+0x29a>
    10cc:	14 ff       	sbrs	r17, 4
    10ce:	08 c0       	rjmp	.+16     	; 0x10e0 <vfprintf+0x2a0>
    10d0:	16 60       	ori	r17, 0x06	; 6
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <vfprintf+0x2a0>
    10d4:	28 e0       	ldi	r18, 0x08	; 8
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <vfprintf+0x2a4>
    10da:	20 e1       	ldi	r18, 0x10	; 16
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <vfprintf+0x2a4>
    10e0:	20 e1       	ldi	r18, 0x10	; 16
    10e2:	32 e0       	ldi	r19, 0x02	; 2
    10e4:	f5 01       	movw	r30, r10
    10e6:	17 ff       	sbrs	r17, 7
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <vfprintf+0x2b8>
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	82 81       	ldd	r24, Z+2	; 0x02
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	44 e0       	ldi	r20, 0x04	; 4
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <vfprintf+0x2c4>
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	a4 0e       	add	r10, r20
    1106:	b5 1e       	adc	r11, r21
    1108:	a2 01       	movw	r20, r4
    110a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__ultoa_invert>
    110e:	d8 2e       	mov	r13, r24
    1110:	d4 18       	sub	r13, r4
    1112:	01 2f       	mov	r16, r17
    1114:	0f 77       	andi	r16, 0x7F	; 127
    1116:	06 ff       	sbrs	r16, 6
    1118:	09 c0       	rjmp	.+18     	; 0x112c <vfprintf+0x2ec>
    111a:	0e 7f       	andi	r16, 0xFE	; 254
    111c:	df 14       	cp	r13, r15
    111e:	30 f4       	brcc	.+12     	; 0x112c <vfprintf+0x2ec>
    1120:	04 ff       	sbrs	r16, 4
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <vfprintf+0x2f0>
    1124:	02 fd       	sbrc	r16, 2
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <vfprintf+0x2f0>
    1128:	0f 7e       	andi	r16, 0xEF	; 239
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <vfprintf+0x2f0>
    112c:	1d 2d       	mov	r17, r13
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <vfprintf+0x2f2>
    1130:	1f 2d       	mov	r17, r15
    1132:	80 2f       	mov	r24, r16
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	04 ff       	sbrs	r16, 4
    1138:	0c c0       	rjmp	.+24     	; 0x1152 <vfprintf+0x312>
    113a:	fe 01       	movw	r30, r28
    113c:	ed 0d       	add	r30, r13
    113e:	f1 1d       	adc	r31, r1
    1140:	20 81       	ld	r18, Z
    1142:	20 33       	cpi	r18, 0x30	; 48
    1144:	11 f4       	brne	.+4      	; 0x114a <vfprintf+0x30a>
    1146:	09 7e       	andi	r16, 0xE9	; 233
    1148:	09 c0       	rjmp	.+18     	; 0x115c <vfprintf+0x31c>
    114a:	02 ff       	sbrs	r16, 2
    114c:	06 c0       	rjmp	.+12     	; 0x115a <vfprintf+0x31a>
    114e:	1e 5f       	subi	r17, 0xFE	; 254
    1150:	05 c0       	rjmp	.+10     	; 0x115c <vfprintf+0x31c>
    1152:	86 78       	andi	r24, 0x86	; 134
    1154:	90 70       	andi	r25, 0x00	; 0
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	09 f0       	breq	.+2      	; 0x115c <vfprintf+0x31c>
    115a:	1f 5f       	subi	r17, 0xFF	; 255
    115c:	80 2e       	mov	r8, r16
    115e:	99 24       	eor	r9, r9
    1160:	03 fd       	sbrc	r16, 3
    1162:	12 c0       	rjmp	.+36     	; 0x1188 <vfprintf+0x348>
    1164:	00 ff       	sbrs	r16, 0
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <vfprintf+0x342>
    1168:	fd 2c       	mov	r15, r13
    116a:	1e 15       	cp	r17, r14
    116c:	50 f4       	brcc	.+20     	; 0x1182 <vfprintf+0x342>
    116e:	fe 0c       	add	r15, r14
    1170:	f1 1a       	sub	r15, r17
    1172:	1e 2d       	mov	r17, r14
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <vfprintf+0x342>
    1176:	80 e2       	ldi	r24, 0x20	; 32
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	b3 01       	movw	r22, r6
    117c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    1180:	1f 5f       	subi	r17, 0xFF	; 255
    1182:	1e 15       	cp	r17, r14
    1184:	c0 f3       	brcs	.-16     	; 0x1176 <vfprintf+0x336>
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <vfprintf+0x350>
    1188:	1e 15       	cp	r17, r14
    118a:	10 f4       	brcc	.+4      	; 0x1190 <vfprintf+0x350>
    118c:	e1 1a       	sub	r14, r17
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <vfprintf+0x352>
    1190:	ee 24       	eor	r14, r14
    1192:	84 fe       	sbrs	r8, 4
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <vfprintf+0x374>
    1196:	80 e3       	ldi	r24, 0x30	; 48
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	b3 01       	movw	r22, r6
    119c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    11a0:	82 fe       	sbrs	r8, 2
    11a2:	1f c0       	rjmp	.+62     	; 0x11e2 <vfprintf+0x3a2>
    11a4:	81 fe       	sbrs	r8, 1
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <vfprintf+0x36e>
    11a8:	88 e5       	ldi	r24, 0x58	; 88
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	10 c0       	rjmp	.+32     	; 0x11ce <vfprintf+0x38e>
    11ae:	88 e7       	ldi	r24, 0x78	; 120
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0d c0       	rjmp	.+26     	; 0x11ce <vfprintf+0x38e>
    11b4:	c4 01       	movw	r24, r8
    11b6:	86 78       	andi	r24, 0x86	; 134
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	91 f0       	breq	.+36     	; 0x11e2 <vfprintf+0x3a2>
    11be:	81 fc       	sbrc	r8, 1
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <vfprintf+0x386>
    11c2:	80 e2       	ldi	r24, 0x20	; 32
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <vfprintf+0x388>
    11c6:	8b e2       	ldi	r24, 0x2B	; 43
    11c8:	07 fd       	sbrc	r16, 7
    11ca:	8d e2       	ldi	r24, 0x2D	; 45
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	b3 01       	movw	r22, r6
    11d0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <vfprintf+0x3a2>
    11d6:	80 e3       	ldi	r24, 0x30	; 48
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	b3 01       	movw	r22, r6
    11dc:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    11e0:	fa 94       	dec	r15
    11e2:	df 14       	cp	r13, r15
    11e4:	c0 f3       	brcs	.-16     	; 0x11d6 <vfprintf+0x396>
    11e6:	da 94       	dec	r13
    11e8:	f2 01       	movw	r30, r4
    11ea:	ed 0d       	add	r30, r13
    11ec:	f1 1d       	adc	r31, r1
    11ee:	80 81       	ld	r24, Z
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	b3 01       	movw	r22, r6
    11f4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    11f8:	dd 20       	and	r13, r13
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <vfprintf+0x3a6>
    11fc:	06 c0       	rjmp	.+12     	; 0x120a <vfprintf+0x3ca>
    11fe:	80 e2       	ldi	r24, 0x20	; 32
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	b3 01       	movw	r22, r6
    1204:	0e 94 7d 09 	call	0x12fa	; 0x12fa <fputc>
    1208:	ea 94       	dec	r14
    120a:	ee 20       	and	r14, r14
    120c:	c1 f7       	brne	.-16     	; 0x11fe <vfprintf+0x3be>
    120e:	40 ce       	rjmp	.-896    	; 0xe90 <vfprintf+0x50>
    1210:	f3 01       	movw	r30, r6
    1212:	86 81       	ldd	r24, Z+6	; 0x06
    1214:	97 81       	ldd	r25, Z+7	; 0x07
    1216:	02 c0       	rjmp	.+4      	; 0x121c <vfprintf+0x3dc>
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	9f ef       	ldi	r25, 0xFF	; 255
    121c:	2d 96       	adiw	r28, 0x0d	; 13
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	4f 90       	pop	r4
    1248:	3f 90       	pop	r3
    124a:	2f 90       	pop	r2
    124c:	08 95       	ret

0000124e <strnlen_P>:
    124e:	fc 01       	movw	r30, r24
    1250:	05 90       	lpm	r0, Z+
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	70 40       	sbci	r23, 0x00	; 0
    1256:	01 10       	cpse	r0, r1
    1258:	d8 f7       	brcc	.-10     	; 0x1250 <strnlen_P+0x2>
    125a:	80 95       	com	r24
    125c:	90 95       	com	r25
    125e:	8e 0f       	add	r24, r30
    1260:	9f 1f       	adc	r25, r31
    1262:	08 95       	ret

00001264 <strnlen>:
    1264:	fc 01       	movw	r30, r24
    1266:	61 50       	subi	r22, 0x01	; 1
    1268:	70 40       	sbci	r23, 0x00	; 0
    126a:	01 90       	ld	r0, Z+
    126c:	01 10       	cpse	r0, r1
    126e:	d8 f7       	brcc	.-10     	; 0x1266 <strnlen+0x2>
    1270:	80 95       	com	r24
    1272:	90 95       	com	r25
    1274:	8e 0f       	add	r24, r30
    1276:	9f 1f       	adc	r25, r31
    1278:	08 95       	ret

0000127a <fgetc>:
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ec 01       	movw	r28, r24
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	20 ff       	sbrs	r18, 0
    1284:	35 c0       	rjmp	.+106    	; 0x12f0 <fgetc+0x76>
    1286:	26 ff       	sbrs	r18, 6
    1288:	09 c0       	rjmp	.+18     	; 0x129c <fgetc+0x22>
    128a:	2f 7b       	andi	r18, 0xBF	; 191
    128c:	2b 83       	std	Y+3, r18	; 0x03
    128e:	8e 81       	ldd	r24, Y+6	; 0x06
    1290:	9f 81       	ldd	r25, Y+7	; 0x07
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	9f 83       	std	Y+7, r25	; 0x07
    1296:	8e 83       	std	Y+6, r24	; 0x06
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 c0       	rjmp	.+80     	; 0x12ec <fgetc+0x72>
    129c:	22 ff       	sbrs	r18, 2
    129e:	0f c0       	rjmp	.+30     	; 0x12be <fgetc+0x44>
    12a0:	e8 81       	ld	r30, Y
    12a2:	f9 81       	ldd	r31, Y+1	; 0x01
    12a4:	80 81       	ld	r24, Z
    12a6:	99 27       	eor	r25, r25
    12a8:	87 fd       	sbrc	r24, 7
    12aa:	90 95       	com	r25
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <fgetc+0x3c>
    12b0:	20 62       	ori	r18, 0x20	; 32
    12b2:	2b 83       	std	Y+3, r18	; 0x03
    12b4:	1d c0       	rjmp	.+58     	; 0x12f0 <fgetc+0x76>
    12b6:	31 96       	adiw	r30, 0x01	; 1
    12b8:	f9 83       	std	Y+1, r31	; 0x01
    12ba:	e8 83       	st	Y, r30
    12bc:	11 c0       	rjmp	.+34     	; 0x12e0 <fgetc+0x66>
    12be:	ea 85       	ldd	r30, Y+10	; 0x0a
    12c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    12c2:	ce 01       	movw	r24, r28
    12c4:	19 95       	eicall
    12c6:	97 ff       	sbrs	r25, 7
    12c8:	0b c0       	rjmp	.+22     	; 0x12e0 <fgetc+0x66>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	8f 3f       	cpi	r24, 0xFF	; 255
    12d0:	93 07       	cpc	r25, r19
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <fgetc+0x5e>
    12d4:	80 e1       	ldi	r24, 0x10	; 16
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <fgetc+0x60>
    12d8:	80 e2       	ldi	r24, 0x20	; 32
    12da:	82 2b       	or	r24, r18
    12dc:	8b 83       	std	Y+3, r24	; 0x03
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <fgetc+0x76>
    12e0:	2e 81       	ldd	r18, Y+6	; 0x06
    12e2:	3f 81       	ldd	r19, Y+7	; 0x07
    12e4:	2f 5f       	subi	r18, 0xFF	; 255
    12e6:	3f 4f       	sbci	r19, 0xFF	; 255
    12e8:	3f 83       	std	Y+7, r19	; 0x07
    12ea:	2e 83       	std	Y+6, r18	; 0x06
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <fgetc+0x7a>
    12f0:	8f ef       	ldi	r24, 0xFF	; 255
    12f2:	9f ef       	ldi	r25, 0xFF	; 255
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <fputc>:
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	8c 01       	movw	r16, r24
    1304:	eb 01       	movw	r28, r22
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	81 ff       	sbrs	r24, 1
    130a:	1b c0       	rjmp	.+54     	; 0x1342 <fputc+0x48>
    130c:	82 ff       	sbrs	r24, 2
    130e:	0d c0       	rjmp	.+26     	; 0x132a <fputc+0x30>
    1310:	2e 81       	ldd	r18, Y+6	; 0x06
    1312:	3f 81       	ldd	r19, Y+7	; 0x07
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	28 17       	cp	r18, r24
    131a:	39 07       	cpc	r19, r25
    131c:	64 f4       	brge	.+24     	; 0x1336 <fputc+0x3c>
    131e:	e8 81       	ld	r30, Y
    1320:	f9 81       	ldd	r31, Y+1	; 0x01
    1322:	01 93       	st	Z+, r16
    1324:	f9 83       	std	Y+1, r31	; 0x01
    1326:	e8 83       	st	Y, r30
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <fputc+0x3c>
    132a:	e8 85       	ldd	r30, Y+8	; 0x08
    132c:	f9 85       	ldd	r31, Y+9	; 0x09
    132e:	80 2f       	mov	r24, r16
    1330:	19 95       	eicall
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	31 f4       	brne	.+12     	; 0x1342 <fputc+0x48>
    1336:	8e 81       	ldd	r24, Y+6	; 0x06
    1338:	9f 81       	ldd	r25, Y+7	; 0x07
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	9f 83       	std	Y+7, r25	; 0x07
    133e:	8e 83       	std	Y+6, r24	; 0x06
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <fputc+0x4c>
    1342:	0f ef       	ldi	r16, 0xFF	; 255
    1344:	1f ef       	ldi	r17, 0xFF	; 255
    1346:	c8 01       	movw	r24, r16
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <__ultoa_invert>:
    1352:	fa 01       	movw	r30, r20
    1354:	aa 27       	eor	r26, r26
    1356:	28 30       	cpi	r18, 0x08	; 8
    1358:	51 f1       	breq	.+84     	; 0x13ae <__ultoa_invert+0x5c>
    135a:	20 31       	cpi	r18, 0x10	; 16
    135c:	81 f1       	breq	.+96     	; 0x13be <__ultoa_invert+0x6c>
    135e:	e8 94       	clt
    1360:	6f 93       	push	r22
    1362:	6e 7f       	andi	r22, 0xFE	; 254
    1364:	6e 5f       	subi	r22, 0xFE	; 254
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	af 4f       	sbci	r26, 0xFF	; 255
    136e:	b1 e0       	ldi	r27, 0x01	; 1
    1370:	3e d0       	rcall	.+124    	; 0x13ee <__ultoa_invert+0x9c>
    1372:	b4 e0       	ldi	r27, 0x04	; 4
    1374:	3c d0       	rcall	.+120    	; 0x13ee <__ultoa_invert+0x9c>
    1376:	67 0f       	add	r22, r23
    1378:	78 1f       	adc	r23, r24
    137a:	89 1f       	adc	r24, r25
    137c:	9a 1f       	adc	r25, r26
    137e:	a1 1d       	adc	r26, r1
    1380:	68 0f       	add	r22, r24
    1382:	79 1f       	adc	r23, r25
    1384:	8a 1f       	adc	r24, r26
    1386:	91 1d       	adc	r25, r1
    1388:	a1 1d       	adc	r26, r1
    138a:	6a 0f       	add	r22, r26
    138c:	71 1d       	adc	r23, r1
    138e:	81 1d       	adc	r24, r1
    1390:	91 1d       	adc	r25, r1
    1392:	a1 1d       	adc	r26, r1
    1394:	20 d0       	rcall	.+64     	; 0x13d6 <__ultoa_invert+0x84>
    1396:	09 f4       	brne	.+2      	; 0x139a <__ultoa_invert+0x48>
    1398:	68 94       	set
    139a:	3f 91       	pop	r19
    139c:	2a e0       	ldi	r18, 0x0A	; 10
    139e:	26 9f       	mul	r18, r22
    13a0:	11 24       	eor	r1, r1
    13a2:	30 19       	sub	r19, r0
    13a4:	30 5d       	subi	r19, 0xD0	; 208
    13a6:	31 93       	st	Z+, r19
    13a8:	de f6       	brtc	.-74     	; 0x1360 <__ultoa_invert+0xe>
    13aa:	cf 01       	movw	r24, r30
    13ac:	08 95       	ret
    13ae:	46 2f       	mov	r20, r22
    13b0:	47 70       	andi	r20, 0x07	; 7
    13b2:	40 5d       	subi	r20, 0xD0	; 208
    13b4:	41 93       	st	Z+, r20
    13b6:	b3 e0       	ldi	r27, 0x03	; 3
    13b8:	0f d0       	rcall	.+30     	; 0x13d8 <__ultoa_invert+0x86>
    13ba:	c9 f7       	brne	.-14     	; 0x13ae <__ultoa_invert+0x5c>
    13bc:	f6 cf       	rjmp	.-20     	; 0x13aa <__ultoa_invert+0x58>
    13be:	46 2f       	mov	r20, r22
    13c0:	4f 70       	andi	r20, 0x0F	; 15
    13c2:	40 5d       	subi	r20, 0xD0	; 208
    13c4:	4a 33       	cpi	r20, 0x3A	; 58
    13c6:	18 f0       	brcs	.+6      	; 0x13ce <__ultoa_invert+0x7c>
    13c8:	49 5d       	subi	r20, 0xD9	; 217
    13ca:	31 fd       	sbrc	r19, 1
    13cc:	40 52       	subi	r20, 0x20	; 32
    13ce:	41 93       	st	Z+, r20
    13d0:	02 d0       	rcall	.+4      	; 0x13d6 <__ultoa_invert+0x84>
    13d2:	a9 f7       	brne	.-22     	; 0x13be <__ultoa_invert+0x6c>
    13d4:	ea cf       	rjmp	.-44     	; 0x13aa <__ultoa_invert+0x58>
    13d6:	b4 e0       	ldi	r27, 0x04	; 4
    13d8:	a6 95       	lsr	r26
    13da:	97 95       	ror	r25
    13dc:	87 95       	ror	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	ba 95       	dec	r27
    13e4:	c9 f7       	brne	.-14     	; 0x13d8 <__ultoa_invert+0x86>
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 05       	cpc	r22, r1
    13ea:	71 05       	cpc	r23, r1
    13ec:	08 95       	ret
    13ee:	9b 01       	movw	r18, r22
    13f0:	ac 01       	movw	r20, r24
    13f2:	0a 2e       	mov	r0, r26
    13f4:	06 94       	lsr	r0
    13f6:	57 95       	ror	r21
    13f8:	47 95       	ror	r20
    13fa:	37 95       	ror	r19
    13fc:	27 95       	ror	r18
    13fe:	ba 95       	dec	r27
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__ultoa_invert+0xa2>
    1402:	62 0f       	add	r22, r18
    1404:	73 1f       	adc	r23, r19
    1406:	84 1f       	adc	r24, r20
    1408:	95 1f       	adc	r25, r21
    140a:	a0 1d       	adc	r26, r0
    140c:	08 95       	ret

0000140e <_exit>:
    140e:	f8 94       	cli

00001410 <__stop_program>:
    1410:	ff cf       	rjmp	.-2      	; 0x1410 <__stop_program>
