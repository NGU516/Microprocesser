
pjt_uart_intr_volatile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800200  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800222  00800222  00000378  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b7  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000221  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000149  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000112  00000000  00000000  00001a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001b73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 32       	cpi	r26, 0x22	; 34
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a2 e2       	ldi	r26, 0x22	; 34
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a7 36       	cpi	r26, 0x67	; 103
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
 124:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include "led.h"

static uint8_t Leds;
void led_init()
{
	Leds = DDRL = PORTL = 0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0b 01 	sts	0x010B, r24
 132:	80 93 0a 01 	sts	0x010A, r24
 136:	80 93 22 02 	sts	0x0222, r24
}
 13a:	08 95       	ret

0000013c <led_on_all>:

void led_on_all(void)
{
	Leds = PORTL = 0x00;
 13c:	10 92 0b 01 	sts	0x010B, r1
 140:	10 92 22 02 	sts	0x0222, r1
}
 144:	08 95       	ret

00000146 <led_off_all>:

void led_off_all(void)
{
	Leds = PORTL = 0xff;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	80 93 0b 01 	sts	0x010B, r24
 14c:	80 93 22 02 	sts	0x0222, r24
}
 150:	08 95       	ret

00000152 <led_on>:

void led_on(uint8_t led_no)
{
	Leds &= ~(1 << led_no);
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <led_on+0xa>
 158:	22 0f       	add	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	8a 95       	dec	r24
 15e:	e2 f7       	brpl	.-8      	; 0x158 <led_on+0x6>
 160:	20 95       	com	r18
 162:	80 91 22 02 	lds	r24, 0x0222
 166:	28 23       	and	r18, r24
 168:	20 93 22 02 	sts	0x0222, r18
	PORTL = Leds;
 16c:	20 93 0b 01 	sts	0x010B, r18
}
 170:	08 95       	ret

00000172 <led_off>:

void led_off(uint8_t led_no)
{
	Leds |= (1 << led_no);
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <led_off+0xa>
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <led_off+0x6>
 180:	80 91 22 02 	lds	r24, 0x0222
 184:	82 2b       	or	r24, r18
 186:	80 93 22 02 	sts	0x0222, r24
	PORTL = Leds;
 18a:	80 93 0b 01 	sts	0x010B, r24
}
 18e:	08 95       	ret

00000190 <led_set>:

void led_set(uint8_t led_mask)
{
	Leds = ~led_mask;
 190:	80 95       	com	r24
 192:	80 93 22 02 	sts	0x0222, r24
	PORTL = Leds;
 196:	80 93 0b 01 	sts	0x010B, r24
}
 19a:	08 95       	ret

0000019c <uart_init>:
char buf[64];
int volatile bufi, txend;

void uart_init()
{
   UBRR0H = 0x00; 	UBRR0L = 0x03; // 115.2KBPS
 19c:	10 92 c5 00 	sts	0x00C5, r1
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	80 93 c4 00 	sts	0x00C4, r24
   UCSR0B |= (1 << TXEN0); // TX enable
 1a6:	e1 ec       	ldi	r30, 0xC1	; 193
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	80 83       	st	Z, r24
   UCSR0B |= (1 << TXCIE0); // TX complete interrupt enable
 1b0:	80 81       	ld	r24, Z
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	80 83       	st	Z, r24
   // sbi(set bit), cbi(clear bit)
}
 1b6:	08 95       	ret

000001b8 <uart_putstart>:

void uart_putstart(char str[])
{
 1b8:	bc 01       	movw	r22, r24
	char ch;

	while(!txend); txend = 0;
 1ba:	80 91 25 02 	lds	r24, 0x0225
 1be:	90 91 26 02 	lds	r25, 0x0226
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	d1 f3       	breq	.-12     	; 0x1ba <uart_putstart+0x2>
 1c6:	10 92 26 02 	sts	0x0226, r1
 1ca:	10 92 25 02 	sts	0x0225, r1

	strcpy(buf, str);	bufi = 0;
 1ce:	87 e2       	ldi	r24, 0x27	; 39
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <strcpy>
 1d6:	10 92 24 02 	sts	0x0224, r1
 1da:	10 92 23 02 	sts	0x0223, r1
	ch = buf[bufi++];
 1de:	80 91 23 02 	lds	r24, 0x0223
 1e2:	90 91 24 02 	lds	r25, 0x0224
 1e6:	fc 01       	movw	r30, r24
 1e8:	e9 5d       	subi	r30, 0xD9	; 217
 1ea:	fd 4f       	sbci	r31, 0xFD	; 253
 1ec:	20 81       	ld	r18, Z
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 24 02 	sts	0x0224, r25
 1f4:	80 93 23 02 	sts	0x0223, r24

	UDR0 = ch;
 1f8:	20 93 c6 00 	sts	0x00C6, r18
}
 1fc:	08 95       	ret

000001fe <__vector_27>:

///////////////////////////////////////
ISR(USART0_TX_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
	char ch = buf[bufi];
 216:	e0 91 23 02 	lds	r30, 0x0223
 21a:	f0 91 24 02 	lds	r31, 0x0224
 21e:	e9 5d       	subi	r30, 0xD9	; 217
 220:	fd 4f       	sbci	r31, 0xFD	; 253
 222:	20 81       	ld	r18, Z
	if (!ch) { txend = 1; return; }
 224:	22 23       	and	r18, r18
 226:	39 f4       	brne	.+14     	; 0x236 <__vector_27+0x38>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 26 02 	sts	0x0226, r25
 230:	80 93 25 02 	sts	0x0225, r24
 234:	16 c0       	rjmp	.+44     	; 0x262 <__vector_27+0x64>
	if (ch == '\n') buf[bufi] = '\r';	// \n new line, \r carrage return
 236:	2a 30       	cpi	r18, 0x0A	; 10
 238:	49 f4       	brne	.+18     	; 0x24c <__vector_27+0x4e>
 23a:	e0 91 23 02 	lds	r30, 0x0223
 23e:	f0 91 24 02 	lds	r31, 0x0224
 242:	e9 5d       	subi	r30, 0xD9	; 217
 244:	fd 4f       	sbci	r31, 0xFD	; 253
 246:	8d e0       	ldi	r24, 0x0D	; 13
 248:	80 83       	st	Z, r24
 24a:	09 c0       	rjmp	.+18     	; 0x25e <__vector_27+0x60>
	else bufi++;
 24c:	80 91 23 02 	lds	r24, 0x0223
 250:	90 91 24 02 	lds	r25, 0x0224
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 24 02 	sts	0x0224, r25
 25a:	80 93 23 02 	sts	0x0223, r24

	UDR0 = ch;
 25e:	20 93 c6 00 	sts	0x00C6, r18
}
 262:	ff 91       	pop	r31
 264:	ef 91       	pop	r30
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <main>:
#include "led.h"
#include "uart.h"

int main()
{
   uart_init();
 27a:	0e 94 ce 00 	call	0x19c	; 0x19c <uart_init>
   led_init();
 27e:	0e 94 96 00 	call	0x12c	; 0x12c <led_init>

   sei();
 282:	78 94       	sei

   led_off_all();
 284:	0e 94 a3 00 	call	0x146	; 0x146 <led_off_all>
 288:	ca e0       	ldi	r28, 0x0A	; 10
 28a:	d0 e0       	ldi	r29, 0x00	; 0

   for(int i=0; i<10; i++) {
   		uart_putstart("Test 1 Line \n");
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_putstart>
		uart_putstart("B Line \n");
 294:	8e e0       	ldi	r24, 0x0E	; 14
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_putstart>
 29c:	21 97       	sbiw	r28, 0x01	; 1

   sei();

   led_off_all();

   for(int i=0; i<10; i++) {
 29e:	b1 f7       	brne	.-20     	; 0x28c <main+0x12>
   		uart_putstart("Test 1 Line \n");
		uart_putstart("B Line \n");
   }
   uart_putstart("The END!!\n");
 2a0:	87 e1       	ldi	r24, 0x17	; 23
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <uart_putstart>
   led_on(0);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 a9 00 	call	0x152	; 0x152 <led_on>
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <main+0x34>

000002b0 <strcpy>:
 2b0:	fb 01       	movw	r30, r22
 2b2:	dc 01       	movw	r26, r24
 2b4:	01 90       	ld	r0, Z+
 2b6:	0d 92       	st	X+, r0
 2b8:	00 20       	and	r0, r0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <strcpy+0x4>
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
