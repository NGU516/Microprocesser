
pjt14_I2C_TCN75.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f0  00800200  00002996  00002a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  008004f0  008004f0  00002d1a  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000508  00000000  00000000  00004238  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005178  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027a7  00000000  00000000  000098b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000268c  00000000  00000000  0000c05f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d68  00000000  00000000  0000e6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6b  00000000  00000000  0000f454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ec8  00000000  00000000  000100bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00012f87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_24>
      64:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e9       	ldi	r30, 0x96	; 150
      fc:	f9 e2       	ldi	r31, 0x29	; 41
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3f       	cpi	r26, 0xF0	; 240
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	16 e0       	ldi	r17, 0x06	; 6
     112:	a0 ef       	ldi	r26, 0xF0	; 240
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a4 33       	cpi	r26, 0x34	; 52
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <main>
     124:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include <avr/interrupt.h>
#include "task_queue.h"

void adc_init()
{
	cbi(DDRF, PF0);			// input PF0(=ADC0)GPIO
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;	// Ref : 1.1v, Port : PF0
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);		// ADC enable
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);			// warming up
	sbi(ADCSRA, ADIE);		// ADC interruput enable
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);		// start conversion
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <__vector_29>:

////////////////////////////////////////////
ISR(ADC_vect)
{
     156:	1f 92       	push	r1
     158:	0f 92       	push	r0
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	0f 92       	push	r0
     15e:	0b b6       	in	r0, 0x3b	; 59
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	2f 93       	push	r18
     16a:	3f 93       	push	r19
     16c:	4f 93       	push	r20
     16e:	5f 93       	push	r21
     170:	6f 93       	push	r22
     172:	7f 93       	push	r23
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
     178:	af 93       	push	r26
     17a:	bf 93       	push	r27
     17c:	ef 93       	push	r30
     17e:	ff 93       	push	r31
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	28 97       	sbiw	r28, 0x08	; 8
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	cd bf       	out	0x3d, r28	; 61
	uint16_t data;
	char	 arg[8];

	data = ADCW & 0x03ff;
     18e:	80 91 78 00 	lds	r24, 0x0078
     192:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);		// ADC stop
     196:	ea e7       	ldi	r30, 0x7A	; 122
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	20 81       	ld	r18, Z
     19c:	2f 77       	andi	r18, 0x7F	; 127
     19e:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <__vector_29+0x4c>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <__vector_29+0x4e>
     1a4:	ed b7       	in	r30, 0x3d	; 61
     1a6:	fe b7       	in	r31, 0x3e	; 62
     1a8:	31 96       	adiw	r30, 0x01	; 1
     1aa:	8e 01       	movw	r16, r28
     1ac:	0f 5f       	subi	r16, 0xFF	; 255
     1ae:	1f 4f       	sbci	r17, 0xFF	; 255
     1b0:	ad b7       	in	r26, 0x3d	; 61
     1b2:	be b7       	in	r27, 0x3e	; 62
     1b4:	12 96       	adiw	r26, 0x02	; 2
     1b6:	1c 93       	st	X, r17
     1b8:	0e 93       	st	-X, r16
     1ba:	11 97       	sbiw	r26, 0x01	; 1
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	32 e0       	ldi	r19, 0x02	; 2
     1c0:	33 83       	std	Z+3, r19	; 0x03
     1c2:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t data;
	char	 arg[8];

	data = ADCW & 0x03ff;
     1c4:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);		// ADC stop

	sprintf(arg, "%d", data);
     1c6:	95 83       	std	Z+5, r25	; 0x05
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	0e 94 b3 11 	call	0x2366	; 0x2366 <sprintf>

	task_tc1047(arg);
     1ce:	8d b7       	in	r24, 0x3d	; 61
     1d0:	9e b7       	in	r25, 0x3e	; 62
     1d2:	06 96       	adiw	r24, 0x06	; 6
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	9e bf       	out	0x3e, r25	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	8d bf       	out	0x3d, r24	; 61
     1de:	c8 01       	movw	r24, r16
     1e0:	0e 94 1f 04 	call	0x83e	; 0x83e <task_tc1047>
}
     1e4:	28 96       	adiw	r28, 0x08	; 8
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	ff 91       	pop	r31
     1f0:	ef 91       	pop	r30
     1f2:	bf 91       	pop	r27
     1f4:	af 91       	pop	r26
     1f6:	9f 91       	pop	r25
     1f8:	8f 91       	pop	r24
     1fa:	7f 91       	pop	r23
     1fc:	6f 91       	pop	r22
     1fe:	5f 91       	pop	r21
     200:	4f 91       	pop	r20
     202:	3f 91       	pop	r19
     204:	2f 91       	pop	r18
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	0f 90       	pop	r0
     20c:	0b be       	out	0x3b, r0	; 59
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <is_prime>:
#include <stdlib.h>
#include "linked_list.h"
#include "Timer_linked_list.h"

int is_prime(int n)
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	fc 01       	movw	r30, r24
	int i;
	for (i = 2; i <= n/2; i++)
     21e:	62 e0       	ldi	r22, 0x02	; 2
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
     226:	eb 01       	movw	r28, r22
     228:	22 e0       	ldi	r18, 0x02	; 2
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	08 c0       	rjmp	.+16     	; 0x23e <is_prime+0x26>
		if((n % i) == 0)
     22e:	cf 01       	movw	r24, r30
     230:	b9 01       	movw	r22, r18
     232:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	41 f0       	breq	.+16     	; 0x24a <is_prime+0x32>
#include "Timer_linked_list.h"

int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	3f 4f       	sbci	r19, 0xFF	; 255
     23e:	c2 17       	cp	r28, r18
     240:	d3 07       	cpc	r29, r19
     242:	ac f7       	brge	.-22     	; 0x22e <is_prime+0x16>
		if((n % i) == 0)
			return 0;
	return 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return 0;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <app_prime>:

void app_prime(char *ap)
{
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     264:	00 97       	sbiw	r24, 0x00	; 0
     266:	21 f0       	breq	.+8      	; 0x270 <app_prime+0x1c>
     268:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
     26c:	7c 01       	movw	r14, r24
     26e:	04 c0       	rjmp	.+8      	; 0x278 <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     270:	90 ed       	ldi	r25, 0xD0	; 208
     272:	e9 2e       	mov	r14, r25
     274:	97 e0       	ldi	r25, 0x07	; 7
     276:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     278:	c2 e0       	ldi	r28, 0x02	; 2
     27a:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	c8 2e       	mov	r12, r24
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     288:	16 c0       	rjmp	.+44     	; 0x2b6 <app_prime+0x62>
		if (is_prime(n)) {
     28a:	ce 01       	movw	r24, r28
     28c:	0e 94 0c 01 	call	0x218	; 0x218 <is_prime>
     290:	00 97       	sbiw	r24, 0x00	; 0
     292:	81 f0       	breq	.+32     	; 0x2b4 <app_prime+0x60>
			count++;
     294:	0f 5f       	subi	r16, 0xFF	; 255
     296:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     298:	00 d0       	rcall	.+0      	; 0x29a <app_prime+0x46>
     29a:	0f 92       	push	r0
     29c:	ed b7       	in	r30, 0x3d	; 61
     29e:	fe b7       	in	r31, 0x3e	; 62
     2a0:	d2 82       	std	Z+2, r13	; 0x02
     2a2:	c1 82       	std	Z+1, r12	; 0x01
     2a4:	d4 83       	std	Z+4, r29	; 0x04
     2a6:	c3 83       	std	Z+3, r28	; 0x03
     2a8:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     2b4:	21 96       	adiw	r28, 0x01	; 1
     2b6:	ec 16       	cp	r14, r28
     2b8:	fd 06       	cpc	r15, r29
     2ba:	3c f7       	brge	.-50     	; 0x28a <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     2bc:	00 d0       	rcall	.+0      	; 0x2be <app_prime+0x6a>
     2be:	0f 92       	push	r0
     2c0:	8d e1       	ldi	r24, 0x1D	; 29
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	ed b7       	in	r30, 0x3d	; 61
     2c6:	fe b7       	in	r31, 0x3e	; 62
     2c8:	92 83       	std	Z+2, r25	; 0x02
     2ca:	81 83       	std	Z+1, r24	; 0x01
     2cc:	14 83       	std	Z+4, r17	; 0x04
     2ce:	03 83       	std	Z+3, r16	; 0x03
     2d0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	cf 90       	pop	r12
     2ec:	08 95       	ret

000002ee <app_list>:

void app_list(char *ap)
{
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	28 97       	sbiw	r28, 0x08	; 8
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	19 f0       	breq	.+6      	; 0x312 <app_list+0x24>
     30c:	fc 01       	movw	r30, r24
     30e:	10 81       	ld	r17, Z
     310:	01 c0       	rjmp	.+2      	; 0x314 <app_list+0x26>
	printf("count=%d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     312:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]

	while(1) {
		printf( ">  ");
     314:	27 e2       	ldi	r18, 0x27	; 39
     316:	e2 2e       	mov	r14, r18
     318:	22 e0       	ldi	r18, 0x02	; 2
     31a:	f2 2e       	mov	r15, r18
     31c:	0f 92       	push	r0
     31e:	0f 92       	push	r0
     320:	ed b7       	in	r30, 0x3d	; 61
     322:	fe b7       	in	r31, 0x3e	; 62
     324:	f2 82       	std	Z+2, r15	; 0x02
     326:	e1 82       	std	Z+1, r14	; 0x01
     328:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	40 91 2e 06 	lds	r20, 0x062E
     334:	50 91 2f 06 	lds	r21, 0x062F
     338:	ce 01       	movw	r24, r28
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	68 e0       	ldi	r22, 0x08	; 8
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	0e 94 12 11 	call	0x2224	; 0x2224 <fgets>
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	a1 f0       	breq	.+40     	; 0x370 <app_list+0x82>
			break;
		np = get_node();
     348:	0e 94 8d 02 	call	0x51a	; 0x51a <get_node>
		np->data = buf[0];
     34c:	29 81       	ldd	r18, Y+1	; 0x01
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
     352:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     354:	18 36       	cpi	r17, 0x68	; 104
     356:	19 f0       	breq	.+6      	; 0x35e <app_list+0x70>
     358:	14 37       	cpi	r17, 0x74	; 116
     35a:	39 f4       	brne	.+14     	; 0x36a <app_list+0x7c>
     35c:	03 c0       	rjmp	.+6      	; 0x364 <app_list+0x76>
			case 'h'	: insert_node_head(np); break;
     35e:	0e 94 95 02 	call	0x52a	; 0x52a <insert_node_head>
     362:	dc cf       	rjmp	.-72     	; 0x31c <app_list+0x2e>
			case 't'	: insert_node_tail(np); break;
     364:	0e 94 aa 02 	call	0x554	; 0x554 <insert_node_tail>
     368:	d9 cf       	rjmp	.-78     	; 0x31c <app_list+0x2e>
			default 	: insert_node_ascn(np); //	'a'
     36a:	0e 94 c1 02 	call	0x582	; 0x582 <insert_node_ascn>
     36e:	d6 cf       	rjmp	.-84     	; 0x31c <app_list+0x2e>
		}
	}

	tour_list();
     370:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <tour_list>
	free_list();
     374:	0e 94 28 03 	call	0x650	; 0x650 <free_list>
}
     378:	28 96       	adiw	r28, 0x08	; 8
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	08 95       	ret

00000390 <app_timer>:

void app_timer(char *ap)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	62 97       	sbiw	r28, 0x12	; 18
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	de bf       	out	0x3e, r29	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     3a8:	0b e2       	ldi	r16, 0x2B	; 43
     3aa:	12 e0       	ldi	r17, 0x02	; 2
     3ac:	0f 92       	push	r0
     3ae:	0f 92       	push	r0
     3b0:	ed b7       	in	r30, 0x3d	; 61
     3b2:	fe b7       	in	r31, 0x3e	; 62
     3b4:	12 83       	std	Z+2, r17	; 0x02
     3b6:	01 83       	std	Z+1, r16	; 0x01
     3b8:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	40 91 2e 06 	lds	r20, 0x062E
     3c4:	50 91 2f 06 	lds	r21, 0x062F
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	68 e0       	ldi	r22, 0x08	; 8
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	0e 94 12 11 	call	0x2224	; 0x2224 <fgets>
     3d4:	00 97       	sbiw	r24, 0x00	; 0
     3d6:	61 f0       	breq	.+24     	; 0x3f0 <app_timer+0x60>
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
     3e0:	bc 01       	movw	r22, r24
     3e2:	00 97       	sbiw	r24, 0x00	; 0
     3e4:	29 f0       	breq	.+10     	; 0x3f0 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     3e6:	ce 01       	movw	r24, r28
     3e8:	09 96       	adiw	r24, 0x09	; 9
     3ea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <insert_timer>
	}
     3ee:	de cf       	rjmp	.-68     	; 0x3ac <app_timer+0x1c>

	tour_timer();
     3f0:	0e 94 b8 06 	call	0xd70	; 0xd70 <tour_timer>
	free_timer();
     3f4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <free_timer>
}
     3f8:	62 96       	adiw	r28, 0x12	; 18
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <task_prime>:

void task_prime(char *ap)
{
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     41e:	00 97       	sbiw	r24, 0x00	; 0
     420:	41 f0       	breq	.+16     	; 0x432 <task_prime+0x24>
     422:	fc 01       	movw	r30, r24
     424:	20 81       	ld	r18, Z
     426:	22 23       	and	r18, r18
     428:	21 f0       	breq	.+8      	; 0x432 <task_prime+0x24>
     42a:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
     42e:	8c 01       	movw	r16, r24
     430:	02 c0       	rjmp	.+4      	; 0x436 <task_prime+0x28>
	free_timer();
}

void task_prime(char *ap)
{
	int n, t= 2000, count = 0;
     432:	00 ed       	ldi	r16, 0xD0	; 208
     434:	17 e0       	ldi	r17, 0x07	; 7
     436:	ee 24       	eor	r14, r14
     438:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     43a:	c2 e0       	ldi	r28, 0x02	; 2
     43c:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     43e:	33 e0       	ldi	r19, 0x03	; 3
     440:	c3 2e       	mov	r12, r19
     442:	32 e0       	ldi	r19, 0x02	; 2
     444:	d3 2e       	mov	r13, r19
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     446:	17 c0       	rjmp	.+46     	; 0x476 <task_prime+0x68>
		if (is_prime(n)) {
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 0c 01 	call	0x218	; 0x218 <is_prime>
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	89 f0       	breq	.+34     	; 0x474 <task_prime+0x66>
			count++;
     452:	08 94       	sec
     454:	e1 1c       	adc	r14, r1
     456:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!!\n", n);
     458:	00 d0       	rcall	.+0      	; 0x45a <task_prime+0x4c>
     45a:	0f 92       	push	r0
     45c:	ed b7       	in	r30, 0x3d	; 61
     45e:	fe b7       	in	r31, 0x3e	; 62
     460:	d2 82       	std	Z+2, r13	; 0x02
     462:	c1 82       	std	Z+1, r12	; 0x01
     464:	d4 83       	std	Z+4, r29	; 0x04
     466:	c3 83       	std	Z+3, r28	; 0x03
     468:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     474:	21 96       	adiw	r28, 0x01	; 1
     476:	0c 17       	cp	r16, r28
     478:	1d 07       	cpc	r17, r29
     47a:	34 f7       	brge	.-52     	; 0x448 <task_prime+0x3a>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     47c:	00 d0       	rcall	.+0      	; 0x47e <task_prime+0x70>
     47e:	0f 92       	push	r0
     480:	8d e1       	ldi	r24, 0x1D	; 29
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	ed b7       	in	r30, 0x3d	; 61
     486:	fe b7       	in	r31, 0x3e	; 62
     488:	92 83       	std	Z+2, r25	; 0x02
     48a:	81 83       	std	Z+1, r24	; 0x01
     48c:	f4 82       	std	Z+4, r15	; 0x04
     48e:	e3 82       	std	Z+3, r14	; 0x03
     490:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	08 95       	ret

000004ae <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	80 93 0b 01 	sts	0x010B, r24
     4b4:	80 93 0a 01 	sts	0x010A, r24
}
     4b8:	08 95       	ret

000004ba <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
     4ba:	10 92 0b 01 	sts	0x010B, r1
     4be:	10 92 f0 04 	sts	0x04F0, r1
}
     4c2:	08 95       	ret

000004c4 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	80 93 0b 01 	sts	0x010B, r24
     4ca:	80 93 f0 04 	sts	0x04F0, r24
}
     4ce:	08 95       	ret

000004d0 <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <led_on+0xa>
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	8a 95       	dec	r24
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <led_on+0x6>
     4de:	20 95       	com	r18
     4e0:	80 91 f0 04 	lds	r24, 0x04F0
     4e4:	28 23       	and	r18, r24
     4e6:	20 93 f0 04 	sts	0x04F0, r18
	PORTL = Leds;
     4ea:	20 93 0b 01 	sts	0x010B, r18
}
     4ee:	08 95       	ret

000004f0 <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <led_off+0xa>
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	8a 95       	dec	r24
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <led_off+0x6>
     4fe:	80 91 f0 04 	lds	r24, 0x04F0
     502:	82 2b       	or	r24, r18
     504:	80 93 f0 04 	sts	0x04F0, r24
	PORTL = Leds;
     508:	80 93 0b 01 	sts	0x010B, r24
}
     50c:	08 95       	ret

0000050e <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     50e:	80 95       	com	r24
     510:	80 93 f0 04 	sts	0x04F0, r24
	PORTL = Leds;
     514:	80 93 0b 01 	sts	0x010B, r24
}
     518:	08 95       	ret

0000051a <get_node>:

struct node *get_node()
{
	struct node *cp;	// current pointer

	cp = (struct node *)malloc(sizeof(struct node));
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <malloc>
	return cp;
}
     522:	08 95       	ret

00000524 <free_node>:

void free_node(struct node *np)
{
	free(np);
     524:	0e 94 17 10 	call	0x202e	; 0x202e <free>
}
     528:	08 95       	ret

0000052a <insert_node_head>:

void insert_node_head(struct node *np)
{
     52a:	fc 01       	movw	r30, r24
	if (!Head) {
     52c:	80 91 f1 04 	lds	r24, 0x04F1
     530:	90 91 f2 04 	lds	r25, 0x04F2
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	39 f4       	brne	.+14     	; 0x546 <insert_node_head+0x1c>
		Head = np;
     538:	f0 93 f2 04 	sts	0x04F2, r31
     53c:	e0 93 f1 04 	sts	0x04F1, r30
		np->link = NULL;
     540:	13 82       	std	Z+3, r1	; 0x03
     542:	12 82       	std	Z+2, r1	; 0x02
     544:	08 95       	ret
	}
	else {
		np->link = Head;
     546:	93 83       	std	Z+3, r25	; 0x03
     548:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     54a:	f0 93 f2 04 	sts	0x04F2, r31
     54e:	e0 93 f1 04 	sts	0x04F1, r30
     552:	08 95       	ret

00000554 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if (!Head)
     554:	e0 91 f1 04 	lds	r30, 0x04F1
     558:	f0 91 f2 04 	lds	r31, 0x04F2
     55c:	30 97       	sbiw	r30, 0x00	; 0
     55e:	31 f4       	brne	.+12     	; 0x56c <insert_node_tail+0x18>
		Head = np;
     560:	90 93 f2 04 	sts	0x04F2, r25
     564:	80 93 f1 04 	sts	0x04F1, r24
     568:	08 c0       	rjmp	.+16     	; 0x57a <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     56a:	f9 01       	movw	r30, r18
     56c:	22 81       	ldd	r18, Z+2	; 0x02
     56e:	33 81       	ldd	r19, Z+3	; 0x03
     570:	21 15       	cp	r18, r1
     572:	31 05       	cpc	r19, r1
     574:	d1 f7       	brne	.-12     	; 0x56a <insert_node_tail+0x16>
		cp->link = np;
     576:	93 83       	std	Z+3, r25	; 0x03
     578:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     57a:	fc 01       	movw	r30, r24
     57c:	13 82       	std	Z+3, r1	; 0x03
     57e:	12 82       	std	Z+2, r1	; 0x02
}
     580:	08 95       	ret

00000582 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	fc 01       	movw	r30, r24
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
     588:	a0 91 f1 04 	lds	r26, 0x04F1
     58c:	b0 91 f2 04 	lds	r27, 0x04F2
     590:	10 97       	sbiw	r26, 0x00	; 0
     592:	49 f0       	breq	.+18     	; 0x5a6 <insert_node_ascn+0x24>
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     594:	60 81       	ld	r22, Z
     596:	71 81       	ldd	r23, Z+1	; 0x01
     598:	3a 2f       	mov	r19, r26
     59a:	2b 2f       	mov	r18, r27
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	d0 e0       	ldi	r29, 0x00	; 0
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
			np->link = Head;
			Head = np;
     5a0:	58 2f       	mov	r21, r24
     5a2:	4f 2f       	mov	r20, r31
     5a4:	1b c0       	rjmp	.+54     	; 0x5dc <insert_node_ascn+0x5a>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
		Head = np;
     5a6:	90 93 f2 04 	sts	0x04F2, r25
     5aa:	80 93 f1 04 	sts	0x04F1, r24
		np->link = NULL;
     5ae:	13 82       	std	Z+3, r1	; 0x03
     5b0:	12 82       	std	Z+2, r1	; 0x02
     5b2:	1e c0       	rjmp	.+60     	; 0x5f0 <insert_node_ascn+0x6e>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
     5b4:	20 97       	sbiw	r28, 0x00	; 0
     5b6:	21 f4       	brne	.+8      	; 0x5c0 <insert_node_ascn+0x3e>
			np->link = Head;
     5b8:	32 83       	std	Z+2, r19	; 0x02
     5ba:	23 83       	std	Z+3, r18	; 0x03
			Head = np;
     5bc:	9a 01       	movw	r18, r20
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <insert_node_ascn+0x4a>
		}
		else {
			np->link = pp->link;
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	9b 81       	ldd	r25, Y+3	; 0x03
     5c4:	93 83       	std	Z+3, r25	; 0x03
     5c6:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     5c8:	fb 83       	std	Y+3, r31	; 0x03
     5ca:	ea 83       	std	Y+2, r30	; 0x02
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	8d 91       	ld	r24, X+
     5d0:	9c 91       	ld	r25, X
     5d2:	13 97       	sbiw	r26, 0x03	; 3
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5d4:	00 97       	sbiw	r24, 0x00	; 0
     5d6:	41 f0       	breq	.+16     	; 0x5e8 <insert_node_ascn+0x66>
     5d8:	ed 01       	movw	r28, r26
												pp = cp, cp = cp->link)
     5da:	dc 01       	movw	r26, r24
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     5dc:	8d 91       	ld	r24, X+
     5de:	9c 91       	ld	r25, X
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	86 17       	cp	r24, r22
     5e4:	97 07       	cpc	r25, r23
     5e6:	34 f3       	brlt	.-52     	; 0x5b4 <insert_node_ascn+0x32>
     5e8:	30 93 f1 04 	sts	0x04F1, r19
     5ec:	20 93 f2 04 	sts	0x04F2, r18
			np->link = pp->link;
			pp->link = np;
		}

	}
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <tour_list>:

void tour_list()
{
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     5fe:	8a e0       	ldi	r24, 0x0A	; 10
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 7e 11 	call	0x22fc	; 0x22fc <putchar>
	for (cp = Head; cp != NULL; cp = cp->link)
     606:	c0 91 f1 04 	lds	r28, 0x04F1
     60a:	d0 91 f2 04 	lds	r29, 0x04F2
		printf("-->%c ", cp->data);
     60e:	0f e2       	ldi	r16, 0x2F	; 47
     610:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     612:	13 c0       	rjmp	.+38     	; 0x63a <tour_list+0x44>
		printf("-->%c ", cp->data);
     614:	00 d0       	rcall	.+0      	; 0x616 <tour_list+0x20>
     616:	0f 92       	push	r0
     618:	ed b7       	in	r30, 0x3d	; 61
     61a:	fe b7       	in	r31, 0x3e	; 62
     61c:	12 83       	std	Z+2, r17	; 0x02
     61e:	01 83       	std	Z+1, r16	; 0x01
     620:	88 81       	ld	r24, Y
     622:	99 81       	ldd	r25, Y+1	; 0x01
     624:	94 83       	std	Z+4, r25	; 0x04
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     62c:	0a 80       	ldd	r0, Y+2	; 0x02
     62e:	db 81       	ldd	r29, Y+3	; 0x03
     630:	c0 2d       	mov	r28, r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	20 97       	sbiw	r28, 0x00	; 0
     63c:	59 f7       	brne	.-42     	; 0x614 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 7e 11 	call	0x22fc	; 0x22fc <putchar>
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <free_list>:

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     650:	09 c0       	rjmp	.+18     	; 0x664 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     652:	fc 01       	movw	r30, r24
     654:	22 81       	ldd	r18, Z+2	; 0x02
     656:	33 81       	ldd	r19, Z+3	; 0x03
     658:	30 93 f2 04 	sts	0x04F2, r19
     65c:	20 93 f1 04 	sts	0x04F1, r18
	return cp;
}

void free_node(struct node *np)
{
	free(np);
     660:	0e 94 17 10 	call	0x202e	; 0x202e <free>

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     664:	80 91 f1 04 	lds	r24, 0x04F1
     668:	90 91 f2 04 	lds	r25, 0x04F2
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	89 f7       	brne	.-30     	; 0x652 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     670:	08 95       	ret

00000672 <spi_init>:


void spi_init()
{
	// PORTB
	sbi(DDRB, 0);	// output, nSS,nCS pin
     672:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB, 1);	// output  SCK pin
     674:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB, 2); 	// output  MOSI
     676:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB, 3);	// input   MISO
     678:	23 98       	cbi	0x04, 3	; 4

	sbi(SPSR, SPI2X);	// double speed
     67a:	8d b5       	in	r24, 0x2d	; 45
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	8d bd       	out	0x2d, r24	; 45

	SPCR = ((1 << MSTR) | (1 << SPE) | (1 << SPIE));	// MASTER, MSB first, Fosc/4
     680:	80 ed       	ldi	r24, 0xD0	; 208
     682:	8c bd       	out	0x2c, r24	; 44
}
     684:	08 95       	ret

00000686 <spi_select>:

void spi_select()
{
	cbi(PORTB, 0);	// cbi(PORTB, nSS)
     686:	28 98       	cbi	0x05, 0	; 5
}
     688:	08 95       	ret

0000068a <spi_release>:

void spi_release()
{
	sbi(PORTB, 0);	// sbi(PORTB, nSS)
     68a:	28 9a       	sbi	0x05, 0	; 5
}
     68c:	08 95       	ret

0000068e <spi_write>:

void spi_write(uint8_t data)
{
	SPDR = data;
     68e:	8e bd       	out	0x2e, r24	; 46
}
     690:	08 95       	ret

00000692 <__vector_24>:


////////////////////////////////////
ISR(SPI_STC_vect)
{
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	0b b6       	in	r0, 0x3b	; 59
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	2a 97       	sbiw	r28, 0x0a	; 10
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	uint8_t		data;

	data = SPDR;
     6c6:	2e b5       	in	r18, 0x2e	; 46
	task.fun = task_tc77;
     6c8:	8f e6       	ldi	r24, 0x6F	; 111
     6ca:	94 e0       	ldi	r25, 0x04	; 4
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg, "%d", data);
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <__vector_24+0x40>
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <__vector_24+0x42>
     6d4:	ed b7       	in	r30, 0x3d	; 61
     6d6:	fe b7       	in	r31, 0x3e	; 62
     6d8:	31 96       	adiw	r30, 0x01	; 1
     6da:	ce 01       	movw	r24, r28
     6dc:	03 96       	adiw	r24, 0x03	; 3
     6de:	ad b7       	in	r26, 0x3d	; 61
     6e0:	be b7       	in	r27, 0x3e	; 62
     6e2:	12 96       	adiw	r26, 0x02	; 2
     6e4:	9c 93       	st	X, r25
     6e6:	8e 93       	st	-X, r24
     6e8:	11 97       	sbiw	r26, 0x01	; 1
     6ea:	89 e3       	ldi	r24, 0x39	; 57
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	93 83       	std	Z+3, r25	; 0x03
     6f0:	82 83       	std	Z+2, r24	; 0x02
     6f2:	24 83       	std	Z+4, r18	; 0x04
     6f4:	15 82       	std	Z+5, r1	; 0x05
     6f6:	0e 94 b3 11 	call	0x2366	; 0x2366 <sprintf>
	task_insert(&task);
     6fa:	8d b7       	in	r24, 0x3d	; 61
     6fc:	9e b7       	in	r25, 0x3e	; 62
     6fe:	06 96       	adiw	r24, 0x06	; 6
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	9e bf       	out	0x3e, r25	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	8d bf       	out	0x3d, r24	; 61
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	0e 94 aa 03 	call	0x754	; 0x754 <task_insert>
}
     712:	2a 96       	adiw	r28, 0x0a	; 10
     714:	de bf       	out	0x3e, r29	; 62
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0b be       	out	0x3b, r0	; 59
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <task_init>:
#include "spi.h"
#include "i2c.h"

void task_init()
{
	Task_f = Task_r = 0;
     742:	10 92 fe 04 	sts	0x04FE, r1
     746:	10 92 fd 04 	sts	0x04FD, r1
     74a:	10 92 a0 05 	sts	0x05A0, r1
     74e:	10 92 9f 05 	sts	0x059F, r1
}
     752:	08 95       	ret

00000754 <task_insert>:

int task_insert(struct task *tskp)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	48 2f       	mov	r20, r24
     75a:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
     75c:	80 91 fd 04 	lds	r24, 0x04FD
     760:	90 91 fe 04 	lds	r25, 0x04FE
     764:	c0 91 9f 05 	lds	r28, 0x059F
     768:	d0 91 a0 05 	lds	r29, 0x05A0
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	20 e1       	ldi	r18, 0x10	; 16
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	b9 01       	movw	r22, r18
     774:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
     778:	8c 17       	cp	r24, r28
     77a:	9d 07       	cpc	r25, r29
     77c:	31 f1       	breq	.+76     	; 0x7ca <task_insert+0x76>
		return 0;
	Task_r = (Task_f + 1) % MAX_TASK;
     77e:	80 91 9f 05 	lds	r24, 0x059F
     782:	90 91 a0 05 	lds	r25, 0x05A0
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	b9 01       	movw	r22, r18
     78a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
     78e:	90 93 fe 04 	sts	0x04FE, r25
     792:	80 93 fd 04 	sts	0x04FD, r24
	Task_q[Task_r] = *tskp;
     796:	80 91 fd 04 	lds	r24, 0x04FD
     79a:	90 91 fe 04 	lds	r25, 0x04FE
     79e:	dc 01       	movw	r26, r24
     7a0:	aa 0f       	add	r26, r26
     7a2:	bb 1f       	adc	r27, r27
     7a4:	63 e0       	ldi	r22, 0x03	; 3
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	6a 95       	dec	r22
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <task_insert+0x52>
     7ae:	a8 0f       	add	r26, r24
     7b0:	b9 1f       	adc	r27, r25
     7b2:	a1 50       	subi	r26, 0x01	; 1
     7b4:	bb 4f       	sbci	r27, 0xFB	; 251
     7b6:	c4 2f       	mov	r28, r20
     7b8:	de 2f       	mov	r29, r30
     7ba:	8a e0       	ldi	r24, 0x0A	; 10
     7bc:	09 90       	ld	r0, Y+
     7be:	0d 92       	st	X+, r0
     7c0:	81 50       	subi	r24, 0x01	; 1
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <task_insert+0x68>
	return 1;
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
		return 0;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_f + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return 1;
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <task_delete>:
int task_delete(struct task *tskp)
{
     7d4:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)	// Empty
     7d6:	40 91 fd 04 	lds	r20, 0x04FD
     7da:	50 91 fe 04 	lds	r21, 0x04FE
     7de:	80 91 9f 05 	lds	r24, 0x059F
     7e2:	90 91 a0 05 	lds	r25, 0x05A0
     7e6:	48 17       	cp	r20, r24
     7e8:	59 07       	cpc	r21, r25
     7ea:	31 f1       	breq	.+76     	; 0x838 <task_delete+0x64>
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
     7ec:	80 91 9f 05 	lds	r24, 0x059F
     7f0:	90 91 a0 05 	lds	r25, 0x05A0
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	60 e1       	ldi	r22, 0x10	; 16
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
     7fe:	90 93 a0 05 	sts	0x05A0, r25
     802:	80 93 9f 05 	sts	0x059F, r24
	*tskp = Task_q[Task_f];
     806:	80 91 9f 05 	lds	r24, 0x059F
     80a:	90 91 a0 05 	lds	r25, 0x05A0
     80e:	fc 01       	movw	r30, r24
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	a3 e0       	ldi	r26, 0x03	; 3
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	aa 95       	dec	r26
     81c:	e1 f7       	brne	.-8      	; 0x816 <task_delete+0x42>
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
     822:	d9 01       	movw	r26, r18
     824:	e1 50       	subi	r30, 0x01	; 1
     826:	fb 4f       	sbci	r31, 0xFB	; 251
     828:	8a e0       	ldi	r24, 0x0A	; 10
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	81 50       	subi	r24, 0x01	; 1
     830:	e1 f7       	brne	.-8      	; 0x82a <task_delete+0x56>
	return 1;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	08 95       	ret
	return 1;
}
int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)	// Empty
		return 0;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
     83c:	08 95       	ret

0000083e <task_tc1047>:
// Analog temperature data
void task_tc1047(char *arg)
{
	static int value;
	static int volatile in_adc = 0;
	if (!strcmp(arg, "")) {		// called from task_cmd or timer task
     83e:	fc 01       	movw	r30, r24
     840:	20 81       	ld	r18, Z
     842:	22 23       	and	r18, r18
     844:	19 f5       	brne	.+70     	; 0x88c <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     846:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 f4 04 	sts	0x04F4, r25
     852:	80 93 f3 04 	sts	0x04F3, r24
     856:	80 91 f3 04 	lds	r24, 0x04F3
     85a:	90 91 f4 04 	lds	r25, 0x04F4
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	d1 f7       	brne	.-12     	; 0x856 <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n", value);
     862:	00 d0       	rcall	.+0      	; 0x864 <task_tc1047+0x26>
     864:	0f 92       	push	r0
     866:	8c e3       	ldi	r24, 0x3C	; 60
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	ed b7       	in	r30, 0x3d	; 61
     86c:	fe b7       	in	r31, 0x3e	; 62
     86e:	92 83       	std	Z+2, r25	; 0x02
     870:	81 83       	std	Z+1, r24	; 0x01
     872:	80 91 f5 04 	lds	r24, 0x04F5
     876:	90 91 f6 04 	lds	r25, 0x04F6
     87a:	94 83       	std	Z+4, r25	; 0x04
     87c:	83 83       	std	Z+3, r24	; 0x03
     87e:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	08 95       	ret
	}
	else {		// called from ISR()
		value = atoi(arg) * (1.1/1023) * 1000;	// get input voltage(mv)
     88c:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
     890:	9c 01       	movw	r18, r24
     892:	b9 01       	movw	r22, r18
     894:	88 27       	eor	r24, r24
     896:	77 fd       	sbrc	r23, 7
     898:	80 95       	com	r24
     89a:	98 2f       	mov	r25, r24
     89c:	0e 94 3e 0c 	call	0x187c	; 0x187c <__floatsisf>
     8a0:	29 e0       	ldi	r18, 0x09	; 9
     8a2:	30 ef       	ldi	r19, 0xF0	; 240
     8a4:	4c e8       	ldi	r20, 0x8C	; 140
     8a6:	5a e3       	ldi	r21, 0x3A	; 58
     8a8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	4a e7       	ldi	r20, 0x7A	; 122
     8b2:	54 e4       	ldi	r21, 0x44	; 68
     8b4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     8b8:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixsfsi>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;				// get degree from input voltage
     8c0:	84 5f       	subi	r24, 0xF4	; 244
     8c2:	91 40       	sbci	r25, 0x01	; 1
     8c4:	6a e0       	ldi	r22, 0x0A	; 10
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
     8cc:	70 93 f6 04 	sts	0x04F6, r23
     8d0:	60 93 f5 04 	sts	0x04F5, r22
		in_adc = 0;
     8d4:	10 92 f4 04 	sts	0x04F4, r1
     8d8:	10 92 f3 04 	sts	0x04F3, r1
     8dc:	08 95       	ret

000008de <task_tc77>:
void task_tc77(char *arg)
{
	static uint8_t state;
	static uint8_t value;

	if (!strcmp(arg, "")) {
     8de:	dc 01       	movw	r26, r24
     8e0:	2c 91       	ld	r18, X
     8e2:	22 23       	and	r18, r18
     8e4:	a9 f4       	brne	.+42     	; 0x910 <task_tc77+0x32>
		state = TC77_WAIT_HI;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 f7 04 	sts	0x04F7, r24
		spi_select();
     8ec:	0e 94 43 03 	call	0x686	; 0x686 <spi_select>
		spi_write(0x00);
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 47 03 	call	0x68e	; 0x68e <spi_write>
		printf("interrupt flag");
     8f6:	0f 92       	push	r0
     8f8:	0f 92       	push	r0
     8fa:	8f e5       	ldi	r24, 0x5F	; 95
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	ed b7       	in	r30, 0x3d	; 61
     900:	fe b7       	in	r31, 0x3e	; 62
     902:	92 83       	std	Z+2, r25	; 0x02
     904:	81 83       	std	Z+1, r24	; 0x01
     906:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	08 95       	ret
	}
	else {
		switch(state) {
     910:	20 91 f7 04 	lds	r18, 0x04F7
     914:	21 30       	cpi	r18, 0x01	; 1
     916:	19 f0       	breq	.+6      	; 0x91e <task_tc77+0x40>
     918:	22 30       	cpi	r18, 0x02	; 2
     91a:	d9 f5       	brne	.+118    	; 0x992 <task_tc77+0xb4>
     91c:	09 c0       	rjmp	.+18     	; 0x930 <task_tc77+0x52>
			case TC77_WAIT_HI :
				value = atoi(arg) << 8;	state = TC77_WAIT_LO; spi_write(0x00);
     91e:	10 92 f8 04 	sts	0x04F8, r1
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	80 93 f7 04 	sts	0x04F7, r24
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 47 03 	call	0x68e	; 0x68e <spi_write>
				break;
     92e:	08 95       	ret
			case TC77_WAIT_LO :
				value |= atoi(arg);	value = (value >> 3) * 0.0625;
     930:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
     934:	60 91 f8 04 	lds	r22, 0x04F8
     938:	68 2b       	or	r22, r24
     93a:	66 95       	lsr	r22
     93c:	66 95       	lsr	r22
     93e:	66 95       	lsr	r22
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 3e 0c 	call	0x187c	; 0x187c <__floatsisf>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e8       	ldi	r20, 0x80	; 128
     950:	5d e3       	ldi	r21, 0x3D	; 61
     952:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__mulsf3>
     956:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
     95a:	60 93 f8 04 	sts	0x04F8, r22
				spi_release();
     95e:	0e 94 45 03 	call	0x68a	; 0x68a <spi_release>
				printf("task_tc77() : current_temperature -> %d degree.\n", value);
     962:	00 d0       	rcall	.+0      	; 0x964 <task_tc77+0x86>
     964:	0f 92       	push	r0
     966:	ed b7       	in	r30, 0x3d	; 61
     968:	fe b7       	in	r31, 0x3e	; 62
     96a:	31 96       	adiw	r30, 0x01	; 1
     96c:	8e e6       	ldi	r24, 0x6E	; 110
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	ad b7       	in	r26, 0x3d	; 61
     972:	be b7       	in	r27, 0x3e	; 62
     974:	12 96       	adiw	r26, 0x02	; 2
     976:	9c 93       	st	X, r25
     978:	8e 93       	st	-X, r24
     97a:	11 97       	sbiw	r26, 0x01	; 1
     97c:	80 91 f8 04 	lds	r24, 0x04F8
     980:	82 83       	std	Z+2, r24	; 0x02
     982:	13 82       	std	Z+3, r1	; 0x03
     984:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
				break;
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	08 95       	ret
			default:
				spi_release();
     992:	0e 94 45 03 	call	0x68a	; 0x68a <spi_release>
				printf("task_tc77() : unexpected state in task_tc77...\n");
     996:	8f e9       	ldi	r24, 0x9F	; 159
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0e 94 85 11 	call	0x230a	; 0x230a <puts>
     99e:	08 95       	ret

000009a0 <task_tcn75_i2c>:
	}
}

// TCN75 temperature data
void task_tcn75_i2c(void *arg)
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
	uint16_t value;
	i2c_tcn75_trans_start();	// communicate start
     9a4:	0e 94 b7 08 	call	0x116e	; 0x116e <i2c_tcn75_trans_start>
	// address + write_operation
	if (i2c_tcn75_write_one_byte(0x90) != 0) {
     9a8:	80 e9       	ldi	r24, 0x90	; 144
     9aa:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <i2c_tcn75_write_one_byte>
     9ae:	88 23       	and	r24, r24
     9b0:	89 f4       	brne	.+34     	; 0x9d4 <task_tcn75_i2c+0x34>
		i2c_tcn75_trans_stop();	printf("task_tcn75_i2c() : SLA+W write fail...\n");
		return;
	}
	// pointer(TEMP)
	if (i2c_tcn75_write_one_byte(0x00) != 0) {
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <i2c_tcn75_write_one_byte>
     9b8:	88 23       	and	r24, r24
     9ba:	29 f0       	breq	.+10     	; 0x9c6 <task_tcn75_i2c+0x26>
		i2c_tcn75_trans_stop(); printf("task_tcn75_i2c() : pointer write fail...\n");
     9bc:	0e 94 c4 08 	call	0x1188	; 0x1188 <i2c_tcn75_trans_stop>
     9c0:	85 ef       	ldi	r24, 0xF5	; 245
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0b c0       	rjmp	.+22     	; 0x9dc <task_tcn75_i2c+0x3c>
		return;
	}
	i2c_tcn75_trans_start();
     9c6:	0e 94 b7 08 	call	0x116e	; 0x116e <i2c_tcn75_trans_start>
	if (i2c_tcn75_write_one_byte(0x91) != 0) {
     9ca:	81 e9       	ldi	r24, 0x91	; 145
     9cc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <i2c_tcn75_write_one_byte>
     9d0:	88 23       	and	r24, r24
     9d2:	39 f0       	breq	.+14     	; 0x9e2 <task_tcn75_i2c+0x42>
		i2c_tcn75_trans_stop(); printf("task_tcn75_i2c() : SLA+W write fail...\n");
     9d4:	0e 94 c4 08 	call	0x1188	; 0x1188 <i2c_tcn75_trans_stop>
     9d8:	8e ec       	ldi	r24, 0xCE	; 206
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	0e 94 85 11 	call	0x230a	; 0x230a <puts>
		return;
     9e0:	25 c0       	rjmp	.+74     	; 0xa2c <task_tcn75_i2c+0x8c>
	}
	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <i2c_tcn75_read_one_byte>
     9e8:	c8 2f       	mov	r28, r24
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <i2c_tcn75_read_one_byte>
     9f0:	3c 2f       	mov	r19, r28
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	c8 2f       	mov	r28, r24
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
     9f8:	c2 2b       	or	r28, r18
     9fa:	d3 2b       	or	r29, r19
     9fc:	cc 0f       	add	r28, r28
     9fe:	cd 2f       	mov	r28, r29
     a00:	cc 1f       	adc	r28, r28
     a02:	dd 0b       	sbc	r29, r29
	i2c_tcn75_trans_stop();
     a04:	0e 94 c4 08 	call	0x1188	; 0x1188 <i2c_tcn75_trans_stop>

	value = value >> 1;
	printf("task_tcn75_i2c() : current_temperature -> %d degree.\n", value);
     a08:	00 d0       	rcall	.+0      	; 0xa0a <task_tcn75_i2c+0x6a>
     a0a:	0f 92       	push	r0
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	ed b7       	in	r30, 0x3d	; 61
     a12:	fe b7       	in	r31, 0x3e	; 62
     a14:	92 83       	std	Z+2, r25	; 0x02
     a16:	81 83       	std	Z+1, r24	; 0x01
		return;
	}
	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;
	i2c_tcn75_trans_stop();

	value = value >> 1;
     a18:	d6 95       	lsr	r29
     a1a:	c7 95       	ror	r28
	printf("task_tcn75_i2c() : current_temperature -> %d degree.\n", value);
     a1c:	d4 83       	std	Z+4, r29	; 0x04
     a1e:	c3 83       	std	Z+3, r28	; 0x03
     a20:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <task_cmd>:

void task_cmd(char *arg)
{
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	ca 54       	subi	r28, 0x4A	; 74
     a4c:	d0 40       	sbci	r29, 0x00	; 0
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if (!uart_peek()) return;
     a58:	0e 94 73 07 	call	0xee6	; 0xee6 <uart_peek>
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	09 f4       	brne	.+2      	; 0xa62 <task_cmd+0x30>
     a60:	a0 c0       	rjmp	.+320    	; 0xba2 <task_cmd+0x170>

	if (gets(buf) == NULL) {
     a62:	ce 01       	movw	r24, r28
     a64:	0b 96       	adiw	r24, 0x0b	; 11
     a66:	0e 94 46 11 	call	0x228c	; 0x228c <gets>
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	29 f4       	brne	.+10     	; 0xa78 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     a6e:	84 e5       	ldi	r24, 0x54	; 84
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	0e 94 85 11 	call	0x230a	; 0x230a <puts>
     a76:	ff cf       	rjmp	.-2      	; 0xa76 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     a78:	ce 01       	movw	r24, r28
     a7a:	0b 96       	adiw	r24, 0x0b	; 11
     a7c:	69 e6       	ldi	r22, 0x69	; 105
     a7e:	73 e0       	ldi	r23, 0x03	; 3
     a80:	0e 94 ce 10 	call	0x219c	; 0x219c <strtok>
     a84:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	69 e6       	ldi	r22, 0x69	; 105
     a8c:	73 e0       	ldi	r23, 0x03	; 3
     a8e:	0e 94 ce 10 	call	0x219c	; 0x219c <strtok>
     a92:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	69 e6       	ldi	r22, 0x69	; 105
     a9a:	73 e0       	ldi	r23, 0x03	; 3
     a9c:	0e 94 ce 10 	call	0x219c	; 0x219c <strtok>
     aa0:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	69 e6       	ldi	r22, 0x69	; 105
     aa8:	73 e0       	ldi	r23, 0x03	; 3
     aaa:	0e 94 ce 10 	call	0x219c	; 0x219c <strtok>
     aae:	6c 01       	movw	r12, r24

	if (cp0 == NULL) {
     ab0:	01 15       	cp	r16, r1
     ab2:	11 05       	cpc	r17, r1
     ab4:	09 f4       	brne	.+2      	; 0xab8 <task_cmd+0x86>
     ab6:	69 c0       	rjmp	.+210    	; 0xb8a <task_cmd+0x158>
		// printf("!!!-111\n");
		printf( "$ "); return;
	}

	if (!strcmp(cp0, "prime"))
     ab8:	c8 01       	movw	r24, r16
     aba:	61 e7       	ldi	r22, 0x71	; 113
     abc:	73 e0       	ldi	r23, 0x03	; 3
     abe:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <strcmp>
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	21 f4       	brne	.+8      	; 0xace <task_cmd+0x9c>
		task_prime(cp1);
     ac6:	c7 01       	movw	r24, r14
     ac8:	0e 94 07 02 	call	0x40e	; 0x40e <task_prime>
     acc:	5e c0       	rjmp	.+188    	; 0xb8a <task_cmd+0x158>

	else if (!strcmp(cp0, "timer")) {
     ace:	c8 01       	movw	r24, r16
     ad0:	67 e7       	ldi	r22, 0x77	; 119
     ad2:	73 e0       	ldi	r23, 0x03	; 3
     ad4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <strcmp>
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	79 f5       	brne	.+94     	; 0xb3a <task_cmd+0x108>
		if (cp1 == NULL) {
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	19 f4       	brne	.+6      	; 0xae8 <task_cmd+0xb6>
			printf("!!!-222\n");
     ae2:	8d e7       	ldi	r24, 0x7D	; 125
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	4f c0       	rjmp	.+158    	; 0xb86 <task_cmd+0x154>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     ae8:	c7 01       	movw	r24, r14
     aea:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
     aee:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     af0:	c5 01       	movw	r24, r10
     af2:	61 e7       	ldi	r22, 0x71	; 113
     af4:	73 e0       	ldi	r23, 0x03	; 3
     af6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <strcmp>
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	d9 f4       	brne	.+54     	; 0xb34 <task_cmd+0x102>
			task.fun = task_prime;
     afe:	87 e0       	ldi	r24, 0x07	; 7
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	9a 83       	std	Y+2, r25	; 0x02
     b04:	89 83       	std	Y+1, r24	; 0x01
			if(cp3) strcpy(task.arg, cp3);
     b06:	ce 01       	movw	r24, r28
     b08:	03 96       	adiw	r24, 0x03	; 3
     b0a:	c1 14       	cp	r12, r1
     b0c:	d1 04       	cpc	r13, r1
     b0e:	11 f0       	breq	.+4      	; 0xb14 <task_cmd+0xe2>
     b10:	b6 01       	movw	r22, r12
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <task_cmd+0xe6>
			else strcpy(task.arg, "");
     b14:	65 e8       	ldi	r22, 0x85	; 133
     b16:	73 e0       	ldi	r23, 0x03	; 3
     b18:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <strcpy>
			cli();
     b1c:	f8 94       	cli
		if (cp1 == NULL) {
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     b1e:	c8 01       	movw	r24, r16
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3) strcpy(task.arg, cp3);
			else strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <insert_timer>
			sei();
     b30:	78 94       	sei
     b32:	2b c0       	rjmp	.+86     	; 0xb8a <task_cmd+0x158>
		}
		else printf("!!!-333\n");
     b34:	86 e8       	ldi	r24, 0x86	; 134
     b36:	93 e0       	ldi	r25, 0x03	; 3
     b38:	26 c0       	rjmp	.+76     	; 0xb86 <task_cmd+0x154>
	}

	else if (!strcmp(cp0, "tc1047"))
     b3a:	c8 01       	movw	r24, r16
     b3c:	6e e8       	ldi	r22, 0x8E	; 142
     b3e:	73 e0       	ldi	r23, 0x03	; 3
     b40:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <strcmp>
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	29 f4       	brne	.+10     	; 0xb52 <task_cmd+0x120>
		task_tc1047("");
     b48:	85 e8       	ldi	r24, 0x85	; 133
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	0e 94 1f 04 	call	0x83e	; 0x83e <task_tc1047>
     b50:	1c c0       	rjmp	.+56     	; 0xb8a <task_cmd+0x158>

	else if (!strcmp(cp0, "tc77"))
     b52:	c8 01       	movw	r24, r16
     b54:	65 e9       	ldi	r22, 0x95	; 149
     b56:	73 e0       	ldi	r23, 0x03	; 3
     b58:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <strcmp>
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	29 f4       	brne	.+10     	; 0xb6a <task_cmd+0x138>
		task_tc77("");
     b60:	85 e8       	ldi	r24, 0x85	; 133
     b62:	93 e0       	ldi	r25, 0x03	; 3
     b64:	0e 94 6f 04 	call	0x8de	; 0x8de <task_tc77>
     b68:	10 c0       	rjmp	.+32     	; 0xb8a <task_cmd+0x158>
	else if (!strcmp(cp0, "tcn75_i2c"))
     b6a:	c8 01       	movw	r24, r16
     b6c:	6a e9       	ldi	r22, 0x9A	; 154
     b6e:	73 e0       	ldi	r23, 0x03	; 3
     b70:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <strcmp>
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	29 f4       	brne	.+10     	; 0xb82 <task_cmd+0x150>
		task_tcn75_i2c("");
     b78:	85 e8       	ldi	r24, 0x85	; 133
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <task_tcn75_i2c>
     b80:	04 c0       	rjmp	.+8      	; 0xb8a <task_cmd+0x158>

	else printf("Unknown command...\n");
     b82:	84 ea       	ldi	r24, 0xA4	; 164
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	0e 94 85 11 	call	0x230a	; 0x230a <puts>

	printf("$ ");
     b8a:	0f 92       	push	r0
     b8c:	0f 92       	push	r0
     b8e:	8e e6       	ldi	r24, 0x6E	; 110
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	ed b7       	in	r30, 0x3d	; 61
     b94:	fe b7       	in	r31, 0x3e	; 62
     b96:	92 83       	std	Z+2, r25	; 0x02
     b98:	81 83       	std	Z+1, r24	; 0x01
     b9a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
}
     ba2:	c6 5b       	subi	r28, 0xB6	; 182
     ba4:	df 4f       	sbci	r29, 0xFF	; 255
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	df 90       	pop	r13
     bbe:	cf 90       	pop	r12
     bc0:	bf 90       	pop	r11
     bc2:	af 90       	pop	r10
     bc4:	08 95       	ret

00000bc6 <timer_init>:
#include "Timer_linked_list.h"
#include "Task_queue.h"

void timer_init()
{
	TCNT2 = 0;					// Timer/Counter Register of Timer 2
     bc6:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1 << AS2);			// Asynchronous Status Register(Asynchronous Timer/Counter 2
     bca:	e6 eb       	ldi	r30, 0xB6	; 182
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	80 62       	ori	r24, 0x20	; 32
     bd2:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);		// Timer/Counter Interrupt Mask Register of timer 2
     bd4:	e0 e7       	ldi	r30, 0x70	; 112
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	81 60       	ori	r24, 0x01	; 1
     bdc:	80 83       	st	Z, r24
	// Timer/Counter Control Register B of timer 2
	TCCR2B |= (1 << CS20);	TCCR2B |= (1 << CS21);	// 32KHz/32 prescaling, clock 1KHz
     bde:	e1 eb       	ldi	r30, 0xB1	; 177
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	80 83       	st	Z, r24
     be8:	80 81       	ld	r24, Z
     bea:	82 60       	ori	r24, 0x02	; 2
     bec:	80 83       	st	Z, r24
}
     bee:	08 95       	ret

00000bf0 <timer_expire>:

void timer_expire()
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     bf6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bfa:	90 93 fa 04 	sts	0x04FA, r25
     bfe:	80 93 f9 04 	sts	0x04F9, r24

		task_insert(&tp->task);
     c02:	ce 01       	movw	r24, r28
     c04:	02 96       	adiw	r24, 0x02	; 2
     c06:	0e 94 aa 03 	call	0x754	; 0x754 <task_insert>

		free(tp);
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 94 17 10 	call	0x202e	; 0x202e <free>

void timer_expire()
{
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     c10:	c0 91 f9 04 	lds	r28, 0x04F9
     c14:	d0 91 fa 04 	lds	r29, 0x04FA
     c18:	20 97       	sbiw	r28, 0x00	; 0
     c1a:	21 f0       	breq	.+8      	; 0xc24 <timer_expire+0x34>
     c1c:	88 81       	ld	r24, Y
     c1e:	99 81       	ldd	r25, Y+1	; 0x01
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	49 f3       	breq	.-46     	; 0xbf6 <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <__vector_15>:

////////////////////////////////
ISR(TIMER2_OVF_vect)
{
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	0b b6       	in	r0, 0x3b	; 59
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
	if (!Thead)
     c50:	e0 91 f9 04 	lds	r30, 0x04F9
     c54:	f0 91 fa 04 	lds	r31, 0x04FA
     c58:	30 97       	sbiw	r30, 0x00	; 0
     c5a:	49 f0       	breq	.+18     	; 0xc6e <__vector_15+0x44>
		return;
	if (--Thead->time == 0)
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	11 f4       	brne	.+4      	; 0xc6e <__vector_15+0x44>
		timer_expire();
     c6a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <timer_expire>
}
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0b be       	out	0x3b, r0	; 59
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     c94:	8e e0       	ldi	r24, 0x0E	; 14
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <malloc>
	return tp;
}
     c9c:	08 95       	ret

00000c9e <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	f8 2e       	mov	r15, r24
     cac:	e9 2e       	mov	r14, r25
     cae:	8b 01       	movw	r16, r22
	int 		 total;
	struct timer *tp, *cp, *pp;	// timer, current, previous pointer

	tp = get_timer();
     cb0:	0e 94 4a 06 	call	0xc94	; 0xc94 <get_timer>
     cb4:	dc 01       	movw	r26, r24
	tp->task = *tskp;	// task pointer
     cb6:	fc 01       	movw	r30, r24
     cb8:	32 96       	adiw	r30, 0x02	; 2
     cba:	cf 2d       	mov	r28, r15
     cbc:	de 2d       	mov	r29, r14
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	09 90       	ld	r0, Y+
     cc2:	01 92       	st	Z+, r0
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <insert_timer+0x22>
	tp->time = ms;
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	1c 93       	st	X, r17
     ccc:	0e 93       	st	-X, r16

	if (Thead == NULL) {	// list empty
     cce:	c0 91 f9 04 	lds	r28, 0x04F9
     cd2:	d0 91 fa 04 	lds	r29, 0x04FA
     cd6:	20 97       	sbiw	r28, 0x00	; 0
     cd8:	29 f4       	brne	.+10     	; 0xce4 <insert_timer+0x46>
		Thead = tp, tp->link = NULL;
     cda:	b0 93 fa 04 	sts	0x04FA, r27
     cde:	a0 93 f9 04 	sts	0x04F9, r26
     ce2:	30 c0       	rjmp	.+96     	; 0xd44 <insert_timer+0xa6>

	tp = get_timer();
	tp->task = *tskp;	// task pointer
	tp->time = ms;

	if (Thead == NULL) {	// list empty
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <insert_timer+0x52>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     cee:	ef 01       	movw	r28, r30
		total += cp->time;
     cf0:	88 81       	ld	r24, Y
     cf2:	99 81       	ldd	r25, Y+1	; 0x01
     cf4:	48 0f       	add	r20, r24
     cf6:	59 1f       	adc	r21, r25
		if (total >= ms)
     cf8:	40 17       	cp	r20, r16
     cfa:	51 07       	cpc	r21, r17
     cfc:	34 f4       	brge	.+12     	; 0xd0a <insert_timer+0x6c>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     cfe:	ec 85       	ldd	r30, Y+12	; 0x0c
     d00:	fd 85       	ldd	r31, Y+13	; 0x0d
     d02:	9e 01       	movw	r18, r28
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	99 f7       	brne	.-26     	; 0xcee <insert_timer+0x50>
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <insert_timer+0x6e>
		total += cp->time;
		if (total >= ms)
     d0a:	fe 01       	movw	r30, r28
			break;
		pp = cp;
	}
	if (pp == NULL) {	// First insert
     d0c:	21 15       	cp	r18, r1
     d0e:	31 05       	cpc	r19, r1
     d10:	79 f4       	brne	.+30     	; 0xd30 <insert_timer+0x92>
		cp->time -= tp->time;
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	80 1b       	sub	r24, r16
     d18:	91 0b       	sbc	r25, r17
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
		tp->link = cp, Thead = tp;
     d1e:	1d 96       	adiw	r26, 0x0d	; 13
     d20:	fc 93       	st	X, r31
     d22:	ee 93       	st	-X, r30
     d24:	1c 97       	sbiw	r26, 0x0c	; 12
     d26:	b0 93 fa 04 	sts	0x04FA, r27
     d2a:	a0 93 f9 04 	sts	0x04F9, r26
     d2e:	19 c0       	rjmp	.+50     	; 0xd62 <insert_timer+0xc4>
	}
	else if (cp == NULL) {	// Last insert
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	69 f4       	brne	.+26     	; 0xd4e <insert_timer+0xb0>
		tp->time -= total;	// pp->time
     d34:	04 1b       	sub	r16, r20
     d36:	15 0b       	sbc	r17, r21
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	1c 93       	st	X, r17
     d3c:	0e 93       	st	-X, r16
		pp->link = tp;
     d3e:	e9 01       	movw	r28, r18
     d40:	bd 87       	std	Y+13, r27	; 0x0d
     d42:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = NULL;
     d44:	1d 96       	adiw	r26, 0x0d	; 13
     d46:	1c 92       	st	X, r1
     d48:	1e 92       	st	-X, r1
     d4a:	1c 97       	sbiw	r26, 0x0c	; 12
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <insert_timer+0xc4>
	}
	else {	// Middle insert
		total -= cp->time;	// just before
		tp->time -= tp->time;
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	1c 92       	st	X, r1
     d52:	1e 92       	st	-X, r1
		pp->link = tp;
     d54:	e9 01       	movw	r28, r18
     d56:	bd 87       	std	Y+13, r27	; 0x0d
     d58:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = cp;
     d5a:	1d 96       	adiw	r26, 0x0d	; 13
     d5c:	fc 93       	st	X, r31
     d5e:	ee 93       	st	-X, r30
     d60:	1c 97       	sbiw	r26, 0x0c	; 12
	}
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <tour_timer>:

void tour_timer()
{
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     d7c:	8a e0       	ldi	r24, 0x0A	; 10
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 7e 11 	call	0x22fc	; 0x22fc <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     d84:	c0 91 f9 04 	lds	r28, 0x04F9
     d88:	d0 91 fa 04 	lds	r29, 0x04FA
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     d8c:	00 e0       	ldi	r16, 0x00	; 0
     d8e:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     d90:	87 eb       	ldi	r24, 0xB7	; 183
     d92:	e8 2e       	mov	r14, r24
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     d98:	20 c0       	rjmp	.+64     	; 0xdda <tour_timer+0x6a>
		total += cp->time;
     d9a:	88 81       	ld	r24, Y
     d9c:	99 81       	ldd	r25, Y+1	; 0x01
     d9e:	08 0f       	add	r16, r24
     da0:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     da2:	00 d0       	rcall	.+0      	; 0xda4 <tour_timer+0x34>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <tour_timer+0x36>
     da6:	ed b7       	in	r30, 0x3d	; 61
     da8:	fe b7       	in	r31, 0x3e	; 62
     daa:	31 96       	adiw	r30, 0x01	; 1
     dac:	ad b7       	in	r26, 0x3d	; 61
     dae:	be b7       	in	r27, 0x3e	; 62
     db0:	12 96       	adiw	r26, 0x02	; 2
     db2:	fc 92       	st	X, r15
     db4:	ee 92       	st	-X, r14
     db6:	11 97       	sbiw	r26, 0x01	; 1
     db8:	93 83       	std	Z+3, r25	; 0x03
     dba:	82 83       	std	Z+2, r24	; 0x02
     dbc:	15 83       	std	Z+5, r17	; 0x05
     dbe:	04 83       	std	Z+4, r16	; 0x04
     dc0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     dc4:	0c 84       	ldd	r0, Y+12	; 0x0c
     dc6:	dd 85       	ldd	r29, Y+13	; 0x0d
     dc8:	c0 2d       	mov	r28, r0
     dca:	8d b7       	in	r24, 0x3d	; 61
     dcc:	9e b7       	in	r25, 0x3e	; 62
     dce:	06 96       	adiw	r24, 0x06	; 6
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	9e bf       	out	0x3e, r25	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	8d bf       	out	0x3d, r24	; 61
     dda:	20 97       	sbiw	r28, 0x00	; 0
     ddc:	f1 f6       	brne	.-68     	; 0xd9a <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <putchar>
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	08 95       	ret

00000df4 <free_timer>:

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     df4:	09 c0       	rjmp	.+18     	; 0xe08 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     df6:	fc 01       	movw	r30, r24
     df8:	24 85       	ldd	r18, Z+12	; 0x0c
     dfa:	35 85       	ldd	r19, Z+13	; 0x0d
     dfc:	30 93 fa 04 	sts	0x04FA, r19
     e00:	20 93 f9 04 	sts	0x04F9, r18
		free(cp);
     e04:	0e 94 17 10 	call	0x202e	; 0x202e <free>

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     e08:	80 91 f9 04 	lds	r24, 0x04F9
     e0c:	90 91 fa 04 	lds	r25, 0x04FA
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	89 f7       	brne	.-30     	; 0xdf6 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     e14:	08 95       	ret

00000e16 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     e16:	f8 94       	cli
		ch = qi_delete();
     e18:	0e 94 40 08 	call	0x1080	; 0x1080 <qi_delete>
		sei();
     e1c:	78 94       	sei
	} while (ch == 0);
     e1e:	88 23       	and	r24, r24
     e20:	d1 f3       	breq	.-12     	; 0xe16 <uart_getchar>

	if (ch == E0T) return -1;
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	11 f0       	breq	.+4      	; 0xe2a <uart_getchar+0x14>
	else 		   return ch;
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return ch;
}
     e2e:	08 95       	ret

00000e30 <uart_putchar>:
	sbi(UCSR0B, RXEN0);				// RX enable
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
}

int uart_putchar(char ch, FILE *stream)
{
     e30:	cf 93       	push	r28
     e32:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     e34:	8a 30       	cpi	r24, 0x0A	; 10
     e36:	19 f4       	brne	.+6      	; 0xe3e <uart_putchar+0xe>
     e38:	8d e0       	ldi	r24, 0x0D	; 13
     e3a:	0e 94 18 07 	call	0xe30	; 0xe30 <uart_putchar>
	cli();
     e3e:	f8 94       	cli
	if(!uart_busy) {
     e40:	80 91 a1 05 	lds	r24, 0x05A1
     e44:	88 23       	and	r24, r24
     e46:	59 f4       	brne	.+22     	; 0xe5e <uart_putchar+0x2e>
		UDR0 = ch;
     e48:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 a1 05 	sts	0x05A1, r24
     e52:	0a c0       	rjmp	.+20     	; 0xe68 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     e54:	78 94       	sei
     e56:	86 ef       	ldi	r24, 0xF6	; 246
     e58:	8a 95       	dec	r24
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     e5c:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     e5e:	8c 2f       	mov	r24, r28
     e60:	0e 94 5d 08 	call	0x10ba	; 0x10ba <qo_insert>
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	b1 f3       	breq	.-20     	; 0xe54 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     e68:	78 94       	sei
	return 1;
}
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <uart_init>:
char uart_busy;
static int echo_mode = 1;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     e72:	83 ec       	ldi	r24, 0xC3	; 195
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	90 93 2f 06 	sts	0x062F, r25
     e7a:	80 93 2e 06 	sts	0x062E, r24
     e7e:	81 ed       	ldi	r24, 0xD1	; 209
     e80:	93 e0       	ldi	r25, 0x03	; 3
     e82:	90 93 31 06 	sts	0x0631, r25
     e86:	80 93 30 06 	sts	0x0630, r24
	q_init();
     e8a:	0e 94 0d 08 	call	0x101a	; 0x101a <q_init>
	uart_busy = 0;
     e8e:	10 92 a1 05 	sts	0x05A1, r1

	UBRR0H = 0x00; UBRR0L = 0x03;	// 115.2Kbps
     e92:	10 92 c5 00 	sts	0x00C5, r1
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0B, TXEN0);				// TX enable
     e9c:	e1 ec       	ldi	r30, 0xC1	; 193
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	88 60       	ori	r24, 0x08	; 8
     ea4:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);			// TX complete interrupt
     ea6:	80 81       	ld	r24, Z
     ea8:	80 64       	ori	r24, 0x40	; 64
     eaa:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);				// RX enable
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
     eb2:	80 81       	ld	r24, Z
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	80 83       	st	Z, r24
}
     eb8:	08 95       	ret

00000eba <uart_echo>:
	if (ch == E0T) return -1;
	else 		   return ch;
}

void uart_echo(char ch)
{
     eba:	cf 93       	push	r28
     ebc:	c8 2f       	mov	r28, r24
	if (ch == '\n')	uart_echo( '\r' );
     ebe:	8a 30       	cpi	r24, 0x0A	; 10
     ec0:	19 f4       	brne	.+6      	; 0xec8 <uart_echo+0xe>
     ec2:	8d e0       	ldi	r24, 0x0D	; 13
     ec4:	0e 94 5d 07 	call	0xeba	; 0xeba <uart_echo>
	if (!uart_busy) {
     ec8:	80 91 a1 05 	lds	r24, 0x05A1
     ecc:	88 23       	and	r24, r24
     ece:	31 f4       	brne	.+12     	; 0xedc <uart_echo+0x22>
		UDR0 = ch;
     ed0:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 a1 05 	sts	0x05A1, r24
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     edc:	8c 2f       	mov	r24, r28
     ede:	0e 94 5d 08 	call	0x10ba	; 0x10ba <qo_insert>

}
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <uart_peek>:

int uart_peek()
{
	return qi_peek();
     ee6:	0e 94 9c 08 	call	0x1138	; 0x1138 <qi_peek>
}
     eea:	08 95       	ret

00000eec <__vector_27>:

////////////////////////////////////////////
ISR(USART0_TX_vect)
{
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	0b b6       	in	r0, 0x3b	; 59
     ef6:	0f 92       	push	r0
     ef8:	11 24       	eor	r1, r1
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
	char ch;

	if ((ch = qo_delete()) == 0)
     f12:	0e 94 7f 08 	call	0x10fe	; 0x10fe <qo_delete>
     f16:	88 23       	and	r24, r24
     f18:	19 f4       	brne	.+6      	; 0xf20 <__vector_27+0x34>
		uart_busy = 0;
     f1a:	10 92 a1 05 	sts	0x05A1, r1
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <__vector_27+0x38>
	else
		UDR0 = ch;
     f20:	80 93 c6 00 	sts	0x00C6, r24
}
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0b be       	out	0x3b, r0	; 59
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_25>:

ISR(USART0_RX_vect)
{
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	0b b6       	in	r0, 0x3b	; 59
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	1f 93       	push	r17
     f5a:	2f 93       	push	r18
     f5c:	3f 93       	push	r19
     f5e:	4f 93       	push	r20
     f60:	5f 93       	push	r21
     f62:	6f 93       	push	r22
     f64:	7f 93       	push	r23
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	af 93       	push	r26
     f6c:	bf 93       	push	r27
     f6e:	ef 93       	push	r30
     f70:	ff 93       	push	r31
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	2a 97       	sbiw	r28, 0x0a	; 10
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     f80:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
     f84:	1b 31       	cpi	r17, 0x1B	; 27
     f86:	61 f4       	brne	.+24     	; 0xfa0 <__vector_25+0x56>
		echo_mode = ((echo_mode+1) & 0x01);
     f88:	80 91 df 03 	lds	r24, 0x03DF
     f8c:	90 91 e0 03 	lds	r25, 0x03E0
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	90 93 e0 03 	sts	0x03E0, r25
     f9a:	80 93 df 03 	sts	0x03DF, r24
		return;
     f9e:	24 c0       	rjmp	.+72     	; 0xfe8 <__vector_25+0x9e>
	}
	if (ch != EOT) {
     fa0:	14 30       	cpi	r17, 0x04	; 4
     fa2:	69 f0       	breq	.+26     	; 0xfbe <__vector_25+0x74>
		if (ch == '\r') ch = '\n';
     fa4:	1d 30       	cpi	r17, 0x0D	; 13
     fa6:	09 f4       	brne	.+2      	; 0xfaa <__vector_25+0x60>
     fa8:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode) uart_echo(ch);
     faa:	20 91 df 03 	lds	r18, 0x03DF
     fae:	30 91 e0 03 	lds	r19, 0x03E0
     fb2:	21 15       	cp	r18, r1
     fb4:	31 05       	cpc	r19, r1
     fb6:	19 f0       	breq	.+6      	; 0xfbe <__vector_25+0x74>
     fb8:	81 2f       	mov	r24, r17
     fba:	0e 94 5d 07 	call	0xeba	; 0xeba <uart_echo>
	}
	qi_insert(ch);
     fbe:	81 2f       	mov	r24, r17
     fc0:	0e 94 1e 08 	call	0x103c	; 0x103c <qi_insert>
	if (ch == EOT || ch == '\n') {
     fc4:	14 30       	cpi	r17, 0x04	; 4
     fc6:	11 f0       	breq	.+4      	; 0xfcc <__vector_25+0x82>
     fc8:	1a 30       	cpi	r17, 0x0A	; 10
     fca:	71 f4       	brne	.+28     	; 0xfe8 <__vector_25+0x9e>
		task.fun = task_cmd;
     fcc:	89 e1       	ldi	r24, 0x19	; 25
     fce:	95 e0       	ldi	r25, 0x05	; 5
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     fd4:	ce 01       	movw	r24, r28
     fd6:	03 96       	adiw	r24, 0x03	; 3
     fd8:	62 ec       	ldi	r22, 0xC2	; 194
     fda:	73 e0       	ldi	r23, 0x03	; 3
     fdc:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <strcpy>
		task_insert(&task);
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	0e 94 aa 03 	call	0x754	; 0x754 <task_insert>
	}
}
     fe8:	2a 96       	adiw	r28, 0x0a	; 10
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	1f 91       	pop	r17
    100c:	0f 90       	pop	r0
    100e:	0b be       	out	0x3b, r0	; 59
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
    101a:	10 92 e7 05 	sts	0x05E7, r1
    101e:	10 92 e6 05 	sts	0x05E6, r1
    1022:	10 92 e5 05 	sts	0x05E5, r1
    1026:	10 92 e4 05 	sts	0x05E4, r1
    102a:	10 92 e9 05 	sts	0x05E9, r1
    102e:	10 92 e8 05 	sts	0x05E8, r1
    1032:	10 92 a3 05 	sts	0x05A3, r1
    1036:	10 92 a2 05 	sts	0x05A2, r1
}
    103a:	08 95       	ret

0000103c <qi_insert>:

int qi_insert(char ch)
{
    103c:	48 2f       	mov	r20, r24
	if ((ri + 1) % QI_SIZE == fi)
    103e:	20 91 e8 05 	lds	r18, 0x05E8
    1042:	30 91 e9 05 	lds	r19, 0x05E9
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	c9 01       	movw	r24, r18
    104c:	60 e4       	ldi	r22, 0x40	; 64
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
    1054:	9c 01       	movw	r18, r24
    1056:	80 91 a2 05 	lds	r24, 0x05A2
    105a:	90 91 a3 05 	lds	r25, 0x05A3
    105e:	28 17       	cp	r18, r24
    1060:	39 07       	cpc	r19, r25
    1062:	59 f0       	breq	.+22     	; 0x107a <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
    1064:	30 93 e9 05 	sts	0x05E9, r19
    1068:	20 93 e8 05 	sts	0x05E8, r18
	qi[ri] = ch;
    106c:	26 51       	subi	r18, 0x16	; 22
    106e:	3a 4f       	sbci	r19, 0xFA	; 250
    1070:	f9 01       	movw	r30, r18
    1072:	40 83       	st	Z, r20
	return 1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri + 1) % QI_SIZE == fi)
		return 0;
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
    107e:	08 95       	ret

00001080 <qi_delete>:

int qi_delete()
{
	if (ri == fi)
    1080:	80 91 a2 05 	lds	r24, 0x05A2
    1084:	90 91 a3 05 	lds	r25, 0x05A3
    1088:	20 91 e8 05 	lds	r18, 0x05E8
    108c:	30 91 e9 05 	lds	r19, 0x05E9
    1090:	28 17       	cp	r18, r24
    1092:	39 07       	cpc	r19, r25
    1094:	79 f0       	breq	.+30     	; 0x10b4 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	60 e4       	ldi	r22, 0x40	; 64
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
    10a0:	90 93 a3 05 	sts	0x05A3, r25
    10a4:	80 93 a2 05 	sts	0x05A2, r24
	return qi[fi];
    10a8:	86 51       	subi	r24, 0x16	; 22
    10aa:	9a 4f       	sbci	r25, 0xFA	; 250
    10ac:	fc 01       	movw	r30, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
    10b8:	08 95       	ret

000010ba <qo_insert>:

int qo_insert(char ch)
{
    10ba:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
    10bc:	20 91 e6 05 	lds	r18, 0x05E6
    10c0:	30 91 e7 05 	lds	r19, 0x05E7
    10c4:	2f 5f       	subi	r18, 0xFF	; 255
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	c9 01       	movw	r24, r18
    10ca:	60 e4       	ldi	r22, 0x40	; 64
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
    10d2:	9c 01       	movw	r18, r24
    10d4:	80 91 e4 05 	lds	r24, 0x05E4
    10d8:	90 91 e5 05 	lds	r25, 0x05E5
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	59 f0       	breq	.+22     	; 0x10f8 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
    10e2:	30 93 e7 05 	sts	0x05E7, r19
    10e6:	20 93 e6 05 	sts	0x05E6, r18
	qo[ro] = ch;
    10ea:	2c 55       	subi	r18, 0x5C	; 92
    10ec:	3a 4f       	sbci	r19, 0xFA	; 250
    10ee:	f9 01       	movw	r30, r18
    10f0:	40 83       	st	Z, r20
	return 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
    10fc:	08 95       	ret

000010fe <qo_delete>:

int qo_delete()
{
	if(ro == fo)
    10fe:	80 91 e4 05 	lds	r24, 0x05E4
    1102:	90 91 e5 05 	lds	r25, 0x05E5
    1106:	20 91 e6 05 	lds	r18, 0x05E6
    110a:	30 91 e7 05 	lds	r19, 0x05E7
    110e:	28 17       	cp	r18, r24
    1110:	39 07       	cpc	r19, r25
    1112:	79 f0       	breq	.+30     	; 0x1132 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	60 e4       	ldi	r22, 0x40	; 64
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__divmodhi4>
    111e:	90 93 e5 05 	sts	0x05E5, r25
    1122:	80 93 e4 05 	sts	0x05E4, r24
	return qo[fo];
    1126:	8c 55       	subi	r24, 0x5C	; 92
    1128:	9a 4f       	sbci	r25, 0xFA	; 250
    112a:	fc 01       	movw	r30, r24
    112c:	80 81       	ld	r24, Z
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
    1136:	08 95       	ret

00001138 <qi_peek>:

int qi_peek()
{
	if (fi == ri)
    1138:	80 91 a2 05 	lds	r24, 0x05A2
    113c:	90 91 a3 05 	lds	r25, 0x05A3
    1140:	20 91 e8 05 	lds	r18, 0x05E8
    1144:	30 91 e9 05 	lds	r19, 0x05E9
    1148:	82 17       	cp	r24, r18
    114a:	93 07       	cpc	r25, r19
    114c:	41 f0       	breq	.+16     	; 0x115e <qi_peek+0x26>
		return 0;
	else
		return(qi[fi + 1] % QI_SIZE);
    114e:	86 51       	subi	r24, 0x16	; 22
    1150:	9a 4f       	sbci	r25, 0xFA	; 250
    1152:	fc 01       	movw	r30, r24
    1154:	81 81       	ldd	r24, Z+1	; 0x01
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	8f 73       	andi	r24, 0x3F	; 63
    115a:	90 70       	andi	r25, 0x00	; 0
    115c:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[fi + 1] % QI_SIZE);
}
    1162:	08 95       	ret

00001164 <tcn75_i2c_init>:
#include <util/delay.h>
#include "i2c.h"

void tcn75_i2c_init()
{
	sbi(DDRD, SDA); sbi(PORTD, SDA);	// output, hi
    1164:	51 9a       	sbi	0x0a, 1	; 10
    1166:	59 9a       	sbi	0x0b, 1	; 11
	sbi(DDRD, SCL); sbi(PORTD, SCL);	// output, hi
    1168:	50 9a       	sbi	0x0a, 0	; 10
    116a:	58 9a       	sbi	0x0b, 0	; 11
	
	// address output
	// sbi(DDRH, 1); cbi(PORTH, 1);		// output, A0 <- 0
	// sbi(DDRH, 3); cbi(PORTH, 3);		// output, A1 <- 0	
	// sbi(DDRH, 5); cbi(PORTH, 5);		// output, A2 <- 0	
}
    116c:	08 95       	ret

0000116e <i2c_tcn75_trans_start>:

void i2c_tcn75_trans_start()
{
	cbi(PORTD, SCL);					// SCL <- Low
    116e:	58 98       	cbi	0x0b, 0	; 11
	sbi(PORTD, SDA);	delay_2nop();	// SDA <- High
    1170:	59 9a       	sbi	0x0b, 1	; 11
    1172:	00 00       	nop
    1174:	00 00       	nop
	sbi(PORTD, SCL);	delay_2nop();	// SCA <- High
    1176:	58 9a       	sbi	0x0b, 0	; 11
    1178:	00 00       	nop
    117a:	00 00       	nop
	cbi(PORTD, SDA);	delay_us(1);	// SDA <- Low
    117c:	59 98       	cbi	0x0b, 1	; 11
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	8a 95       	dec	r24
    1182:	f1 f7       	brne	.-4      	; 0x1180 <i2c_tcn75_trans_start+0x12>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <i2c_tcn75_trans_start+0x18>
}
    1186:	08 95       	ret

00001188 <i2c_tcn75_trans_stop>:

void i2c_tcn75_trans_stop()
{
	cbi(PORTD, SCL);					// SCL <- L
    1188:	58 98       	cbi	0x0b, 0	; 11
	cbi(PORTD, SDA);	delay_2nop();	// SDA <- L
    118a:	59 98       	cbi	0x0b, 1	; 11
    118c:	00 00       	nop
    118e:	00 00       	nop
	sbi(PORTD, SCL);	delay_2nop();	// SCL <- H
    1190:	58 9a       	sbi	0x0b, 0	; 11
    1192:	00 00       	nop
    1194:	00 00       	nop
	sbi(PORTD, SDA);	delay_us(1);	// SDA <- H
    1196:	59 9a       	sbi	0x0b, 1	; 11
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	8a 95       	dec	r24
    119c:	f1 f7       	brne	.-4      	; 0x119a <i2c_tcn75_trans_stop+0x12>
    119e:	00 c0       	rjmp	.+0      	; 0x11a0 <i2c_tcn75_trans_stop+0x18>
}
    11a0:	08 95       	ret

000011a2 <i2c_tcn75_write_one_byte>:

uint8_t i2c_tcn75_write_one_byte(uint8_t data)
{
	uint8_t mask, ack;		// SDA output(Write)
	sbi(DDRD, SDA);			// SDA <- H
    11a2:	51 9a       	sbi	0x0a, 1	; 10
    11a4:	28 e0       	ldi	r18, 0x08	; 8
    11a6:	30 e0       	ldi	r19, 0x00	; 0
	for (mask = 0x80; mask; mask = mask >> 1) {
    11a8:	90 e8       	ldi	r25, 0x80	; 128
		cbi(PORTD, SCL);	delay_2nop();	// SCL <- L
    11aa:	58 98       	cbi	0x0b, 0	; 11
    11ac:	00 00       	nop
    11ae:	00 00       	nop

		if (mask & data) sbi(PORTD, SDA);	// SDA <- 1
    11b0:	49 2f       	mov	r20, r25
    11b2:	48 23       	and	r20, r24
    11b4:	11 f0       	breq	.+4      	; 0x11ba <i2c_tcn75_write_one_byte+0x18>
    11b6:	59 9a       	sbi	0x0b, 1	; 11
    11b8:	01 c0       	rjmp	.+2      	; 0x11bc <i2c_tcn75_write_one_byte+0x1a>
		else			 cbi(PORTD, SDA);	// SDA <- 0
    11ba:	59 98       	cbi	0x0b, 1	; 11
    11bc:	42 e0       	ldi	r20, 0x02	; 2
    11be:	4a 95       	dec	r20
    11c0:	f1 f7       	brne	.-4      	; 0x11be <i2c_tcn75_write_one_byte+0x1c>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <i2c_tcn75_write_one_byte+0x22>
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);		// SCL <- H
    11c4:	58 9a       	sbi	0x0b, 0	; 11
    11c6:	42 e0       	ldi	r20, 0x02	; 2
    11c8:	4a 95       	dec	r20
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <i2c_tcn75_write_one_byte+0x26>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <i2c_tcn75_write_one_byte+0x2c>

uint8_t i2c_tcn75_write_one_byte(uint8_t data)
{
	uint8_t mask, ack;		// SDA output(Write)
	sbi(DDRD, SDA);			// SDA <- H
	for (mask = 0x80; mask; mask = mask >> 1) {
    11ce:	96 95       	lsr	r25
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	30 40       	sbci	r19, 0x00	; 0
    11d4:	51 f7       	brne	.-44     	; 0x11aa <i2c_tcn75_write_one_byte+0x8>
		if (mask & data) sbi(PORTD, SDA);	// SDA <- 1
		else			 cbi(PORTD, SDA);	// SDA <- 0
		delay_us(1);
		sbi(PORTD, SCL); delay_us(1);		// SCL <- H
	}
	cbi(DDRD, SDA);			// SDA input(read)
    11d6:	51 98       	cbi	0x0a, 1	; 10
	cbi(PORTD, SCL);	delay_us(1);	// SCL <- L
    11d8:	58 98       	cbi	0x0b, 0	; 11
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	8a 95       	dec	r24
    11de:	f1 f7       	brne	.-4      	; 0x11dc <i2c_tcn75_write_one_byte+0x3a>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <i2c_tcn75_write_one_byte+0x40>
	sbi(PORTD, SCL);	delay_us(1);	// SCL <- H
    11e2:	58 9a       	sbi	0x0b, 0	; 11
    11e4:	42 e0       	ldi	r20, 0x02	; 2
    11e6:	4a 95       	dec	r20
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <i2c_tcn75_write_one_byte+0x44>
    11ea:	00 c0       	rjmp	.+0      	; 0x11ec <i2c_tcn75_write_one_byte+0x4a>

	ack = PIND & (1 << SDA);		// ack <- SDA read ack of TC75 must be 0
    11ec:	89 b1       	in	r24, 0x09	; 9

	return ack;	
}
    11ee:	82 70       	andi	r24, 0x02	; 2
    11f0:	08 95       	ret

000011f2 <i2c_tcn75_read_one_byte>:

uint8_t i2c_tcn75_read_one_byte(uint8_t ack)
{
    11f2:	28 2f       	mov	r18, r24
	uint8_t i, data = 0;
	cbi(DDRD, SDA);							// SDA input
    11f4:	51 98       	cbi	0x0a, 1	; 10
    11f6:	98 e0       	ldi	r25, 0x08	; 8
	return ack;	
}

uint8_t i2c_tcn75_read_one_byte(uint8_t ack)
{
	uint8_t i, data = 0;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
	cbi(DDRD, SDA);							// SDA input

	for (i = 0; i < 8; i++) {
		cbi(PORTD, SCL);	delay_us(1);	// SCL <- L
    11fa:	58 98       	cbi	0x0b, 0	; 11
    11fc:	32 e0       	ldi	r19, 0x02	; 2
    11fe:	3a 95       	dec	r19
    1200:	f1 f7       	brne	.-4      	; 0x11fe <i2c_tcn75_read_one_byte+0xc>
    1202:	00 c0       	rjmp	.+0      	; 0x1204 <i2c_tcn75_read_one_byte+0x12>
		sbi(PORTD, SCL);	delay_us(1);	// SCL <- H
    1204:	58 9a       	sbi	0x0b, 0	; 11
    1206:	32 e0       	ldi	r19, 0x02	; 2
    1208:	3a 95       	dec	r19
    120a:	f1 f7       	brne	.-4      	; 0x1208 <i2c_tcn75_read_one_byte+0x16>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <i2c_tcn75_read_one_byte+0x1c>
		data = (data << 1);
    120e:	88 0f       	add	r24, r24
		if (PIND & (1 << SDA)) data = data | 0x01;	// data <- SDA
    1210:	49 99       	sbic	0x09, 1	; 9
    1212:	81 60       	ori	r24, 0x01	; 1
    1214:	91 50       	subi	r25, 0x01	; 1
uint8_t i2c_tcn75_read_one_byte(uint8_t ack)
{
	uint8_t i, data = 0;
	cbi(DDRD, SDA);							// SDA input

	for (i = 0; i < 8; i++) {
    1216:	89 f7       	brne	.-30     	; 0x11fa <i2c_tcn75_read_one_byte+0x8>
		sbi(PORTD, SCL);	delay_us(1);	// SCL <- H
		data = (data << 1);
		if (PIND & (1 << SDA)) data = data | 0x01;	// data <- SDA
	}

	sbi(DDRD, SDA);							// SDA output, for sending ack
    1218:	51 9a       	sbi	0x0a, 1	; 10
	cbi(PORTD, SCL);	delay_2nop();		// SCL <- L
    121a:	58 98       	cbi	0x0b, 0	; 11
    121c:	00 00       	nop
    121e:	00 00       	nop

	if (ack) sbi(PORTD, SDA);				// SDA <- 0 or 1 (Ack or Nck)
    1220:	22 23       	and	r18, r18
    1222:	11 f0       	breq	.+4      	; 0x1228 <i2c_tcn75_read_one_byte+0x36>
    1224:	59 9a       	sbi	0x0b, 1	; 11
    1226:	01 c0       	rjmp	.+2      	; 0x122a <i2c_tcn75_read_one_byte+0x38>
	else 	 cbi(PORTD, SDA);
    1228:	59 98       	cbi	0x0b, 1	; 11
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	9a 95       	dec	r25
    122e:	f1 f7       	brne	.-4      	; 0x122c <i2c_tcn75_read_one_byte+0x3a>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <i2c_tcn75_read_one_byte+0x40>
	delay_us(1);							// SCL <- H
	sbi(PORTD, SCL);	delay_us(1);
    1232:	58 9a       	sbi	0x0b, 0	; 11
    1234:	32 e0       	ldi	r19, 0x02	; 2
    1236:	3a 95       	dec	r19
    1238:	f1 f7       	brne	.-4      	; 0x1236 <i2c_tcn75_read_one_byte+0x44>
    123a:	00 c0       	rjmp	.+0      	; 0x123c <i2c_tcn75_read_one_byte+0x4a>

	return data;
}
    123c:	08 95       	ret

0000123e <__fixunssfsi>:
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	6b 01       	movw	r12, r22
    124c:	7c 01       	movw	r14, r24
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	5f e4       	ldi	r21, 0x4F	; 79
    1256:	0e 94 0d 0c 	call	0x181a	; 0x181a <__gesf2>
    125a:	87 fd       	sbrc	r24, 7
    125c:	11 c0       	rjmp	.+34     	; 0x1280 <__fixunssfsi+0x42>
    125e:	c7 01       	movw	r24, r14
    1260:	b6 01       	movw	r22, r12
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	5f e4       	ldi	r21, 0x4F	; 79
    126a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__subsf3>
    126e:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixsfsi>
    1272:	8b 01       	movw	r16, r22
    1274:	9c 01       	movw	r18, r24
    1276:	00 50       	subi	r16, 0x00	; 0
    1278:	10 40       	sbci	r17, 0x00	; 0
    127a:	20 40       	sbci	r18, 0x00	; 0
    127c:	30 48       	sbci	r19, 0x80	; 128
    127e:	06 c0       	rjmp	.+12     	; 0x128c <__fixunssfsi+0x4e>
    1280:	c7 01       	movw	r24, r14
    1282:	b6 01       	movw	r22, r12
    1284:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fixsfsi>
    1288:	8b 01       	movw	r16, r22
    128a:	9c 01       	movw	r18, r24
    128c:	b8 01       	movw	r22, r16
    128e:	c9 01       	movw	r24, r18
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	08 95       	ret

0000129e <_fpadd_parts>:
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e5       	ldi	r30, 0x55	; 85
    12a4:	f9 e0       	ldi	r31, 0x09	; 9
    12a6:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x4>
    12aa:	ec 01       	movw	r28, r24
    12ac:	4b 01       	movw	r8, r22
    12ae:	fa 01       	movw	r30, r20
    12b0:	88 81       	ld	r24, Y
    12b2:	82 30       	cpi	r24, 0x02	; 2
    12b4:	08 f4       	brcc	.+2      	; 0x12b8 <_fpadd_parts+0x1a>
    12b6:	3e c1       	rjmp	.+636    	; 0x1534 <_fpadd_parts+0x296>
    12b8:	db 01       	movw	r26, r22
    12ba:	9c 91       	ld	r25, X
    12bc:	92 30       	cpi	r25, 0x02	; 2
    12be:	08 f4       	brcc	.+2      	; 0x12c2 <_fpadd_parts+0x24>
    12c0:	36 c1       	rjmp	.+620    	; 0x152e <_fpadd_parts+0x290>
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	59 f4       	brne	.+22     	; 0x12dc <_fpadd_parts+0x3e>
    12c6:	94 30       	cpi	r25, 0x04	; 4
    12c8:	09 f0       	breq	.+2      	; 0x12cc <_fpadd_parts+0x2e>
    12ca:	34 c1       	rjmp	.+616    	; 0x1534 <_fpadd_parts+0x296>
    12cc:	99 81       	ldd	r25, Y+1	; 0x01
    12ce:	11 96       	adiw	r26, 0x01	; 1
    12d0:	8c 91       	ld	r24, X
    12d2:	11 97       	sbiw	r26, 0x01	; 1
    12d4:	98 17       	cp	r25, r24
    12d6:	09 f0       	breq	.+2      	; 0x12da <_fpadd_parts+0x3c>
    12d8:	27 c1       	rjmp	.+590    	; 0x1528 <_fpadd_parts+0x28a>
    12da:	2c c1       	rjmp	.+600    	; 0x1534 <_fpadd_parts+0x296>
    12dc:	94 30       	cpi	r25, 0x04	; 4
    12de:	09 f4       	brne	.+2      	; 0x12e2 <_fpadd_parts+0x44>
    12e0:	26 c1       	rjmp	.+588    	; 0x152e <_fpadd_parts+0x290>
    12e2:	92 30       	cpi	r25, 0x02	; 2
    12e4:	a9 f4       	brne	.+42     	; 0x1310 <_fpadd_parts+0x72>
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	09 f0       	breq	.+2      	; 0x12ec <_fpadd_parts+0x4e>
    12ea:	24 c1       	rjmp	.+584    	; 0x1534 <_fpadd_parts+0x296>
    12ec:	ce 01       	movw	r24, r28
    12ee:	28 e0       	ldi	r18, 0x08	; 8
    12f0:	dc 01       	movw	r26, r24
    12f2:	0d 90       	ld	r0, X+
    12f4:	cd 01       	movw	r24, r26
    12f6:	da 01       	movw	r26, r20
    12f8:	0d 92       	st	X+, r0
    12fa:	ad 01       	movw	r20, r26
    12fc:	21 50       	subi	r18, 0x01	; 1
    12fe:	c1 f7       	brne	.-16     	; 0x12f0 <_fpadd_parts+0x52>
    1300:	d4 01       	movw	r26, r8
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	8c 91       	ld	r24, X
    1306:	11 97       	sbiw	r26, 0x01	; 1
    1308:	99 81       	ldd	r25, Y+1	; 0x01
    130a:	89 23       	and	r24, r25
    130c:	81 83       	std	Z+1, r24	; 0x01
    130e:	11 c1       	rjmp	.+546    	; 0x1532 <_fpadd_parts+0x294>
    1310:	82 30       	cpi	r24, 0x02	; 2
    1312:	09 f4       	brne	.+2      	; 0x1316 <_fpadd_parts+0x78>
    1314:	0c c1       	rjmp	.+536    	; 0x152e <_fpadd_parts+0x290>
    1316:	aa 80       	ldd	r10, Y+2	; 0x02
    1318:	bb 80       	ldd	r11, Y+3	; 0x03
    131a:	db 01       	movw	r26, r22
    131c:	12 96       	adiw	r26, 0x02	; 2
    131e:	4d 91       	ld	r20, X+
    1320:	5c 91       	ld	r21, X
    1322:	13 97       	sbiw	r26, 0x03	; 3
    1324:	cc 80       	ldd	r12, Y+4	; 0x04
    1326:	dd 80       	ldd	r13, Y+5	; 0x05
    1328:	ee 80       	ldd	r14, Y+6	; 0x06
    132a:	ff 80       	ldd	r15, Y+7	; 0x07
    132c:	14 96       	adiw	r26, 0x04	; 4
    132e:	0d 91       	ld	r16, X+
    1330:	1d 91       	ld	r17, X+
    1332:	2d 91       	ld	r18, X+
    1334:	3c 91       	ld	r19, X
    1336:	17 97       	sbiw	r26, 0x07	; 7
    1338:	c5 01       	movw	r24, r10
    133a:	84 1b       	sub	r24, r20
    133c:	95 0b       	sbc	r25, r21
    133e:	dc 01       	movw	r26, r24
    1340:	97 ff       	sbrs	r25, 7
    1342:	04 c0       	rjmp	.+8      	; 0x134c <_fpadd_parts+0xae>
    1344:	aa 27       	eor	r26, r26
    1346:	bb 27       	eor	r27, r27
    1348:	a8 1b       	sub	r26, r24
    134a:	b9 0b       	sbc	r27, r25
    134c:	a0 32       	cpi	r26, 0x20	; 32
    134e:	b1 05       	cpc	r27, r1
    1350:	0c f0       	brlt	.+2      	; 0x1354 <_fpadd_parts+0xb6>
    1352:	67 c0       	rjmp	.+206    	; 0x1422 <_fpadd_parts+0x184>
    1354:	18 16       	cp	r1, r24
    1356:	19 06       	cpc	r1, r25
    1358:	84 f5       	brge	.+96     	; 0x13ba <_fpadd_parts+0x11c>
    135a:	28 01       	movw	r4, r16
    135c:	39 01       	movw	r6, r18
    135e:	0a 2e       	mov	r0, r26
    1360:	04 c0       	rjmp	.+8      	; 0x136a <_fpadd_parts+0xcc>
    1362:	76 94       	lsr	r7
    1364:	67 94       	ror	r6
    1366:	57 94       	ror	r5
    1368:	47 94       	ror	r4
    136a:	0a 94       	dec	r0
    136c:	d2 f7       	brpl	.-12     	; 0x1362 <_fpadd_parts+0xc4>
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <_fpadd_parts+0xe2>
    1378:	44 0f       	add	r20, r20
    137a:	55 1f       	adc	r21, r21
    137c:	66 1f       	adc	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	aa 95       	dec	r26
    1382:	d2 f7       	brpl	.-12     	; 0x1378 <_fpadd_parts+0xda>
    1384:	41 50       	subi	r20, 0x01	; 1
    1386:	50 40       	sbci	r21, 0x00	; 0
    1388:	60 40       	sbci	r22, 0x00	; 0
    138a:	70 40       	sbci	r23, 0x00	; 0
    138c:	40 23       	and	r20, r16
    138e:	51 23       	and	r21, r17
    1390:	62 23       	and	r22, r18
    1392:	73 23       	and	r23, r19
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	41 15       	cp	r20, r1
    139e:	51 05       	cpc	r21, r1
    13a0:	61 05       	cpc	r22, r1
    13a2:	71 05       	cpc	r23, r1
    13a4:	19 f4       	brne	.+6      	; 0x13ac <_fpadd_parts+0x10e>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	dc 01       	movw	r26, r24
    13ac:	8c 01       	movw	r16, r24
    13ae:	9d 01       	movw	r18, r26
    13b0:	04 29       	or	r16, r4
    13b2:	15 29       	or	r17, r5
    13b4:	26 29       	or	r18, r6
    13b6:	37 29       	or	r19, r7
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <_fpadd_parts+0x19a>
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	e9 f1       	breq	.+122    	; 0x1438 <_fpadd_parts+0x19a>
    13be:	aa 0e       	add	r10, r26
    13c0:	bb 1e       	adc	r11, r27
    13c2:	26 01       	movw	r4, r12
    13c4:	37 01       	movw	r6, r14
    13c6:	0a 2e       	mov	r0, r26
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <_fpadd_parts+0x134>
    13ca:	76 94       	lsr	r7
    13cc:	67 94       	ror	r6
    13ce:	57 94       	ror	r5
    13d0:	47 94       	ror	r4
    13d2:	0a 94       	dec	r0
    13d4:	d2 f7       	brpl	.-12     	; 0x13ca <_fpadd_parts+0x12c>
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <_fpadd_parts+0x14a>
    13e0:	44 0f       	add	r20, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	66 1f       	adc	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	aa 95       	dec	r26
    13ea:	d2 f7       	brpl	.-12     	; 0x13e0 <_fpadd_parts+0x142>
    13ec:	41 50       	subi	r20, 0x01	; 1
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	60 40       	sbci	r22, 0x00	; 0
    13f2:	70 40       	sbci	r23, 0x00	; 0
    13f4:	4c 21       	and	r20, r12
    13f6:	5d 21       	and	r21, r13
    13f8:	6e 21       	and	r22, r14
    13fa:	7f 21       	and	r23, r15
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	41 15       	cp	r20, r1
    1406:	51 05       	cpc	r21, r1
    1408:	61 05       	cpc	r22, r1
    140a:	71 05       	cpc	r23, r1
    140c:	19 f4       	brne	.+6      	; 0x1414 <_fpadd_parts+0x176>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	dc 01       	movw	r26, r24
    1414:	6c 01       	movw	r12, r24
    1416:	7d 01       	movw	r14, r26
    1418:	c4 28       	or	r12, r4
    141a:	d5 28       	or	r13, r5
    141c:	e6 28       	or	r14, r6
    141e:	f7 28       	or	r15, r7
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <_fpadd_parts+0x19a>
    1422:	4a 15       	cp	r20, r10
    1424:	5b 05       	cpc	r21, r11
    1426:	24 f4       	brge	.+8      	; 0x1430 <_fpadd_parts+0x192>
    1428:	00 e0       	ldi	r16, 0x00	; 0
    142a:	10 e0       	ldi	r17, 0x00	; 0
    142c:	98 01       	movw	r18, r16
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <_fpadd_parts+0x19a>
    1430:	5a 01       	movw	r10, r20
    1432:	cc 24       	eor	r12, r12
    1434:	dd 24       	eor	r13, r13
    1436:	76 01       	movw	r14, r12
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	d4 01       	movw	r26, r8
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	9c 91       	ld	r25, X
    1440:	11 97       	sbiw	r26, 0x01	; 1
    1442:	89 17       	cp	r24, r25
    1444:	09 f4       	brne	.+2      	; 0x1448 <_fpadd_parts+0x1aa>
    1446:	45 c0       	rjmp	.+138    	; 0x14d2 <_fpadd_parts+0x234>
    1448:	88 23       	and	r24, r24
    144a:	29 f0       	breq	.+10     	; 0x1456 <_fpadd_parts+0x1b8>
    144c:	0c 19       	sub	r16, r12
    144e:	1d 09       	sbc	r17, r13
    1450:	2e 09       	sbc	r18, r14
    1452:	3f 09       	sbc	r19, r15
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <_fpadd_parts+0x1c8>
    1456:	d7 01       	movw	r26, r14
    1458:	c6 01       	movw	r24, r12
    145a:	80 1b       	sub	r24, r16
    145c:	91 0b       	sbc	r25, r17
    145e:	a2 0b       	sbc	r26, r18
    1460:	b3 0b       	sbc	r27, r19
    1462:	8c 01       	movw	r16, r24
    1464:	9d 01       	movw	r18, r26
    1466:	37 fd       	sbrc	r19, 7
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <_fpadd_parts+0x1d4>
    146a:	11 82       	std	Z+1, r1	; 0x01
    146c:	b3 82       	std	Z+3, r11	; 0x03
    146e:	a2 82       	std	Z+2, r10	; 0x02
    1470:	0b c0       	rjmp	.+22     	; 0x1488 <_fpadd_parts+0x1ea>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	81 83       	std	Z+1, r24	; 0x01
    1476:	b3 82       	std	Z+3, r11	; 0x03
    1478:	a2 82       	std	Z+2, r10	; 0x02
    147a:	30 95       	com	r19
    147c:	20 95       	com	r18
    147e:	10 95       	com	r17
    1480:	01 95       	neg	r16
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	2f 4f       	sbci	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	04 83       	std	Z+4, r16	; 0x04
    148a:	15 83       	std	Z+5, r17	; 0x05
    148c:	26 83       	std	Z+6, r18	; 0x06
    148e:	37 83       	std	Z+7, r19	; 0x07
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <_fpadd_parts+0x20e>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	aa 1f       	adc	r26, r26
    1498:	bb 1f       	adc	r27, r27
    149a:	84 83       	std	Z+4, r24	; 0x04
    149c:	95 83       	std	Z+5, r25	; 0x05
    149e:	a6 83       	std	Z+6, r26	; 0x06
    14a0:	b7 83       	std	Z+7, r27	; 0x07
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	93 83       	std	Z+3, r25	; 0x03
    14aa:	82 83       	std	Z+2, r24	; 0x02
    14ac:	84 81       	ldd	r24, Z+4	; 0x04
    14ae:	95 81       	ldd	r25, Z+5	; 0x05
    14b0:	a6 81       	ldd	r26, Z+6	; 0x06
    14b2:	b7 81       	ldd	r27, Z+7	; 0x07
    14b4:	ac 01       	movw	r20, r24
    14b6:	bd 01       	movw	r22, r26
    14b8:	41 50       	subi	r20, 0x01	; 1
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	60 40       	sbci	r22, 0x00	; 0
    14be:	70 40       	sbci	r23, 0x00	; 0
    14c0:	4f 3f       	cpi	r20, 0xFF	; 255
    14c2:	2f ef       	ldi	r18, 0xFF	; 255
    14c4:	52 07       	cpc	r21, r18
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	62 07       	cpc	r22, r18
    14ca:	2f e3       	ldi	r18, 0x3F	; 63
    14cc:	72 07       	cpc	r23, r18
    14ce:	08 f3       	brcs	.-62     	; 0x1492 <_fpadd_parts+0x1f4>
    14d0:	0b c0       	rjmp	.+22     	; 0x14e8 <_fpadd_parts+0x24a>
    14d2:	81 83       	std	Z+1, r24	; 0x01
    14d4:	b3 82       	std	Z+3, r11	; 0x03
    14d6:	a2 82       	std	Z+2, r10	; 0x02
    14d8:	0c 0d       	add	r16, r12
    14da:	1d 1d       	adc	r17, r13
    14dc:	2e 1d       	adc	r18, r14
    14de:	3f 1d       	adc	r19, r15
    14e0:	04 83       	std	Z+4, r16	; 0x04
    14e2:	15 83       	std	Z+5, r17	; 0x05
    14e4:	26 83       	std	Z+6, r18	; 0x06
    14e6:	37 83       	std	Z+7, r19	; 0x07
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	80 83       	st	Z, r24
    14ec:	44 81       	ldd	r20, Z+4	; 0x04
    14ee:	55 81       	ldd	r21, Z+5	; 0x05
    14f0:	66 81       	ldd	r22, Z+6	; 0x06
    14f2:	77 81       	ldd	r23, Z+7	; 0x07
    14f4:	77 ff       	sbrs	r23, 7
    14f6:	1d c0       	rjmp	.+58     	; 0x1532 <_fpadd_parts+0x294>
    14f8:	db 01       	movw	r26, r22
    14fa:	ca 01       	movw	r24, r20
    14fc:	81 70       	andi	r24, 0x01	; 1
    14fe:	90 70       	andi	r25, 0x00	; 0
    1500:	a0 70       	andi	r26, 0x00	; 0
    1502:	b0 70       	andi	r27, 0x00	; 0
    1504:	76 95       	lsr	r23
    1506:	67 95       	ror	r22
    1508:	57 95       	ror	r21
    150a:	47 95       	ror	r20
    150c:	84 2b       	or	r24, r20
    150e:	95 2b       	or	r25, r21
    1510:	a6 2b       	or	r26, r22
    1512:	b7 2b       	or	r27, r23
    1514:	84 83       	std	Z+4, r24	; 0x04
    1516:	95 83       	std	Z+5, r25	; 0x05
    1518:	a6 83       	std	Z+6, r26	; 0x06
    151a:	b7 83       	std	Z+7, r27	; 0x07
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	93 83       	std	Z+3, r25	; 0x03
    1524:	82 83       	std	Z+2, r24	; 0x02
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <_fpadd_parts+0x294>
    1528:	c1 ee       	ldi	r28, 0xE1	; 225
    152a:	d3 e0       	ldi	r29, 0x03	; 3
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <_fpadd_parts+0x296>
    152e:	e4 01       	movw	r28, r8
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <_fpadd_parts+0x296>
    1532:	ef 01       	movw	r28, r30
    1534:	ce 01       	movw	r24, r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	e0 e1       	ldi	r30, 0x10	; 16
    153c:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x4>

00001540 <__addsf3>:
    1540:	a0 e2       	ldi	r26, 0x20	; 32
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e6 ea       	ldi	r30, 0xA6	; 166
    1546:	fa e0       	ldi	r31, 0x0A	; 10
    1548:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__prologue_saves__+0x20>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	af 83       	std	Y+7, r26	; 0x07
    1556:	b8 87       	std	Y+8, r27	; 0x08
    1558:	29 83       	std	Y+1, r18	; 0x01
    155a:	3a 83       	std	Y+2, r19	; 0x02
    155c:	4b 83       	std	Y+3, r20	; 0x03
    155e:	5c 83       	std	Y+4, r21	; 0x04
    1560:	ce 01       	movw	r24, r28
    1562:	05 96       	adiw	r24, 0x05	; 5
    1564:	be 01       	movw	r22, r28
    1566:	67 5e       	subi	r22, 0xE7	; 231
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	be 01       	movw	r22, r28
    1574:	6f 5e       	subi	r22, 0xEF	; 239
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    157c:	ce 01       	movw	r24, r28
    157e:	49 96       	adiw	r24, 0x19	; 25
    1580:	be 01       	movw	r22, r28
    1582:	6f 5e       	subi	r22, 0xEF	; 239
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	ae 01       	movw	r20, r28
    1588:	47 5f       	subi	r20, 0xF7	; 247
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	0e 94 4f 09 	call	0x129e	; 0x129e <_fpadd_parts>
    1590:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__pack_f>
    1594:	46 2f       	mov	r20, r22
    1596:	57 2f       	mov	r21, r23
    1598:	68 2f       	mov	r22, r24
    159a:	79 2f       	mov	r23, r25
    159c:	cb 01       	movw	r24, r22
    159e:	ba 01       	movw	r22, r20
    15a0:	a0 96       	adiw	r28, 0x20	; 32
    15a2:	e2 e0       	ldi	r30, 0x02	; 2
    15a4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__epilogue_restores__+0x20>

000015a8 <__subsf3>:
    15a8:	a0 e2       	ldi	r26, 0x20	; 32
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea ed       	ldi	r30, 0xDA	; 218
    15ae:	fa e0       	ldi	r31, 0x0A	; 10
    15b0:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__prologue_saves__+0x20>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	af 83       	std	Y+7, r26	; 0x07
    15be:	b8 87       	std	Y+8, r27	; 0x08
    15c0:	29 83       	std	Y+1, r18	; 0x01
    15c2:	3a 83       	std	Y+2, r19	; 0x02
    15c4:	4b 83       	std	Y+3, r20	; 0x03
    15c6:	5c 83       	std	Y+4, r21	; 0x04
    15c8:	ce 01       	movw	r24, r28
    15ca:	05 96       	adiw	r24, 0x05	; 5
    15cc:	be 01       	movw	r22, r28
    15ce:	67 5e       	subi	r22, 0xE7	; 231
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    15d6:	ce 01       	movw	r24, r28
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	be 01       	movw	r22, r28
    15dc:	6f 5e       	subi	r22, 0xEF	; 239
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    15e4:	8a 89       	ldd	r24, Y+18	; 0x12
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	89 27       	eor	r24, r25
    15ea:	8a 8b       	std	Y+18, r24	; 0x12
    15ec:	ce 01       	movw	r24, r28
    15ee:	49 96       	adiw	r24, 0x19	; 25
    15f0:	be 01       	movw	r22, r28
    15f2:	6f 5e       	subi	r22, 0xEF	; 239
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	ae 01       	movw	r20, r28
    15f8:	47 5f       	subi	r20, 0xF7	; 247
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	0e 94 4f 09 	call	0x129e	; 0x129e <_fpadd_parts>
    1600:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__pack_f>
    1604:	46 2f       	mov	r20, r22
    1606:	57 2f       	mov	r21, r23
    1608:	68 2f       	mov	r22, r24
    160a:	79 2f       	mov	r23, r25
    160c:	cb 01       	movw	r24, r22
    160e:	ba 01       	movw	r22, r20
    1610:	a0 96       	adiw	r28, 0x20	; 32
    1612:	e2 e0       	ldi	r30, 0x02	; 2
    1614:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__epilogue_restores__+0x20>

00001618 <__mulsf3>:
    1618:	a0 e2       	ldi	r26, 0x20	; 32
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e2 e1       	ldi	r30, 0x12	; 18
    161e:	fb e0       	ldi	r31, 0x0B	; 11
    1620:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x4>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	af 83       	std	Y+7, r26	; 0x07
    162e:	b8 87       	std	Y+8, r27	; 0x08
    1630:	29 83       	std	Y+1, r18	; 0x01
    1632:	3a 83       	std	Y+2, r19	; 0x02
    1634:	4b 83       	std	Y+3, r20	; 0x03
    1636:	5c 83       	std	Y+4, r21	; 0x04
    1638:	ce 01       	movw	r24, r28
    163a:	05 96       	adiw	r24, 0x05	; 5
    163c:	be 01       	movw	r22, r28
    163e:	67 5e       	subi	r22, 0xE7	; 231
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    1646:	ce 01       	movw	r24, r28
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	be 01       	movw	r22, r28
    164c:	6f 5e       	subi	r22, 0xEF	; 239
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    1654:	99 8d       	ldd	r25, Y+25	; 0x19
    1656:	92 30       	cpi	r25, 0x02	; 2
    1658:	78 f0       	brcs	.+30     	; 0x1678 <__mulsf3+0x60>
    165a:	89 89       	ldd	r24, Y+17	; 0x11
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	c0 f0       	brcs	.+48     	; 0x1690 <__mulsf3+0x78>
    1660:	94 30       	cpi	r25, 0x04	; 4
    1662:	19 f4       	brne	.+6      	; 0x166a <__mulsf3+0x52>
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	41 f4       	brne	.+16     	; 0x1678 <__mulsf3+0x60>
    1668:	ca c0       	rjmp	.+404    	; 0x17fe <__mulsf3+0x1e6>
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	19 f4       	brne	.+6      	; 0x1674 <__mulsf3+0x5c>
    166e:	92 30       	cpi	r25, 0x02	; 2
    1670:	79 f4       	brne	.+30     	; 0x1690 <__mulsf3+0x78>
    1672:	c5 c0       	rjmp	.+394    	; 0x17fe <__mulsf3+0x1e6>
    1674:	92 30       	cpi	r25, 0x02	; 2
    1676:	51 f4       	brne	.+20     	; 0x168c <__mulsf3+0x74>
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    167c:	9a 89       	ldd	r25, Y+18	; 0x12
    167e:	29 17       	cp	r18, r25
    1680:	09 f4       	brne	.+2      	; 0x1684 <__mulsf3+0x6c>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	8a 8f       	std	Y+26, r24	; 0x1a
    1686:	ce 01       	movw	r24, r28
    1688:	49 96       	adiw	r24, 0x19	; 25
    168a:	bb c0       	rjmp	.+374    	; 0x1802 <__mulsf3+0x1ea>
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	51 f4       	brne	.+20     	; 0x16a4 <__mulsf3+0x8c>
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1694:	9a 89       	ldd	r25, Y+18	; 0x12
    1696:	29 17       	cp	r18, r25
    1698:	09 f4       	brne	.+2      	; 0x169c <__mulsf3+0x84>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	8a 8b       	std	Y+18, r24	; 0x12
    169e:	ce 01       	movw	r24, r28
    16a0:	41 96       	adiw	r24, 0x11	; 17
    16a2:	af c0       	rjmp	.+350    	; 0x1802 <__mulsf3+0x1ea>
    16a4:	4d 8c       	ldd	r4, Y+29	; 0x1d
    16a6:	5e 8c       	ldd	r5, Y+30	; 0x1e
    16a8:	6f 8c       	ldd	r6, Y+31	; 0x1f
    16aa:	78 a0       	lds	r23, 0x88
    16ac:	0d 89       	ldd	r16, Y+21	; 0x15
    16ae:	1e 89       	ldd	r17, Y+22	; 0x16
    16b0:	2f 89       	ldd	r18, Y+23	; 0x17
    16b2:	38 8d       	ldd	r19, Y+24	; 0x18
    16b4:	e0 e2       	ldi	r30, 0x20	; 32
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	ba 01       	movw	r22, r20
    16be:	88 24       	eor	r8, r8
    16c0:	99 24       	eor	r9, r9
    16c2:	54 01       	movw	r10, r8
    16c4:	cc 24       	eor	r12, r12
    16c6:	dd 24       	eor	r13, r13
    16c8:	76 01       	movw	r14, r12
    16ca:	c2 01       	movw	r24, r4
    16cc:	81 70       	andi	r24, 0x01	; 1
    16ce:	90 70       	andi	r25, 0x00	; 0
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	d1 f0       	breq	.+52     	; 0x1708 <__mulsf3+0xf0>
    16d4:	c0 0e       	add	r12, r16
    16d6:	d1 1e       	adc	r13, r17
    16d8:	e2 1e       	adc	r14, r18
    16da:	f3 1e       	adc	r15, r19
    16dc:	db 01       	movw	r26, r22
    16de:	ca 01       	movw	r24, r20
    16e0:	88 0d       	add	r24, r8
    16e2:	99 1d       	adc	r25, r9
    16e4:	aa 1d       	adc	r26, r10
    16e6:	bb 1d       	adc	r27, r11
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	c0 16       	cp	r12, r16
    16f2:	d1 06       	cpc	r13, r17
    16f4:	e2 06       	cpc	r14, r18
    16f6:	f3 06       	cpc	r15, r19
    16f8:	18 f0       	brcs	.+6      	; 0x1700 <__mulsf3+0xe8>
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	ba 01       	movw	r22, r20
    1700:	48 0f       	add	r20, r24
    1702:	59 1f       	adc	r21, r25
    1704:	6a 1f       	adc	r22, r26
    1706:	7b 1f       	adc	r23, r27
    1708:	88 0c       	add	r8, r8
    170a:	99 1c       	adc	r9, r9
    170c:	aa 1c       	adc	r10, r10
    170e:	bb 1c       	adc	r11, r11
    1710:	37 ff       	sbrs	r19, 7
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <__mulsf3+0x10c>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	88 2a       	or	r8, r24
    171e:	99 2a       	or	r9, r25
    1720:	aa 2a       	or	r10, r26
    1722:	bb 2a       	or	r11, r27
    1724:	00 0f       	add	r16, r16
    1726:	11 1f       	adc	r17, r17
    1728:	22 1f       	adc	r18, r18
    172a:	33 1f       	adc	r19, r19
    172c:	76 94       	lsr	r7
    172e:	67 94       	ror	r6
    1730:	57 94       	ror	r5
    1732:	47 94       	ror	r4
    1734:	31 97       	sbiw	r30, 0x01	; 1
    1736:	49 f6       	brne	.-110    	; 0x16ca <__mulsf3+0xb2>
    1738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173c:	2b 89       	ldd	r18, Y+19	; 0x13
    173e:	3c 89       	ldd	r19, Y+20	; 0x14
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	02 96       	adiw	r24, 0x02	; 2
    1746:	9c 87       	std	Y+12, r25	; 0x0c
    1748:	8b 87       	std	Y+11, r24	; 0x0b
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    174e:	9a 89       	ldd	r25, Y+18	; 0x12
    1750:	29 17       	cp	r18, r25
    1752:	09 f4       	brne	.+2      	; 0x1756 <__mulsf3+0x13e>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	8a 87       	std	Y+10, r24	; 0x0a
    1758:	2b 85       	ldd	r18, Y+11	; 0x0b
    175a:	3c 85       	ldd	r19, Y+12	; 0x0c
    175c:	17 c0       	rjmp	.+46     	; 0x178c <__mulsf3+0x174>
    175e:	ca 01       	movw	r24, r20
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 f0       	breq	.+24     	; 0x1780 <__mulsf3+0x168>
    1768:	f6 94       	lsr	r15
    176a:	e7 94       	ror	r14
    176c:	d7 94       	ror	r13
    176e:	c7 94       	ror	r12
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e8       	ldi	r27, 0x80	; 128
    1778:	c8 2a       	or	r12, r24
    177a:	d9 2a       	or	r13, r25
    177c:	ea 2a       	or	r14, r26
    177e:	fb 2a       	or	r15, r27
    1780:	76 95       	lsr	r23
    1782:	67 95       	ror	r22
    1784:	57 95       	ror	r21
    1786:	47 95       	ror	r20
    1788:	2f 5f       	subi	r18, 0xFF	; 255
    178a:	3f 4f       	sbci	r19, 0xFF	; 255
    178c:	77 fd       	sbrc	r23, 7
    178e:	e7 cf       	rjmp	.-50     	; 0x175e <__mulsf3+0x146>
    1790:	c9 01       	movw	r24, r18
    1792:	0b c0       	rjmp	.+22     	; 0x17aa <__mulsf3+0x192>
    1794:	44 0f       	add	r20, r20
    1796:	55 1f       	adc	r21, r21
    1798:	66 1f       	adc	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	f7 fc       	sbrc	r15, 7
    179e:	41 60       	ori	r20, 0x01	; 1
    17a0:	cc 0c       	add	r12, r12
    17a2:	dd 1c       	adc	r13, r13
    17a4:	ee 1c       	adc	r14, r14
    17a6:	ff 1c       	adc	r15, r15
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	40 30       	cpi	r20, 0x00	; 0
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	5a 07       	cpc	r21, r26
    17b0:	a0 e0       	ldi	r26, 0x00	; 0
    17b2:	6a 07       	cpc	r22, r26
    17b4:	a0 e4       	ldi	r26, 0x40	; 64
    17b6:	7a 07       	cpc	r23, r26
    17b8:	68 f3       	brcs	.-38     	; 0x1794 <__mulsf3+0x17c>
    17ba:	8b 87       	std	Y+11, r24	; 0x0b
    17bc:	9c 87       	std	Y+12, r25	; 0x0c
    17be:	db 01       	movw	r26, r22
    17c0:	ca 01       	movw	r24, r20
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	90 70       	andi	r25, 0x00	; 0
    17c6:	a0 70       	andi	r26, 0x00	; 0
    17c8:	b0 70       	andi	r27, 0x00	; 0
    17ca:	80 34       	cpi	r24, 0x40	; 64
    17cc:	91 05       	cpc	r25, r1
    17ce:	a1 05       	cpc	r26, r1
    17d0:	b1 05       	cpc	r27, r1
    17d2:	61 f4       	brne	.+24     	; 0x17ec <__mulsf3+0x1d4>
    17d4:	47 fd       	sbrc	r20, 7
    17d6:	0a c0       	rjmp	.+20     	; 0x17ec <__mulsf3+0x1d4>
    17d8:	c1 14       	cp	r12, r1
    17da:	d1 04       	cpc	r13, r1
    17dc:	e1 04       	cpc	r14, r1
    17de:	f1 04       	cpc	r15, r1
    17e0:	29 f0       	breq	.+10     	; 0x17ec <__mulsf3+0x1d4>
    17e2:	40 5c       	subi	r20, 0xC0	; 192
    17e4:	5f 4f       	sbci	r21, 0xFF	; 255
    17e6:	6f 4f       	sbci	r22, 0xFF	; 255
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	40 78       	andi	r20, 0x80	; 128
    17ec:	4d 87       	std	Y+13, r20	; 0x0d
    17ee:	5e 87       	std	Y+14, r21	; 0x0e
    17f0:	6f 87       	std	Y+15, r22	; 0x0f
    17f2:	78 8b       	std	Y+16, r23	; 0x10
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	89 87       	std	Y+9, r24	; 0x09
    17f8:	ce 01       	movw	r24, r28
    17fa:	09 96       	adiw	r24, 0x09	; 9
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <__mulsf3+0x1ea>
    17fe:	81 ee       	ldi	r24, 0xE1	; 225
    1800:	93 e0       	ldi	r25, 0x03	; 3
    1802:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__pack_f>
    1806:	46 2f       	mov	r20, r22
    1808:	57 2f       	mov	r21, r23
    180a:	68 2f       	mov	r22, r24
    180c:	79 2f       	mov	r23, r25
    180e:	cb 01       	movw	r24, r22
    1810:	ba 01       	movw	r22, r20
    1812:	a0 96       	adiw	r28, 0x20	; 32
    1814:	e0 e1       	ldi	r30, 0x10	; 16
    1816:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x4>

0000181a <__gesf2>:
    181a:	a8 e1       	ldi	r26, 0x18	; 24
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e3 e1       	ldi	r30, 0x13	; 19
    1820:	fc e0       	ldi	r31, 0x0C	; 12
    1822:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__prologue_saves__+0x20>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	af 83       	std	Y+7, r26	; 0x07
    1830:	b8 87       	std	Y+8, r27	; 0x08
    1832:	29 83       	std	Y+1, r18	; 0x01
    1834:	3a 83       	std	Y+2, r19	; 0x02
    1836:	4b 83       	std	Y+3, r20	; 0x03
    1838:	5c 83       	std	Y+4, r21	; 0x04
    183a:	ce 01       	movw	r24, r28
    183c:	05 96       	adiw	r24, 0x05	; 5
    183e:	be 01       	movw	r22, r28
    1840:	6f 5e       	subi	r22, 0xEF	; 239
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    1848:	ce 01       	movw	r24, r28
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	be 01       	movw	r22, r28
    184e:	67 5f       	subi	r22, 0xF7	; 247
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    1856:	89 89       	ldd	r24, Y+17	; 0x11
    1858:	82 30       	cpi	r24, 0x02	; 2
    185a:	58 f0       	brcs	.+22     	; 0x1872 <__gesf2+0x58>
    185c:	89 85       	ldd	r24, Y+9	; 0x09
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	40 f0       	brcs	.+16     	; 0x1872 <__gesf2+0x58>
    1862:	ce 01       	movw	r24, r28
    1864:	41 96       	adiw	r24, 0x11	; 17
    1866:	be 01       	movw	r22, r28
    1868:	67 5f       	subi	r22, 0xF7	; 247
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__fpcmp_parts_f>
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <__gesf2+0x5a>
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	68 96       	adiw	r28, 0x18	; 24
    1876:	e2 e0       	ldi	r30, 0x02	; 2
    1878:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__epilogue_restores__+0x20>

0000187c <__floatsisf>:
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	28 97       	sbiw	r28, 0x08	; 8
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	6b 01       	movw	r12, r22
    189a:	7c 01       	movw	r14, r24
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	d7 01       	movw	r26, r14
    18a2:	c6 01       	movw	r24, r12
    18a4:	88 27       	eor	r24, r24
    18a6:	b7 fd       	sbrc	r27, 7
    18a8:	83 95       	inc	r24
    18aa:	99 27       	eor	r25, r25
    18ac:	aa 27       	eor	r26, r26
    18ae:	bb 27       	eor	r27, r27
    18b0:	28 2f       	mov	r18, r24
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	c1 14       	cp	r12, r1
    18b6:	d1 04       	cpc	r13, r1
    18b8:	e1 04       	cpc	r14, r1
    18ba:	f1 04       	cpc	r15, r1
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <__floatsisf+0x48>
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	35 c0       	rjmp	.+106    	; 0x192e <__floatsisf+0xb2>
    18c4:	8e e1       	ldi	r24, 0x1E	; 30
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9c 83       	std	Y+4, r25	; 0x04
    18ca:	8b 83       	std	Y+3, r24	; 0x03
    18cc:	22 23       	and	r18, r18
    18ce:	89 f0       	breq	.+34     	; 0x18f2 <__floatsisf+0x76>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	c8 16       	cp	r12, r24
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	d8 06       	cpc	r13, r24
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	e8 06       	cpc	r14, r24
    18dc:	80 e8       	ldi	r24, 0x80	; 128
    18de:	f8 06       	cpc	r15, r24
    18e0:	59 f1       	breq	.+86     	; 0x1938 <__floatsisf+0xbc>
    18e2:	f0 94       	com	r15
    18e4:	e0 94       	com	r14
    18e6:	d0 94       	com	r13
    18e8:	c0 94       	com	r12
    18ea:	c1 1c       	adc	r12, r1
    18ec:	d1 1c       	adc	r13, r1
    18ee:	e1 1c       	adc	r14, r1
    18f0:	f1 1c       	adc	r15, r1
    18f2:	cd 82       	std	Y+5, r12	; 0x05
    18f4:	de 82       	std	Y+6, r13	; 0x06
    18f6:	ef 82       	std	Y+7, r14	; 0x07
    18f8:	f8 86       	std	Y+8, r15	; 0x08
    18fa:	c7 01       	movw	r24, r14
    18fc:	b6 01       	movw	r22, r12
    18fe:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__clzsi2>
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	18 16       	cp	r1, r24
    1906:	19 06       	cpc	r1, r25
    1908:	94 f4       	brge	.+36     	; 0x192e <__floatsisf+0xb2>
    190a:	08 2e       	mov	r0, r24
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <__floatsisf+0x9a>
    190e:	cc 0c       	add	r12, r12
    1910:	dd 1c       	adc	r13, r13
    1912:	ee 1c       	adc	r14, r14
    1914:	ff 1c       	adc	r15, r15
    1916:	0a 94       	dec	r0
    1918:	d2 f7       	brpl	.-12     	; 0x190e <__floatsisf+0x92>
    191a:	cd 82       	std	Y+5, r12	; 0x05
    191c:	de 82       	std	Y+6, r13	; 0x06
    191e:	ef 82       	std	Y+7, r14	; 0x07
    1920:	f8 86       	std	Y+8, r15	; 0x08
    1922:	2e e1       	ldi	r18, 0x1E	; 30
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	28 1b       	sub	r18, r24
    1928:	39 0b       	sbc	r19, r25
    192a:	3c 83       	std	Y+4, r19	; 0x04
    192c:	2b 83       	std	Y+3, r18	; 0x03
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__pack_f>
    1936:	04 c0       	rjmp	.+8      	; 0x1940 <__floatsisf+0xc4>
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	9f ec       	ldi	r25, 0xCF	; 207
    1940:	38 2f       	mov	r19, r24
    1942:	29 2f       	mov	r18, r25
    1944:	86 2f       	mov	r24, r22
    1946:	97 2f       	mov	r25, r23
    1948:	a3 2f       	mov	r26, r19
    194a:	b2 2f       	mov	r27, r18
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	28 96       	adiw	r28, 0x08	; 8
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	08 95       	ret

0000196a <__fixsfsi>:
    196a:	ac e0       	ldi	r26, 0x0C	; 12
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	eb eb       	ldi	r30, 0xBB	; 187
    1970:	fc e0       	ldi	r31, 0x0C	; 12
    1972:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__prologue_saves__+0x1c>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	ab 83       	std	Y+3, r26	; 0x03
    1980:	bc 83       	std	Y+4, r27	; 0x04
    1982:	ce 01       	movw	r24, r28
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	be 01       	movw	r22, r28
    1988:	6b 5f       	subi	r22, 0xFB	; 251
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__unpack_f>
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	82 30       	cpi	r24, 0x02	; 2
    1994:	69 f1       	breq	.+90     	; 0x19f0 <__fixsfsi+0x86>
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	58 f1       	brcs	.+86     	; 0x19f0 <__fixsfsi+0x86>
    199a:	84 30       	cpi	r24, 0x04	; 4
    199c:	39 f0       	breq	.+14     	; 0x19ac <__fixsfsi+0x42>
    199e:	2f 81       	ldd	r18, Y+7	; 0x07
    19a0:	38 85       	ldd	r19, Y+8	; 0x08
    19a2:	37 fd       	sbrc	r19, 7
    19a4:	25 c0       	rjmp	.+74     	; 0x19f0 <__fixsfsi+0x86>
    19a6:	2f 31       	cpi	r18, 0x1F	; 31
    19a8:	31 05       	cpc	r19, r1
    19aa:	44 f0       	brlt	.+16     	; 0x19bc <__fixsfsi+0x52>
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	88 23       	and	r24, r24
    19b0:	19 f1       	breq	.+70     	; 0x19f8 <__fixsfsi+0x8e>
    19b2:	00 e0       	ldi	r16, 0x00	; 0
    19b4:	10 e0       	ldi	r17, 0x00	; 0
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e8       	ldi	r19, 0x80	; 128
    19ba:	22 c0       	rjmp	.+68     	; 0x1a00 <__fixsfsi+0x96>
    19bc:	8e e1       	ldi	r24, 0x1E	; 30
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	82 1b       	sub	r24, r18
    19c2:	93 0b       	sbc	r25, r19
    19c4:	09 85       	ldd	r16, Y+9	; 0x09
    19c6:	1a 85       	ldd	r17, Y+10	; 0x0a
    19c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    19ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <__fixsfsi+0x6c>
    19ce:	36 95       	lsr	r19
    19d0:	27 95       	ror	r18
    19d2:	17 95       	ror	r17
    19d4:	07 95       	ror	r16
    19d6:	8a 95       	dec	r24
    19d8:	d2 f7       	brpl	.-12     	; 0x19ce <__fixsfsi+0x64>
    19da:	8e 81       	ldd	r24, Y+6	; 0x06
    19dc:	88 23       	and	r24, r24
    19de:	81 f0       	breq	.+32     	; 0x1a00 <__fixsfsi+0x96>
    19e0:	30 95       	com	r19
    19e2:	20 95       	com	r18
    19e4:	10 95       	com	r17
    19e6:	01 95       	neg	r16
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	2f 4f       	sbci	r18, 0xFF	; 255
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <__fixsfsi+0x96>
    19f0:	00 e0       	ldi	r16, 0x00	; 0
    19f2:	10 e0       	ldi	r17, 0x00	; 0
    19f4:	98 01       	movw	r18, r16
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <__fixsfsi+0x96>
    19f8:	0f ef       	ldi	r16, 0xFF	; 255
    19fa:	1f ef       	ldi	r17, 0xFF	; 255
    19fc:	2f ef       	ldi	r18, 0xFF	; 255
    19fe:	3f e7       	ldi	r19, 0x7F	; 127
    1a00:	b8 01       	movw	r22, r16
    1a02:	c9 01       	movw	r24, r18
    1a04:	2c 96       	adiw	r28, 0x0c	; 12
    1a06:	e4 e0       	ldi	r30, 0x04	; 4
    1a08:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <__epilogue_restores__+0x1c>

00001a0c <__clzsi2>:
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	8b 01       	movw	r16, r22
    1a1a:	9c 01       	movw	r18, r24
    1a1c:	00 30       	cpi	r16, 0x00	; 0
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	18 07       	cpc	r17, r24
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	28 07       	cpc	r18, r24
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	38 07       	cpc	r19, r24
    1a2a:	50 f4       	brcc	.+20     	; 0x1a40 <__clzsi2+0x34>
    1a2c:	0f 3f       	cpi	r16, 0xFF	; 255
    1a2e:	11 05       	cpc	r17, r1
    1a30:	21 05       	cpc	r18, r1
    1a32:	31 05       	cpc	r19, r1
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <__clzsi2+0x2c>
    1a36:	88 f4       	brcc	.+34     	; 0x1a5a <__clzsi2+0x4e>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	16 c0       	rjmp	.+44     	; 0x1a6c <__clzsi2+0x60>
    1a40:	00 30       	cpi	r16, 0x00	; 0
    1a42:	e0 e0       	ldi	r30, 0x00	; 0
    1a44:	1e 07       	cpc	r17, r30
    1a46:	e0 e0       	ldi	r30, 0x00	; 0
    1a48:	2e 07       	cpc	r18, r30
    1a4a:	e1 e0       	ldi	r30, 0x01	; 1
    1a4c:	3e 07       	cpc	r19, r30
    1a4e:	50 f4       	brcc	.+20     	; 0x1a64 <__clzsi2+0x58>
    1a50:	80 e1       	ldi	r24, 0x10	; 16
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c <__clzsi2+0x60>
    1a5a:	88 e0       	ldi	r24, 0x08	; 8
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__clzsi2+0x60>
    1a64:	88 e1       	ldi	r24, 0x18	; 24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e0       	ldi	r26, 0x00	; 0
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	48 1b       	sub	r20, r24
    1a76:	59 0b       	sbc	r21, r25
    1a78:	6a 0b       	sbc	r22, r26
    1a7a:	7b 0b       	sbc	r23, r27
    1a7c:	68 01       	movw	r12, r16
    1a7e:	79 01       	movw	r14, r18
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <__clzsi2+0x7e>
    1a82:	f6 94       	lsr	r15
    1a84:	e7 94       	ror	r14
    1a86:	d7 94       	ror	r13
    1a88:	c7 94       	ror	r12
    1a8a:	8a 95       	dec	r24
    1a8c:	d2 f7       	brpl	.-12     	; 0x1a82 <__clzsi2+0x76>
    1a8e:	d7 01       	movw	r26, r14
    1a90:	c6 01       	movw	r24, r12
    1a92:	87 51       	subi	r24, 0x17	; 23
    1a94:	9c 4f       	sbci	r25, 0xFC	; 252
    1a96:	fc 01       	movw	r30, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 1b       	sub	r20, r24
    1a9c:	51 09       	sbc	r21, r1
    1a9e:	61 09       	sbc	r22, r1
    1aa0:	71 09       	sbc	r23, r1
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14
    1aac:	df 90       	pop	r13
    1aae:	cf 90       	pop	r12
    1ab0:	08 95       	ret

00001ab2 <__pack_f>:
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	dc 01       	movw	r26, r24
    1ac0:	14 96       	adiw	r26, 0x04	; 4
    1ac2:	4d 91       	ld	r20, X+
    1ac4:	5d 91       	ld	r21, X+
    1ac6:	6d 91       	ld	r22, X+
    1ac8:	7c 91       	ld	r23, X
    1aca:	17 97       	sbiw	r26, 0x07	; 7
    1acc:	11 96       	adiw	r26, 0x01	; 1
    1ace:	ec 91       	ld	r30, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	8c 91       	ld	r24, X
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	20 f4       	brcc	.+8      	; 0x1ae0 <__pack_f+0x2e>
    1ad8:	60 61       	ori	r22, 0x10	; 16
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a5 c0       	rjmp	.+330    	; 0x1c2a <__pack_f+0x178>
    1ae0:	84 30       	cpi	r24, 0x04	; 4
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <__pack_f+0x34>
    1ae4:	9d c0       	rjmp	.+314    	; 0x1c20 <__pack_f+0x16e>
    1ae6:	82 30       	cpi	r24, 0x02	; 2
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <__pack_f+0x3a>
    1aea:	94 c0       	rjmp	.+296    	; 0x1c14 <__pack_f+0x162>
    1aec:	41 15       	cp	r20, r1
    1aee:	51 05       	cpc	r21, r1
    1af0:	61 05       	cpc	r22, r1
    1af2:	71 05       	cpc	r23, r1
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <__pack_f+0x46>
    1af6:	91 c0       	rjmp	.+290    	; 0x1c1a <__pack_f+0x168>
    1af8:	12 96       	adiw	r26, 0x02	; 2
    1afa:	8d 91       	ld	r24, X+
    1afc:	9c 91       	ld	r25, X
    1afe:	13 97       	sbiw	r26, 0x03	; 3
    1b00:	2f ef       	ldi	r18, 0xFF	; 255
    1b02:	82 38       	cpi	r24, 0x82	; 130
    1b04:	92 07       	cpc	r25, r18
    1b06:	0c f0       	brlt	.+2      	; 0x1b0a <__pack_f+0x58>
    1b08:	59 c0       	rjmp	.+178    	; 0x1bbc <__pack_f+0x10a>
    1b0a:	22 e8       	ldi	r18, 0x82	; 130
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	28 1b       	sub	r18, r24
    1b10:	39 0b       	sbc	r19, r25
    1b12:	2a 31       	cpi	r18, 0x1A	; 26
    1b14:	31 05       	cpc	r19, r1
    1b16:	64 f5       	brge	.+88     	; 0x1b70 <__pack_f+0xbe>
    1b18:	6a 01       	movw	r12, r20
    1b1a:	7b 01       	movw	r14, r22
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <__pack_f+0x76>
    1b20:	f6 94       	lsr	r15
    1b22:	e7 94       	ror	r14
    1b24:	d7 94       	ror	r13
    1b26:	c7 94       	ror	r12
    1b28:	0a 94       	dec	r0
    1b2a:	d2 f7       	brpl	.-12     	; 0x1b20 <__pack_f+0x6e>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e0       	ldi	r26, 0x00	; 0
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <__pack_f+0x8c>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	aa 1f       	adc	r26, r26
    1b3c:	bb 1f       	adc	r27, r27
    1b3e:	2a 95       	dec	r18
    1b40:	d2 f7       	brpl	.-12     	; 0x1b36 <__pack_f+0x84>
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	a1 09       	sbc	r26, r1
    1b46:	b1 09       	sbc	r27, r1
    1b48:	84 23       	and	r24, r20
    1b4a:	95 23       	and	r25, r21
    1b4c:	a6 23       	and	r26, r22
    1b4e:	b7 23       	and	r27, r23
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	a1 05       	cpc	r26, r1
    1b5c:	b1 05       	cpc	r27, r1
    1b5e:	19 f4       	brne	.+6      	; 0x1b66 <__pack_f+0xb4>
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	ba 01       	movw	r22, r20
    1b66:	4c 29       	or	r20, r12
    1b68:	5d 29       	or	r21, r13
    1b6a:	6e 29       	or	r22, r14
    1b6c:	7f 29       	or	r23, r15
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <__pack_f+0xc4>
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	50 e0       	ldi	r21, 0x00	; 0
    1b74:	ba 01       	movw	r22, r20
    1b76:	db 01       	movw	r26, r22
    1b78:	ca 01       	movw	r24, r20
    1b7a:	8f 77       	andi	r24, 0x7F	; 127
    1b7c:	90 70       	andi	r25, 0x00	; 0
    1b7e:	a0 70       	andi	r26, 0x00	; 0
    1b80:	b0 70       	andi	r27, 0x00	; 0
    1b82:	80 34       	cpi	r24, 0x40	; 64
    1b84:	91 05       	cpc	r25, r1
    1b86:	a1 05       	cpc	r26, r1
    1b88:	b1 05       	cpc	r27, r1
    1b8a:	39 f4       	brne	.+14     	; 0x1b9a <__pack_f+0xe8>
    1b8c:	47 ff       	sbrs	r20, 7
    1b8e:	09 c0       	rjmp	.+18     	; 0x1ba2 <__pack_f+0xf0>
    1b90:	40 5c       	subi	r20, 0xC0	; 192
    1b92:	5f 4f       	sbci	r21, 0xFF	; 255
    1b94:	6f 4f       	sbci	r22, 0xFF	; 255
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <__pack_f+0xf0>
    1b9a:	41 5c       	subi	r20, 0xC1	; 193
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	6f 4f       	sbci	r22, 0xFF	; 255
    1ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	40 30       	cpi	r20, 0x00	; 0
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	52 07       	cpc	r21, r18
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	62 07       	cpc	r22, r18
    1bb0:	20 e4       	ldi	r18, 0x40	; 64
    1bb2:	72 07       	cpc	r23, r18
    1bb4:	38 f5       	brcc	.+78     	; 0x1c04 <__pack_f+0x152>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	24 c0       	rjmp	.+72     	; 0x1c04 <__pack_f+0x152>
    1bbc:	80 38       	cpi	r24, 0x80	; 128
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	7c f5       	brge	.+94     	; 0x1c20 <__pack_f+0x16e>
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	9b 01       	movw	r18, r22
    1bc6:	0f 77       	andi	r16, 0x7F	; 127
    1bc8:	10 70       	andi	r17, 0x00	; 0
    1bca:	20 70       	andi	r18, 0x00	; 0
    1bcc:	30 70       	andi	r19, 0x00	; 0
    1bce:	00 34       	cpi	r16, 0x40	; 64
    1bd0:	11 05       	cpc	r17, r1
    1bd2:	21 05       	cpc	r18, r1
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	39 f4       	brne	.+14     	; 0x1be6 <__pack_f+0x134>
    1bd8:	47 ff       	sbrs	r20, 7
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <__pack_f+0x13c>
    1bdc:	40 5c       	subi	r20, 0xC0	; 192
    1bde:	5f 4f       	sbci	r21, 0xFF	; 255
    1be0:	6f 4f       	sbci	r22, 0xFF	; 255
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <__pack_f+0x13c>
    1be6:	41 5c       	subi	r20, 0xC1	; 193
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bea:	6f 4f       	sbci	r22, 0xFF	; 255
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	77 fd       	sbrc	r23, 7
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <__pack_f+0x146>
    1bf2:	81 58       	subi	r24, 0x81	; 129
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <__pack_f+0x152>
    1bf8:	76 95       	lsr	r23
    1bfa:	67 95       	ror	r22
    1bfc:	57 95       	ror	r21
    1bfe:	47 95       	ror	r20
    1c00:	80 58       	subi	r24, 0x80	; 128
    1c02:	9f 4f       	sbci	r25, 0xFF	; 255
    1c04:	97 e0       	ldi	r25, 0x07	; 7
    1c06:	76 95       	lsr	r23
    1c08:	67 95       	ror	r22
    1c0a:	57 95       	ror	r21
    1c0c:	47 95       	ror	r20
    1c0e:	9a 95       	dec	r25
    1c10:	d1 f7       	brne	.-12     	; 0x1c06 <__pack_f+0x154>
    1c12:	0b c0       	rjmp	.+22     	; 0x1c2a <__pack_f+0x178>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <__pack_f+0x172>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <__pack_f+0x178>
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	ba 01       	movw	r22, r20
    1c2a:	98 2f       	mov	r25, r24
    1c2c:	97 95       	ror	r25
    1c2e:	99 27       	eor	r25, r25
    1c30:	97 95       	ror	r25
    1c32:	a6 2f       	mov	r26, r22
    1c34:	af 77       	andi	r26, 0x7F	; 127
    1c36:	e7 95       	ror	r30
    1c38:	ee 27       	eor	r30, r30
    1c3a:	e7 95       	ror	r30
    1c3c:	86 95       	lsr	r24
    1c3e:	3a 2f       	mov	r19, r26
    1c40:	39 2b       	or	r19, r25
    1c42:	28 2f       	mov	r18, r24
    1c44:	2e 2b       	or	r18, r30
    1c46:	84 2f       	mov	r24, r20
    1c48:	95 2f       	mov	r25, r21
    1c4a:	a3 2f       	mov	r26, r19
    1c4c:	b2 2f       	mov	r27, r18
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	08 95       	ret

00001c60 <__unpack_f>:
    1c60:	dc 01       	movw	r26, r24
    1c62:	fb 01       	movw	r30, r22
    1c64:	4c 91       	ld	r20, X
    1c66:	11 96       	adiw	r26, 0x01	; 1
    1c68:	5c 91       	ld	r21, X
    1c6a:	11 97       	sbiw	r26, 0x01	; 1
    1c6c:	12 96       	adiw	r26, 0x02	; 2
    1c6e:	8c 91       	ld	r24, X
    1c70:	12 97       	sbiw	r26, 0x02	; 2
    1c72:	68 2f       	mov	r22, r24
    1c74:	6f 77       	andi	r22, 0x7F	; 127
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	98 2f       	mov	r25, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	99 27       	eor	r25, r25
    1c7e:	99 1f       	adc	r25, r25
    1c80:	13 96       	adiw	r26, 0x03	; 3
    1c82:	2c 91       	ld	r18, X
    1c84:	13 97       	sbiw	r26, 0x03	; 3
    1c86:	82 2f       	mov	r24, r18
    1c88:	88 0f       	add	r24, r24
    1c8a:	89 2b       	or	r24, r25
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	22 1f       	adc	r18, r18
    1c90:	22 27       	eor	r18, r18
    1c92:	22 1f       	adc	r18, r18
    1c94:	21 83       	std	Z+1, r18	; 0x01
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	39 f5       	brne	.+78     	; 0x1ce8 <__unpack_f+0x88>
    1c9a:	41 15       	cp	r20, r1
    1c9c:	51 05       	cpc	r21, r1
    1c9e:	61 05       	cpc	r22, r1
    1ca0:	71 05       	cpc	r23, r1
    1ca2:	11 f4       	brne	.+4      	; 0x1ca8 <__unpack_f+0x48>
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	29 c0       	rjmp	.+82     	; 0x1cfa <__unpack_f+0x9a>
    1ca8:	82 e8       	ldi	r24, 0x82	; 130
    1caa:	9f ef       	ldi	r25, 0xFF	; 255
    1cac:	93 83       	std	Z+3, r25	; 0x03
    1cae:	82 83       	std	Z+2, r24	; 0x02
    1cb0:	27 e0       	ldi	r18, 0x07	; 7
    1cb2:	44 0f       	add	r20, r20
    1cb4:	55 1f       	adc	r21, r21
    1cb6:	66 1f       	adc	r22, r22
    1cb8:	77 1f       	adc	r23, r23
    1cba:	2a 95       	dec	r18
    1cbc:	d1 f7       	brne	.-12     	; 0x1cb2 <__unpack_f+0x52>
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	80 83       	st	Z, r24
    1cc2:	09 c0       	rjmp	.+18     	; 0x1cd6 <__unpack_f+0x76>
    1cc4:	44 0f       	add	r20, r20
    1cc6:	55 1f       	adc	r21, r21
    1cc8:	66 1f       	adc	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	93 83       	std	Z+3, r25	; 0x03
    1cd4:	82 83       	std	Z+2, r24	; 0x02
    1cd6:	40 30       	cpi	r20, 0x00	; 0
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	58 07       	cpc	r21, r24
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	68 07       	cpc	r22, r24
    1ce0:	80 e4       	ldi	r24, 0x40	; 64
    1ce2:	78 07       	cpc	r23, r24
    1ce4:	78 f3       	brcs	.-34     	; 0x1cc4 <__unpack_f+0x64>
    1ce6:	20 c0       	rjmp	.+64     	; 0x1d28 <__unpack_f+0xc8>
    1ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cea:	91 05       	cpc	r25, r1
    1cec:	79 f4       	brne	.+30     	; 0x1d0c <__unpack_f+0xac>
    1cee:	41 15       	cp	r20, r1
    1cf0:	51 05       	cpc	r21, r1
    1cf2:	61 05       	cpc	r22, r1
    1cf4:	71 05       	cpc	r23, r1
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <__unpack_f+0x9e>
    1cf8:	84 e0       	ldi	r24, 0x04	; 4
    1cfa:	80 83       	st	Z, r24
    1cfc:	08 95       	ret
    1cfe:	64 ff       	sbrs	r22, 4
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <__unpack_f+0xa8>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 83       	st	Z, r24
    1d06:	10 c0       	rjmp	.+32     	; 0x1d28 <__unpack_f+0xc8>
    1d08:	10 82       	st	Z, r1
    1d0a:	0e c0       	rjmp	.+28     	; 0x1d28 <__unpack_f+0xc8>
    1d0c:	8f 57       	subi	r24, 0x7F	; 127
    1d0e:	90 40       	sbci	r25, 0x00	; 0
    1d10:	93 83       	std	Z+3, r25	; 0x03
    1d12:	82 83       	std	Z+2, r24	; 0x02
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	80 83       	st	Z, r24
    1d18:	87 e0       	ldi	r24, 0x07	; 7
    1d1a:	44 0f       	add	r20, r20
    1d1c:	55 1f       	adc	r21, r21
    1d1e:	66 1f       	adc	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	8a 95       	dec	r24
    1d24:	d1 f7       	brne	.-12     	; 0x1d1a <__unpack_f+0xba>
    1d26:	70 64       	ori	r23, 0x40	; 64
    1d28:	44 83       	std	Z+4, r20	; 0x04
    1d2a:	55 83       	std	Z+5, r21	; 0x05
    1d2c:	66 83       	std	Z+6, r22	; 0x06
    1d2e:	77 83       	std	Z+7, r23	; 0x07
    1d30:	08 95       	ret

00001d32 <__fpcmp_parts_f>:
    1d32:	cf 93       	push	r28
    1d34:	fc 01       	movw	r30, r24
    1d36:	db 01       	movw	r26, r22
    1d38:	90 81       	ld	r25, Z
    1d3a:	92 30       	cpi	r25, 0x02	; 2
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <__fpcmp_parts_f+0xe>
    1d3e:	4c c0       	rjmp	.+152    	; 0x1dd8 <__fpcmp_parts_f+0xa6>
    1d40:	8c 91       	ld	r24, X
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <__fpcmp_parts_f+0x16>
    1d46:	48 c0       	rjmp	.+144    	; 0x1dd8 <__fpcmp_parts_f+0xa6>
    1d48:	94 30       	cpi	r25, 0x04	; 4
    1d4a:	69 f4       	brne	.+26     	; 0x1d66 <__fpcmp_parts_f+0x34>
    1d4c:	21 81       	ldd	r18, Z+1	; 0x01
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	39 f4       	brne	.+14     	; 0x1d60 <__fpcmp_parts_f+0x2e>
    1d52:	11 96       	adiw	r26, 0x01	; 1
    1d54:	8c 91       	ld	r24, X
    1d56:	11 97       	sbiw	r26, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	82 1b       	sub	r24, r18
    1d5c:	91 09       	sbc	r25, r1
    1d5e:	44 c0       	rjmp	.+136    	; 0x1de8 <__fpcmp_parts_f+0xb6>
    1d60:	22 23       	and	r18, r18
    1d62:	d1 f1       	breq	.+116    	; 0x1dd8 <__fpcmp_parts_f+0xa6>
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <__fpcmp_parts_f+0xb2>
    1d66:	84 30       	cpi	r24, 0x04	; 4
    1d68:	21 f0       	breq	.+8      	; 0x1d72 <__fpcmp_parts_f+0x40>
    1d6a:	92 30       	cpi	r25, 0x02	; 2
    1d6c:	41 f4       	brne	.+16     	; 0x1d7e <__fpcmp_parts_f+0x4c>
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	b1 f1       	breq	.+108    	; 0x1dde <__fpcmp_parts_f+0xac>
    1d72:	11 96       	adiw	r26, 0x01	; 1
    1d74:	8c 91       	ld	r24, X
    1d76:	11 97       	sbiw	r26, 0x01	; 1
    1d78:	88 23       	and	r24, r24
    1d7a:	a1 f1       	breq	.+104    	; 0x1de4 <__fpcmp_parts_f+0xb2>
    1d7c:	2d c0       	rjmp	.+90     	; 0x1dd8 <__fpcmp_parts_f+0xa6>
    1d7e:	c1 81       	ldd	r28, Z+1	; 0x01
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	01 f1       	breq	.+64     	; 0x1dc4 <__fpcmp_parts_f+0x92>
    1d84:	11 96       	adiw	r26, 0x01	; 1
    1d86:	8c 91       	ld	r24, X
    1d88:	11 97       	sbiw	r26, 0x01	; 1
    1d8a:	c8 17       	cp	r28, r24
    1d8c:	d9 f4       	brne	.+54     	; 0x1dc4 <__fpcmp_parts_f+0x92>
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	12 96       	adiw	r26, 0x02	; 2
    1d94:	2d 91       	ld	r18, X+
    1d96:	3c 91       	ld	r19, X
    1d98:	13 97       	sbiw	r26, 0x03	; 3
    1d9a:	28 17       	cp	r18, r24
    1d9c:	39 07       	cpc	r19, r25
    1d9e:	94 f0       	brlt	.+36     	; 0x1dc4 <__fpcmp_parts_f+0x92>
    1da0:	82 17       	cp	r24, r18
    1da2:	93 07       	cpc	r25, r19
    1da4:	bc f0       	brlt	.+46     	; 0x1dd4 <__fpcmp_parts_f+0xa2>
    1da6:	44 81       	ldd	r20, Z+4	; 0x04
    1da8:	55 81       	ldd	r21, Z+5	; 0x05
    1daa:	66 81       	ldd	r22, Z+6	; 0x06
    1dac:	77 81       	ldd	r23, Z+7	; 0x07
    1dae:	14 96       	adiw	r26, 0x04	; 4
    1db0:	8d 91       	ld	r24, X+
    1db2:	9d 91       	ld	r25, X+
    1db4:	0d 90       	ld	r0, X+
    1db6:	bc 91       	ld	r27, X
    1db8:	a0 2d       	mov	r26, r0
    1dba:	84 17       	cp	r24, r20
    1dbc:	95 07       	cpc	r25, r21
    1dbe:	a6 07       	cpc	r26, r22
    1dc0:	b7 07       	cpc	r27, r23
    1dc2:	18 f4       	brcc	.+6      	; 0x1dca <__fpcmp_parts_f+0x98>
    1dc4:	cc 23       	and	r28, r28
    1dc6:	41 f0       	breq	.+16     	; 0x1dd8 <__fpcmp_parts_f+0xa6>
    1dc8:	0d c0       	rjmp	.+26     	; 0x1de4 <__fpcmp_parts_f+0xb2>
    1dca:	48 17       	cp	r20, r24
    1dcc:	59 07       	cpc	r21, r25
    1dce:	6a 07       	cpc	r22, r26
    1dd0:	7b 07       	cpc	r23, r27
    1dd2:	28 f4       	brcc	.+10     	; 0x1dde <__fpcmp_parts_f+0xac>
    1dd4:	cc 23       	and	r28, r28
    1dd6:	31 f0       	breq	.+12     	; 0x1de4 <__fpcmp_parts_f+0xb2>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <__fpcmp_parts_f+0xb6>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <__fpcmp_parts_f+0xb6>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	9f ef       	ldi	r25, 0xFF	; 255
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <main>:
#include "Task_queue.h"
#include "Timer.h"
#include "spi.h"

int main()
{
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	2a 97       	sbiw	r28, 0x0a	; 10
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;

	uart_init();
    1e00:	0e 94 39 07 	call	0xe72	; 0xe72 <uart_init>
	task_init();
    1e04:	0e 94 a1 03 	call	0x742	; 0x742 <task_init>
	timer_init();
    1e08:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <timer_init>
	spi_init();
    1e0c:	0e 94 39 03 	call	0x672	; 0x672 <spi_init>

	sei();
    1e10:	78 94       	sei

	printf("$ ");
    1e12:	0f 92       	push	r0
    1e14:	0f 92       	push	r0
    1e16:	86 e3       	ldi	r24, 0x36	; 54
    1e18:	92 e0       	ldi	r25, 0x02	; 2
    1e1a:	ed b7       	in	r30, 0x3d	; 61
    1e1c:	fe b7       	in	r31, 0x3e	; 62
    1e1e:	92 83       	std	Z+2, r25	; 0x02
    1e20:	81 83       	std	Z+1, r24	; 0x01
    1e22:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <printf>
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0

	while(1) {
		cli();
    1e2a:	f8 94       	cli
		tag = task_delete(&task);
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <task_delete>
		sei();
    1e34:	78 94       	sei
		if (tag)
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	c1 f3       	breq	.-16     	; 0x1e2a <main+0x3e>
			(*(task.fun))(task.arg);
    1e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3e:	ce 01       	movw	r24, r28
    1e40:	03 96       	adiw	r24, 0x03	; 3
    1e42:	19 95       	eicall
    1e44:	f2 cf       	rjmp	.-28     	; 0x1e2a <main+0x3e>

00001e46 <__divmodhi4>:
    1e46:	97 fb       	bst	r25, 7
    1e48:	09 2e       	mov	r0, r25
    1e4a:	07 26       	eor	r0, r23
    1e4c:	0a d0       	rcall	.+20     	; 0x1e62 <__divmodhi4_neg1>
    1e4e:	77 fd       	sbrc	r23, 7
    1e50:	04 d0       	rcall	.+8      	; 0x1e5a <__divmodhi4_neg2>
    1e52:	0c d0       	rcall	.+24     	; 0x1e6c <__udivmodhi4>
    1e54:	06 d0       	rcall	.+12     	; 0x1e62 <__divmodhi4_neg1>
    1e56:	00 20       	and	r0, r0
    1e58:	1a f4       	brpl	.+6      	; 0x1e60 <__divmodhi4_exit>

00001e5a <__divmodhi4_neg2>:
    1e5a:	70 95       	com	r23
    1e5c:	61 95       	neg	r22
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255

00001e60 <__divmodhi4_exit>:
    1e60:	08 95       	ret

00001e62 <__divmodhi4_neg1>:
    1e62:	f6 f7       	brtc	.-4      	; 0x1e60 <__divmodhi4_exit>
    1e64:	90 95       	com	r25
    1e66:	81 95       	neg	r24
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	08 95       	ret

00001e6c <__udivmodhi4>:
    1e6c:	aa 1b       	sub	r26, r26
    1e6e:	bb 1b       	sub	r27, r27
    1e70:	51 e1       	ldi	r21, 0x11	; 17
    1e72:	07 c0       	rjmp	.+14     	; 0x1e82 <__udivmodhi4_ep>

00001e74 <__udivmodhi4_loop>:
    1e74:	aa 1f       	adc	r26, r26
    1e76:	bb 1f       	adc	r27, r27
    1e78:	a6 17       	cp	r26, r22
    1e7a:	b7 07       	cpc	r27, r23
    1e7c:	10 f0       	brcs	.+4      	; 0x1e82 <__udivmodhi4_ep>
    1e7e:	a6 1b       	sub	r26, r22
    1e80:	b7 0b       	sbc	r27, r23

00001e82 <__udivmodhi4_ep>:
    1e82:	88 1f       	adc	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	5a 95       	dec	r21
    1e88:	a9 f7       	brne	.-22     	; 0x1e74 <__udivmodhi4_loop>
    1e8a:	80 95       	com	r24
    1e8c:	90 95       	com	r25
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	08 95       	ret

00001e94 <__prologue_saves__>:
    1e94:	2f 92       	push	r2
    1e96:	3f 92       	push	r3
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	ca 1b       	sub	r28, r26
    1ebe:	db 0b       	sbc	r29, r27
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	19 94       	eijmp

00001ecc <__epilogue_restores__>:
    1ecc:	2a 88       	ldd	r2, Y+18	; 0x12
    1ece:	39 88       	ldd	r3, Y+17	; 0x11
    1ed0:	48 88       	ldd	r4, Y+16	; 0x10
    1ed2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eda:	9b 84       	ldd	r9, Y+11	; 0x0b
    1edc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ede:	b9 84       	ldd	r11, Y+9	; 0x09
    1ee0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ee2:	df 80       	ldd	r13, Y+7	; 0x07
    1ee4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee8:	0c 81       	ldd	r16, Y+4	; 0x04
    1eea:	1b 81       	ldd	r17, Y+3	; 0x03
    1eec:	aa 81       	ldd	r26, Y+2	; 0x02
    1eee:	b9 81       	ldd	r27, Y+1	; 0x01
    1ef0:	ce 0f       	add	r28, r30
    1ef2:	d1 1d       	adc	r29, r1
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	ed 01       	movw	r28, r26
    1f00:	08 95       	ret

00001f02 <malloc>:
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	ac 01       	movw	r20, r24
    1f08:	82 30       	cpi	r24, 0x02	; 2
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	10 f4       	brcc	.+4      	; 0x1f12 <malloc+0x10>
    1f0e:	42 e0       	ldi	r20, 0x02	; 2
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	e0 91 2c 06 	lds	r30, 0x062C
    1f16:	f0 91 2d 06 	lds	r31, 0x062D
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	a0 e0       	ldi	r26, 0x00	; 0
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	24 c0       	rjmp	.+72     	; 0x1f6c <malloc+0x6a>
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	84 17       	cp	r24, r20
    1f2a:	95 07       	cpc	r25, r21
    1f2c:	d0 f0       	brcs	.+52     	; 0x1f62 <malloc+0x60>
    1f2e:	84 17       	cp	r24, r20
    1f30:	95 07       	cpc	r25, r21
    1f32:	71 f4       	brne	.+28     	; 0x1f50 <malloc+0x4e>
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	10 97       	sbiw	r26, 0x00	; 0
    1f3a:	29 f0       	breq	.+10     	; 0x1f46 <malloc+0x44>
    1f3c:	13 96       	adiw	r26, 0x03	; 3
    1f3e:	9c 93       	st	X, r25
    1f40:	8e 93       	st	-X, r24
    1f42:	12 97       	sbiw	r26, 0x02	; 2
    1f44:	2c c0       	rjmp	.+88     	; 0x1f9e <malloc+0x9c>
    1f46:	90 93 2d 06 	sts	0x062D, r25
    1f4a:	80 93 2c 06 	sts	0x062C, r24
    1f4e:	27 c0       	rjmp	.+78     	; 0x1f9e <malloc+0x9c>
    1f50:	21 15       	cp	r18, r1
    1f52:	31 05       	cpc	r19, r1
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <malloc+0x5a>
    1f56:	82 17       	cp	r24, r18
    1f58:	93 07       	cpc	r25, r19
    1f5a:	18 f4       	brcc	.+6      	; 0x1f62 <malloc+0x60>
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	bd 01       	movw	r22, r26
    1f60:	ef 01       	movw	r28, r30
    1f62:	92 81       	ldd	r25, Z+2	; 0x02
    1f64:	83 81       	ldd	r24, Z+3	; 0x03
    1f66:	df 01       	movw	r26, r30
    1f68:	e9 2f       	mov	r30, r25
    1f6a:	f8 2f       	mov	r31, r24
    1f6c:	30 97       	sbiw	r30, 0x00	; 0
    1f6e:	d1 f6       	brne	.-76     	; 0x1f24 <malloc+0x22>
    1f70:	21 15       	cp	r18, r1
    1f72:	31 05       	cpc	r19, r1
    1f74:	f9 f0       	breq	.+62     	; 0x1fb4 <malloc+0xb2>
    1f76:	c9 01       	movw	r24, r18
    1f78:	84 1b       	sub	r24, r20
    1f7a:	95 0b       	sbc	r25, r21
    1f7c:	84 30       	cpi	r24, 0x04	; 4
    1f7e:	91 05       	cpc	r25, r1
    1f80:	80 f4       	brcc	.+32     	; 0x1fa2 <malloc+0xa0>
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	61 15       	cp	r22, r1
    1f88:	71 05       	cpc	r23, r1
    1f8a:	21 f0       	breq	.+8      	; 0x1f94 <malloc+0x92>
    1f8c:	fb 01       	movw	r30, r22
    1f8e:	93 83       	std	Z+3, r25	; 0x03
    1f90:	82 83       	std	Z+2, r24	; 0x02
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <malloc+0x9a>
    1f94:	90 93 2d 06 	sts	0x062D, r25
    1f98:	80 93 2c 06 	sts	0x062C, r24
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	32 96       	adiw	r30, 0x02	; 2
    1fa0:	42 c0       	rjmp	.+132    	; 0x2026 <malloc+0x124>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e8 0f       	add	r30, r24
    1fa6:	f9 1f       	adc	r31, r25
    1fa8:	41 93       	st	Z+, r20
    1faa:	51 93       	st	Z+, r21
    1fac:	02 97       	sbiw	r24, 0x02	; 2
    1fae:	99 83       	std	Y+1, r25	; 0x01
    1fb0:	88 83       	st	Y, r24
    1fb2:	39 c0       	rjmp	.+114    	; 0x2026 <malloc+0x124>
    1fb4:	80 91 2a 06 	lds	r24, 0x062A
    1fb8:	90 91 2b 06 	lds	r25, 0x062B
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	41 f4       	brne	.+16     	; 0x1fd0 <malloc+0xce>
    1fc0:	80 91 eb 04 	lds	r24, 0x04EB
    1fc4:	90 91 ec 04 	lds	r25, 0x04EC
    1fc8:	90 93 2b 06 	sts	0x062B, r25
    1fcc:	80 93 2a 06 	sts	0x062A, r24
    1fd0:	20 91 e9 04 	lds	r18, 0x04E9
    1fd4:	30 91 ea 04 	lds	r19, 0x04EA
    1fd8:	21 15       	cp	r18, r1
    1fda:	31 05       	cpc	r19, r1
    1fdc:	41 f4       	brne	.+16     	; 0x1fee <malloc+0xec>
    1fde:	2d b7       	in	r18, 0x3d	; 61
    1fe0:	3e b7       	in	r19, 0x3e	; 62
    1fe2:	80 91 ed 04 	lds	r24, 0x04ED
    1fe6:	90 91 ee 04 	lds	r25, 0x04EE
    1fea:	28 1b       	sub	r18, r24
    1fec:	39 0b       	sbc	r19, r25
    1fee:	e0 91 2a 06 	lds	r30, 0x062A
    1ff2:	f0 91 2b 06 	lds	r31, 0x062B
    1ff6:	e2 17       	cp	r30, r18
    1ff8:	f3 07       	cpc	r31, r19
    1ffa:	98 f4       	brcc	.+38     	; 0x2022 <malloc+0x120>
    1ffc:	2e 1b       	sub	r18, r30
    1ffe:	3f 0b       	sbc	r19, r31
    2000:	24 17       	cp	r18, r20
    2002:	35 07       	cpc	r19, r21
    2004:	70 f0       	brcs	.+28     	; 0x2022 <malloc+0x120>
    2006:	ca 01       	movw	r24, r20
    2008:	02 96       	adiw	r24, 0x02	; 2
    200a:	28 17       	cp	r18, r24
    200c:	39 07       	cpc	r19, r25
    200e:	48 f0       	brcs	.+18     	; 0x2022 <malloc+0x120>
    2010:	8e 0f       	add	r24, r30
    2012:	9f 1f       	adc	r25, r31
    2014:	90 93 2b 06 	sts	0x062B, r25
    2018:	80 93 2a 06 	sts	0x062A, r24
    201c:	41 93       	st	Z+, r20
    201e:	51 93       	st	Z+, r21
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <malloc+0x124>
    2022:	e0 e0       	ldi	r30, 0x00	; 0
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	cf 01       	movw	r24, r30
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	08 95       	ret

0000202e <free>:
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	9c 01       	movw	r18, r24
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	09 f4       	brne	.+2      	; 0x203e <free+0x10>
    203c:	8c c0       	rjmp	.+280    	; 0x2156 <free+0x128>
    203e:	dc 01       	movw	r26, r24
    2040:	12 97       	sbiw	r26, 0x02	; 2
    2042:	13 96       	adiw	r26, 0x03	; 3
    2044:	1c 92       	st	X, r1
    2046:	1e 92       	st	-X, r1
    2048:	12 97       	sbiw	r26, 0x02	; 2
    204a:	60 91 2c 06 	lds	r22, 0x062C
    204e:	70 91 2d 06 	lds	r23, 0x062D
    2052:	61 15       	cp	r22, r1
    2054:	71 05       	cpc	r23, r1
    2056:	89 f4       	brne	.+34     	; 0x207a <free+0x4c>
    2058:	8d 91       	ld	r24, X+
    205a:	9c 91       	ld	r25, X
    205c:	11 97       	sbiw	r26, 0x01	; 1
    205e:	82 0f       	add	r24, r18
    2060:	93 1f       	adc	r25, r19
    2062:	20 91 2a 06 	lds	r18, 0x062A
    2066:	30 91 2b 06 	lds	r19, 0x062B
    206a:	28 17       	cp	r18, r24
    206c:	39 07       	cpc	r19, r25
    206e:	69 f5       	brne	.+90     	; 0x20ca <free+0x9c>
    2070:	b0 93 2b 06 	sts	0x062B, r27
    2074:	a0 93 2a 06 	sts	0x062A, r26
    2078:	6e c0       	rjmp	.+220    	; 0x2156 <free+0x128>
    207a:	fb 01       	movw	r30, r22
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <free+0x56>
    2082:	fc 01       	movw	r30, r24
    2084:	ea 17       	cp	r30, r26
    2086:	fb 07       	cpc	r31, r27
    2088:	30 f4       	brcc	.+12     	; 0x2096 <free+0x68>
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	af 01       	movw	r20, r30
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	b9 f7       	brne	.-18     	; 0x2082 <free+0x54>
    2094:	1f c0       	rjmp	.+62     	; 0x20d4 <free+0xa6>
    2096:	e9 01       	movw	r28, r18
    2098:	22 97       	sbiw	r28, 0x02	; 2
    209a:	fb 83       	std	Y+3, r31	; 0x03
    209c:	ea 83       	std	Y+2, r30	; 0x02
    209e:	08 81       	ld	r16, Y
    20a0:	19 81       	ldd	r17, Y+1	; 0x01
    20a2:	c9 01       	movw	r24, r18
    20a4:	80 0f       	add	r24, r16
    20a6:	91 1f       	adc	r25, r17
    20a8:	8e 17       	cp	r24, r30
    20aa:	9f 07       	cpc	r25, r31
    20ac:	59 f4       	brne	.+22     	; 0x20c4 <free+0x96>
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	80 0f       	add	r24, r16
    20b4:	91 1f       	adc	r25, r17
    20b6:	02 96       	adiw	r24, 0x02	; 2
    20b8:	99 83       	std	Y+1, r25	; 0x01
    20ba:	88 83       	st	Y, r24
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	9b 83       	std	Y+3, r25	; 0x03
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	41 15       	cp	r20, r1
    20c6:	51 05       	cpc	r21, r1
    20c8:	29 f4       	brne	.+10     	; 0x20d4 <free+0xa6>
    20ca:	b0 93 2d 06 	sts	0x062D, r27
    20ce:	a0 93 2c 06 	sts	0x062C, r26
    20d2:	41 c0       	rjmp	.+130    	; 0x2156 <free+0x128>
    20d4:	fa 01       	movw	r30, r20
    20d6:	b3 83       	std	Z+3, r27	; 0x03
    20d8:	a2 83       	std	Z+2, r26	; 0x02
    20da:	c1 91       	ld	r28, Z+
    20dc:	d1 91       	ld	r29, Z+
    20de:	ec 0f       	add	r30, r28
    20e0:	fd 1f       	adc	r31, r29
    20e2:	ae 17       	cp	r26, r30
    20e4:	bf 07       	cpc	r27, r31
    20e6:	81 f4       	brne	.+32     	; 0x2108 <free+0xda>
    20e8:	f9 01       	movw	r30, r18
    20ea:	92 91       	ld	r25, -Z
    20ec:	82 91       	ld	r24, -Z
    20ee:	8c 0f       	add	r24, r28
    20f0:	9d 1f       	adc	r25, r29
    20f2:	02 96       	adiw	r24, 0x02	; 2
    20f4:	da 01       	movw	r26, r20
    20f6:	11 96       	adiw	r26, 0x01	; 1
    20f8:	9c 93       	st	X, r25
    20fa:	8e 93       	st	-X, r24
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	13 96       	adiw	r26, 0x03	; 3
    2102:	9c 93       	st	X, r25
    2104:	8e 93       	st	-X, r24
    2106:	12 97       	sbiw	r26, 0x02	; 2
    2108:	e0 e0       	ldi	r30, 0x00	; 0
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <free+0xe4>
    210e:	fb 01       	movw	r30, r22
    2110:	bc 01       	movw	r22, r24
    2112:	db 01       	movw	r26, r22
    2114:	12 96       	adiw	r26, 0x02	; 2
    2116:	8d 91       	ld	r24, X+
    2118:	9c 91       	ld	r25, X
    211a:	13 97       	sbiw	r26, 0x03	; 3
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	b9 f7       	brne	.-18     	; 0x210e <free+0xe0>
    2120:	cb 01       	movw	r24, r22
    2122:	02 96       	adiw	r24, 0x02	; 2
    2124:	2d 91       	ld	r18, X+
    2126:	3c 91       	ld	r19, X
    2128:	11 97       	sbiw	r26, 0x01	; 1
    212a:	82 0f       	add	r24, r18
    212c:	93 1f       	adc	r25, r19
    212e:	20 91 2a 06 	lds	r18, 0x062A
    2132:	30 91 2b 06 	lds	r19, 0x062B
    2136:	28 17       	cp	r18, r24
    2138:	39 07       	cpc	r19, r25
    213a:	69 f4       	brne	.+26     	; 0x2156 <free+0x128>
    213c:	30 97       	sbiw	r30, 0x00	; 0
    213e:	29 f4       	brne	.+10     	; 0x214a <free+0x11c>
    2140:	10 92 2d 06 	sts	0x062D, r1
    2144:	10 92 2c 06 	sts	0x062C, r1
    2148:	02 c0       	rjmp	.+4      	; 0x214e <free+0x120>
    214a:	13 82       	std	Z+3, r1	; 0x03
    214c:	12 82       	std	Z+2, r1	; 0x02
    214e:	70 93 2b 06 	sts	0x062B, r23
    2152:	60 93 2a 06 	sts	0x062A, r22
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	08 95       	ret

00002160 <atoi>:
    2160:	fc 01       	movw	r30, r24
    2162:	88 27       	eor	r24, r24
    2164:	99 27       	eor	r25, r25
    2166:	e8 94       	clt
    2168:	21 91       	ld	r18, Z+
    216a:	20 32       	cpi	r18, 0x20	; 32
    216c:	e9 f3       	breq	.-6      	; 0x2168 <atoi+0x8>
    216e:	29 30       	cpi	r18, 0x09	; 9
    2170:	10 f0       	brcs	.+4      	; 0x2176 <atoi+0x16>
    2172:	2e 30       	cpi	r18, 0x0E	; 14
    2174:	c8 f3       	brcs	.-14     	; 0x2168 <atoi+0x8>
    2176:	2b 32       	cpi	r18, 0x2B	; 43
    2178:	41 f0       	breq	.+16     	; 0x218a <atoi+0x2a>
    217a:	2d 32       	cpi	r18, 0x2D	; 45
    217c:	39 f4       	brne	.+14     	; 0x218c <atoi+0x2c>
    217e:	68 94       	set
    2180:	04 c0       	rjmp	.+8      	; 0x218a <atoi+0x2a>
    2182:	0e 94 0a 11 	call	0x2214	; 0x2214 <__mulhi_const_10>
    2186:	82 0f       	add	r24, r18
    2188:	91 1d       	adc	r25, r1
    218a:	21 91       	ld	r18, Z+
    218c:	20 53       	subi	r18, 0x30	; 48
    218e:	2a 30       	cpi	r18, 0x0A	; 10
    2190:	c0 f3       	brcs	.-16     	; 0x2182 <atoi+0x22>
    2192:	1e f4       	brtc	.+6      	; 0x219a <atoi+0x3a>
    2194:	90 95       	com	r25
    2196:	81 95       	neg	r24
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	08 95       	ret

0000219c <strtok>:
    219c:	4b ef       	ldi	r20, 0xFB	; 251
    219e:	54 e0       	ldi	r21, 0x04	; 4
    21a0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <strtok_r>
    21a4:	08 95       	ret

000021a6 <strcmp>:
    21a6:	fb 01       	movw	r30, r22
    21a8:	dc 01       	movw	r26, r24
    21aa:	8d 91       	ld	r24, X+
    21ac:	01 90       	ld	r0, Z+
    21ae:	80 19       	sub	r24, r0
    21b0:	01 10       	cpse	r0, r1
    21b2:	d9 f3       	breq	.-10     	; 0x21aa <strcmp+0x4>
    21b4:	99 0b       	sbc	r25, r25
    21b6:	08 95       	ret

000021b8 <strcpy>:
    21b8:	fb 01       	movw	r30, r22
    21ba:	dc 01       	movw	r26, r24
    21bc:	01 90       	ld	r0, Z+
    21be:	0d 92       	st	X+, r0
    21c0:	00 20       	and	r0, r0
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <strcpy+0x4>
    21c4:	08 95       	ret

000021c6 <strtok_r>:
    21c6:	fa 01       	movw	r30, r20
    21c8:	a1 91       	ld	r26, Z+
    21ca:	b0 81       	ld	r27, Z
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	19 f4       	brne	.+6      	; 0x21d6 <strtok_r+0x10>
    21d0:	10 97       	sbiw	r26, 0x00	; 0
    21d2:	e1 f0       	breq	.+56     	; 0x220c <__stack+0xd>
    21d4:	cd 01       	movw	r24, r26
    21d6:	dc 01       	movw	r26, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0d 90       	ld	r0, X+
    21dc:	00 20       	and	r0, r0
    21de:	11 f4       	brne	.+4      	; 0x21e4 <strtok_r+0x1e>
    21e0:	c0 01       	movw	r24, r0
    21e2:	13 c0       	rjmp	.+38     	; 0x220a <__stack+0xb>
    21e4:	fb 01       	movw	r30, r22
    21e6:	21 91       	ld	r18, Z+
    21e8:	22 23       	and	r18, r18
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <strtok_r+0x2c>
    21ec:	20 15       	cp	r18, r0
    21ee:	d9 f7       	brne	.-10     	; 0x21e6 <strtok_r+0x20>
    21f0:	f3 cf       	rjmp	.-26     	; 0x21d8 <strtok_r+0x12>
    21f2:	fb 01       	movw	r30, r22
    21f4:	21 91       	ld	r18, Z+
    21f6:	20 15       	cp	r18, r0
    21f8:	19 f4       	brne	.+6      	; 0x2200 <__stack+0x1>
    21fa:	1e 92       	st	-X, r1
    21fc:	11 96       	adiw	r26, 0x01	; 1
    21fe:	06 c0       	rjmp	.+12     	; 0x220c <__stack+0xd>
    2200:	22 23       	and	r18, r18
    2202:	c1 f7       	brne	.-16     	; 0x21f4 <strtok_r+0x2e>
    2204:	0d 90       	ld	r0, X+
    2206:	00 20       	and	r0, r0
    2208:	a1 f7       	brne	.-24     	; 0x21f2 <strtok_r+0x2c>
    220a:	d0 01       	movw	r26, r0
    220c:	fa 01       	movw	r30, r20
    220e:	a1 93       	st	Z+, r26
    2210:	b0 83       	st	Z, r27
    2212:	08 95       	ret

00002214 <__mulhi_const_10>:
    2214:	7a e0       	ldi	r23, 0x0A	; 10
    2216:	97 9f       	mul	r25, r23
    2218:	90 2d       	mov	r25, r0
    221a:	87 9f       	mul	r24, r23
    221c:	80 2d       	mov	r24, r0
    221e:	91 0d       	add	r25, r1
    2220:	11 24       	eor	r1, r1
    2222:	08 95       	ret

00002224 <fgets>:
    2224:	cf 92       	push	r12
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	ff 92       	push	r15
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	8c 01       	movw	r16, r24
    2236:	6a 01       	movw	r12, r20
    2238:	fa 01       	movw	r30, r20
    223a:	83 81       	ldd	r24, Z+3	; 0x03
    223c:	80 ff       	sbrs	r24, 0
    223e:	1a c0       	rjmp	.+52     	; 0x2274 <fgets+0x50>
    2240:	16 16       	cp	r1, r22
    2242:	17 06       	cpc	r1, r23
    2244:	bc f4       	brge	.+46     	; 0x2274 <fgets+0x50>
    2246:	7b 01       	movw	r14, r22
    2248:	e8 01       	movw	r28, r16
    224a:	0e c0       	rjmp	.+28     	; 0x2268 <fgets+0x44>
    224c:	c6 01       	movw	r24, r12
    224e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <fgetc>
    2252:	ff ef       	ldi	r31, 0xFF	; 255
    2254:	8f 3f       	cpi	r24, 0xFF	; 255
    2256:	9f 07       	cpc	r25, r31
    2258:	69 f0       	breq	.+26     	; 0x2274 <fgets+0x50>
    225a:	89 93       	st	Y+, r24
    225c:	08 94       	sec
    225e:	e1 08       	sbc	r14, r1
    2260:	f1 08       	sbc	r15, r1
    2262:	8a 30       	cpi	r24, 0x0A	; 10
    2264:	91 05       	cpc	r25, r1
    2266:	21 f0       	breq	.+8      	; 0x2270 <fgets+0x4c>
    2268:	21 e0       	ldi	r18, 0x01	; 1
    226a:	e2 16       	cp	r14, r18
    226c:	f1 04       	cpc	r15, r1
    226e:	71 f7       	brne	.-36     	; 0x224c <fgets+0x28>
    2270:	18 82       	st	Y, r1
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <fgets+0x54>
    2274:	00 e0       	ldi	r16, 0x00	; 0
    2276:	10 e0       	ldi	r17, 0x00	; 0
    2278:	c8 01       	movw	r24, r16
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	1f 91       	pop	r17
    2280:	0f 91       	pop	r16
    2282:	ff 90       	pop	r15
    2284:	ef 90       	pop	r14
    2286:	df 90       	pop	r13
    2288:	cf 90       	pop	r12
    228a:	08 95       	ret

0000228c <gets>:
    228c:	0f 93       	push	r16
    228e:	1f 93       	push	r17
    2290:	cf 93       	push	r28
    2292:	df 93       	push	r29
    2294:	8c 01       	movw	r16, r24
    2296:	e0 91 2e 06 	lds	r30, 0x062E
    229a:	f0 91 2f 06 	lds	r31, 0x062F
    229e:	83 81       	ldd	r24, Z+3	; 0x03
    22a0:	80 ff       	sbrs	r24, 0
    22a2:	12 c0       	rjmp	.+36     	; 0x22c8 <gets+0x3c>
    22a4:	e8 01       	movw	r28, r16
    22a6:	80 91 2e 06 	lds	r24, 0x062E
    22aa:	90 91 2f 06 	lds	r25, 0x062F
    22ae:	0e 94 ff 13 	call	0x27fe	; 0x27fe <fgetc>
    22b2:	2f ef       	ldi	r18, 0xFF	; 255
    22b4:	8f 3f       	cpi	r24, 0xFF	; 255
    22b6:	92 07       	cpc	r25, r18
    22b8:	39 f0       	breq	.+14     	; 0x22c8 <gets+0x3c>
    22ba:	89 93       	st	Y+, r24
    22bc:	8a 30       	cpi	r24, 0x0A	; 10
    22be:	91 05       	cpc	r25, r1
    22c0:	91 f7       	brne	.-28     	; 0x22a6 <gets+0x1a>
    22c2:	21 97       	sbiw	r28, 0x01	; 1
    22c4:	18 82       	st	Y, r1
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <gets+0x40>
    22c8:	00 e0       	ldi	r16, 0x00	; 0
    22ca:	10 e0       	ldi	r17, 0x00	; 0
    22cc:	c8 01       	movw	r24, r16
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <printf>:
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	fe 01       	movw	r30, r28
    22e2:	36 96       	adiw	r30, 0x06	; 6
    22e4:	61 91       	ld	r22, Z+
    22e6:	71 91       	ld	r23, Z+
    22e8:	80 91 30 06 	lds	r24, 0x0630
    22ec:	90 91 31 06 	lds	r25, 0x0631
    22f0:	af 01       	movw	r20, r30
    22f2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <vfprintf>
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <putchar>:
    22fc:	60 91 30 06 	lds	r22, 0x0630
    2300:	70 91 31 06 	lds	r23, 0x0631
    2304:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    2308:	08 95       	ret

0000230a <puts>:
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	8c 01       	movw	r16, r24
    2314:	e0 91 30 06 	lds	r30, 0x0630
    2318:	f0 91 31 06 	lds	r31, 0x0631
    231c:	83 81       	ldd	r24, Z+3	; 0x03
    231e:	81 ff       	sbrs	r24, 1
    2320:	1a c0       	rjmp	.+52     	; 0x2356 <puts+0x4c>
    2322:	c0 e0       	ldi	r28, 0x00	; 0
    2324:	d0 e0       	ldi	r29, 0x00	; 0
    2326:	05 c0       	rjmp	.+10     	; 0x2332 <puts+0x28>
    2328:	19 95       	eicall
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	11 f0       	breq	.+4      	; 0x2332 <puts+0x28>
    232e:	cf ef       	ldi	r28, 0xFF	; 255
    2330:	df ef       	ldi	r29, 0xFF	; 255
    2332:	f8 01       	movw	r30, r16
    2334:	81 91       	ld	r24, Z+
    2336:	8f 01       	movw	r16, r30
    2338:	60 91 30 06 	lds	r22, 0x0630
    233c:	70 91 31 06 	lds	r23, 0x0631
    2340:	db 01       	movw	r26, r22
    2342:	18 96       	adiw	r26, 0x08	; 8
    2344:	ed 91       	ld	r30, X+
    2346:	fc 91       	ld	r31, X
    2348:	19 97       	sbiw	r26, 0x09	; 9
    234a:	88 23       	and	r24, r24
    234c:	69 f7       	brne	.-38     	; 0x2328 <puts+0x1e>
    234e:	8a e0       	ldi	r24, 0x0A	; 10
    2350:	19 95       	eicall
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	11 f0       	breq	.+4      	; 0x235a <puts+0x50>
    2356:	cf ef       	ldi	r28, 0xFF	; 255
    2358:	df ef       	ldi	r29, 0xFF	; 255
    235a:	ce 01       	movw	r24, r28
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <sprintf>:
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	2e 97       	sbiw	r28, 0x0e	; 14
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	0e 89       	ldd	r16, Y+22	; 0x16
    2380:	1f 89       	ldd	r17, Y+23	; 0x17
    2382:	86 e0       	ldi	r24, 0x06	; 6
    2384:	8c 83       	std	Y+4, r24	; 0x04
    2386:	1a 83       	std	Y+2, r17	; 0x02
    2388:	09 83       	std	Y+1, r16	; 0x01
    238a:	8f ef       	ldi	r24, 0xFF	; 255
    238c:	9f e7       	ldi	r25, 0x7F	; 127
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	ae 01       	movw	r20, r28
    2394:	46 5e       	subi	r20, 0xE6	; 230
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
    2398:	ce 01       	movw	r24, r28
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	68 8d       	ldd	r22, Y+24	; 0x18
    239e:	79 8d       	ldd	r23, Y+25	; 0x19
    23a0:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <vfprintf>
    23a4:	ef 81       	ldd	r30, Y+7	; 0x07
    23a6:	f8 85       	ldd	r31, Y+8	; 0x08
    23a8:	e0 0f       	add	r30, r16
    23aa:	f1 1f       	adc	r31, r17
    23ac:	10 82       	st	Z, r1
    23ae:	2e 96       	adiw	r28, 0x0e	; 14
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	08 95       	ret

000023c4 <vfprintf>:
    23c4:	2f 92       	push	r2
    23c6:	3f 92       	push	r3
    23c8:	4f 92       	push	r4
    23ca:	5f 92       	push	r5
    23cc:	6f 92       	push	r6
    23ce:	7f 92       	push	r7
    23d0:	8f 92       	push	r8
    23d2:	9f 92       	push	r9
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	cf 92       	push	r12
    23da:	df 92       	push	r13
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	2d 97       	sbiw	r28, 0x0d	; 13
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	3c 01       	movw	r6, r24
    23fa:	7d 87       	std	Y+13, r23	; 0x0d
    23fc:	6c 87       	std	Y+12, r22	; 0x0c
    23fe:	5a 01       	movw	r10, r20
    2400:	fc 01       	movw	r30, r24
    2402:	17 82       	std	Z+7, r1	; 0x07
    2404:	16 82       	std	Z+6, r1	; 0x06
    2406:	83 81       	ldd	r24, Z+3	; 0x03
    2408:	81 ff       	sbrs	r24, 1
    240a:	c8 c1       	rjmp	.+912    	; 0x279c <vfprintf+0x3d8>
    240c:	2e 01       	movw	r4, r28
    240e:	08 94       	sec
    2410:	41 1c       	adc	r4, r1
    2412:	51 1c       	adc	r5, r1
    2414:	f3 01       	movw	r30, r6
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	ec 85       	ldd	r30, Y+12	; 0x0c
    241a:	fd 85       	ldd	r31, Y+13	; 0x0d
    241c:	93 fd       	sbrc	r25, 3
    241e:	85 91       	lpm	r24, Z+
    2420:	93 ff       	sbrs	r25, 3
    2422:	81 91       	ld	r24, Z+
    2424:	fd 87       	std	Y+13, r31	; 0x0d
    2426:	ec 87       	std	Y+12, r30	; 0x0c
    2428:	88 23       	and	r24, r24
    242a:	09 f4       	brne	.+2      	; 0x242e <vfprintf+0x6a>
    242c:	b3 c1       	rjmp	.+870    	; 0x2794 <vfprintf+0x3d0>
    242e:	85 32       	cpi	r24, 0x25	; 37
    2430:	41 f4       	brne	.+16     	; 0x2442 <vfprintf+0x7e>
    2432:	93 fd       	sbrc	r25, 3
    2434:	85 91       	lpm	r24, Z+
    2436:	93 ff       	sbrs	r25, 3
    2438:	81 91       	ld	r24, Z+
    243a:	fd 87       	std	Y+13, r31	; 0x0d
    243c:	ec 87       	std	Y+12, r30	; 0x0c
    243e:	85 32       	cpi	r24, 0x25	; 37
    2440:	29 f4       	brne	.+10     	; 0x244c <vfprintf+0x88>
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	b3 01       	movw	r22, r6
    2446:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    244a:	e4 cf       	rjmp	.-56     	; 0x2414 <vfprintf+0x50>
    244c:	ff 24       	eor	r15, r15
    244e:	ee 24       	eor	r14, r14
    2450:	10 e0       	ldi	r17, 0x00	; 0
    2452:	10 32       	cpi	r17, 0x20	; 32
    2454:	b0 f4       	brcc	.+44     	; 0x2482 <vfprintf+0xbe>
    2456:	8b 32       	cpi	r24, 0x2B	; 43
    2458:	69 f0       	breq	.+26     	; 0x2474 <vfprintf+0xb0>
    245a:	8c 32       	cpi	r24, 0x2C	; 44
    245c:	28 f4       	brcc	.+10     	; 0x2468 <vfprintf+0xa4>
    245e:	80 32       	cpi	r24, 0x20	; 32
    2460:	51 f0       	breq	.+20     	; 0x2476 <vfprintf+0xb2>
    2462:	83 32       	cpi	r24, 0x23	; 35
    2464:	71 f4       	brne	.+28     	; 0x2482 <vfprintf+0xbe>
    2466:	0b c0       	rjmp	.+22     	; 0x247e <vfprintf+0xba>
    2468:	8d 32       	cpi	r24, 0x2D	; 45
    246a:	39 f0       	breq	.+14     	; 0x247a <vfprintf+0xb6>
    246c:	80 33       	cpi	r24, 0x30	; 48
    246e:	49 f4       	brne	.+18     	; 0x2482 <vfprintf+0xbe>
    2470:	11 60       	ori	r17, 0x01	; 1
    2472:	2c c0       	rjmp	.+88     	; 0x24cc <vfprintf+0x108>
    2474:	12 60       	ori	r17, 0x02	; 2
    2476:	14 60       	ori	r17, 0x04	; 4
    2478:	29 c0       	rjmp	.+82     	; 0x24cc <vfprintf+0x108>
    247a:	18 60       	ori	r17, 0x08	; 8
    247c:	27 c0       	rjmp	.+78     	; 0x24cc <vfprintf+0x108>
    247e:	10 61       	ori	r17, 0x10	; 16
    2480:	25 c0       	rjmp	.+74     	; 0x24cc <vfprintf+0x108>
    2482:	17 fd       	sbrc	r17, 7
    2484:	2e c0       	rjmp	.+92     	; 0x24e2 <vfprintf+0x11e>
    2486:	28 2f       	mov	r18, r24
    2488:	20 53       	subi	r18, 0x30	; 48
    248a:	2a 30       	cpi	r18, 0x0A	; 10
    248c:	98 f4       	brcc	.+38     	; 0x24b4 <vfprintf+0xf0>
    248e:	16 ff       	sbrs	r17, 6
    2490:	08 c0       	rjmp	.+16     	; 0x24a2 <vfprintf+0xde>
    2492:	8f 2d       	mov	r24, r15
    2494:	88 0f       	add	r24, r24
    2496:	f8 2e       	mov	r15, r24
    2498:	ff 0c       	add	r15, r15
    249a:	ff 0c       	add	r15, r15
    249c:	f8 0e       	add	r15, r24
    249e:	f2 0e       	add	r15, r18
    24a0:	15 c0       	rjmp	.+42     	; 0x24cc <vfprintf+0x108>
    24a2:	8e 2d       	mov	r24, r14
    24a4:	88 0f       	add	r24, r24
    24a6:	e8 2e       	mov	r14, r24
    24a8:	ee 0c       	add	r14, r14
    24aa:	ee 0c       	add	r14, r14
    24ac:	e8 0e       	add	r14, r24
    24ae:	e2 0e       	add	r14, r18
    24b0:	10 62       	ori	r17, 0x20	; 32
    24b2:	0c c0       	rjmp	.+24     	; 0x24cc <vfprintf+0x108>
    24b4:	8e 32       	cpi	r24, 0x2E	; 46
    24b6:	21 f4       	brne	.+8      	; 0x24c0 <vfprintf+0xfc>
    24b8:	16 fd       	sbrc	r17, 6
    24ba:	6c c1       	rjmp	.+728    	; 0x2794 <vfprintf+0x3d0>
    24bc:	10 64       	ori	r17, 0x40	; 64
    24be:	06 c0       	rjmp	.+12     	; 0x24cc <vfprintf+0x108>
    24c0:	8c 36       	cpi	r24, 0x6C	; 108
    24c2:	11 f4       	brne	.+4      	; 0x24c8 <vfprintf+0x104>
    24c4:	10 68       	ori	r17, 0x80	; 128
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <vfprintf+0x108>
    24c8:	88 36       	cpi	r24, 0x68	; 104
    24ca:	59 f4       	brne	.+22     	; 0x24e2 <vfprintf+0x11e>
    24cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    24ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    24d0:	93 fd       	sbrc	r25, 3
    24d2:	85 91       	lpm	r24, Z+
    24d4:	93 ff       	sbrs	r25, 3
    24d6:	81 91       	ld	r24, Z+
    24d8:	fd 87       	std	Y+13, r31	; 0x0d
    24da:	ec 87       	std	Y+12, r30	; 0x0c
    24dc:	88 23       	and	r24, r24
    24de:	09 f0       	breq	.+2      	; 0x24e2 <vfprintf+0x11e>
    24e0:	b8 cf       	rjmp	.-144    	; 0x2452 <vfprintf+0x8e>
    24e2:	98 2f       	mov	r25, r24
    24e4:	95 54       	subi	r25, 0x45	; 69
    24e6:	93 30       	cpi	r25, 0x03	; 3
    24e8:	18 f0       	brcs	.+6      	; 0x24f0 <vfprintf+0x12c>
    24ea:	90 52       	subi	r25, 0x20	; 32
    24ec:	93 30       	cpi	r25, 0x03	; 3
    24ee:	38 f4       	brcc	.+14     	; 0x24fe <vfprintf+0x13a>
    24f0:	24 e0       	ldi	r18, 0x04	; 4
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	a2 0e       	add	r10, r18
    24f6:	b3 1e       	adc	r11, r19
    24f8:	3f e3       	ldi	r19, 0x3F	; 63
    24fa:	39 83       	std	Y+1, r19	; 0x01
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <vfprintf+0x158>
    24fe:	83 36       	cpi	r24, 0x63	; 99
    2500:	31 f0       	breq	.+12     	; 0x250e <vfprintf+0x14a>
    2502:	83 37       	cpi	r24, 0x73	; 115
    2504:	81 f0       	breq	.+32     	; 0x2526 <vfprintf+0x162>
    2506:	83 35       	cpi	r24, 0x53	; 83
    2508:	09 f0       	breq	.+2      	; 0x250c <vfprintf+0x148>
    250a:	5a c0       	rjmp	.+180    	; 0x25c0 <vfprintf+0x1fc>
    250c:	22 c0       	rjmp	.+68     	; 0x2552 <vfprintf+0x18e>
    250e:	f5 01       	movw	r30, r10
    2510:	80 81       	ld	r24, Z
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	22 e0       	ldi	r18, 0x02	; 2
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	a2 0e       	add	r10, r18
    251a:	b3 1e       	adc	r11, r19
    251c:	21 e0       	ldi	r18, 0x01	; 1
    251e:	c2 2e       	mov	r12, r18
    2520:	d1 2c       	mov	r13, r1
    2522:	42 01       	movw	r8, r4
    2524:	14 c0       	rjmp	.+40     	; 0x254e <vfprintf+0x18a>
    2526:	92 e0       	ldi	r25, 0x02	; 2
    2528:	29 2e       	mov	r2, r25
    252a:	31 2c       	mov	r3, r1
    252c:	2a 0c       	add	r2, r10
    252e:	3b 1c       	adc	r3, r11
    2530:	f5 01       	movw	r30, r10
    2532:	80 80       	ld	r8, Z
    2534:	91 80       	ldd	r9, Z+1	; 0x01
    2536:	16 ff       	sbrs	r17, 6
    2538:	03 c0       	rjmp	.+6      	; 0x2540 <vfprintf+0x17c>
    253a:	6f 2d       	mov	r22, r15
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <vfprintf+0x180>
    2540:	6f ef       	ldi	r22, 0xFF	; 255
    2542:	7f ef       	ldi	r23, 0xFF	; 255
    2544:	c4 01       	movw	r24, r8
    2546:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <strnlen>
    254a:	6c 01       	movw	r12, r24
    254c:	51 01       	movw	r10, r2
    254e:	1f 77       	andi	r17, 0x7F	; 127
    2550:	15 c0       	rjmp	.+42     	; 0x257c <vfprintf+0x1b8>
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	28 2e       	mov	r2, r24
    2556:	31 2c       	mov	r3, r1
    2558:	2a 0c       	add	r2, r10
    255a:	3b 1c       	adc	r3, r11
    255c:	f5 01       	movw	r30, r10
    255e:	80 80       	ld	r8, Z
    2560:	91 80       	ldd	r9, Z+1	; 0x01
    2562:	16 ff       	sbrs	r17, 6
    2564:	03 c0       	rjmp	.+6      	; 0x256c <vfprintf+0x1a8>
    2566:	6f 2d       	mov	r22, r15
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <vfprintf+0x1ac>
    256c:	6f ef       	ldi	r22, 0xFF	; 255
    256e:	7f ef       	ldi	r23, 0xFF	; 255
    2570:	c4 01       	movw	r24, r8
    2572:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <strnlen_P>
    2576:	6c 01       	movw	r12, r24
    2578:	10 68       	ori	r17, 0x80	; 128
    257a:	51 01       	movw	r10, r2
    257c:	13 fd       	sbrc	r17, 3
    257e:	1c c0       	rjmp	.+56     	; 0x25b8 <vfprintf+0x1f4>
    2580:	06 c0       	rjmp	.+12     	; 0x258e <vfprintf+0x1ca>
    2582:	80 e2       	ldi	r24, 0x20	; 32
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	b3 01       	movw	r22, r6
    2588:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    258c:	ea 94       	dec	r14
    258e:	8e 2d       	mov	r24, r14
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	c8 16       	cp	r12, r24
    2594:	d9 06       	cpc	r13, r25
    2596:	a8 f3       	brcs	.-22     	; 0x2582 <vfprintf+0x1be>
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <vfprintf+0x1f4>
    259a:	f4 01       	movw	r30, r8
    259c:	17 fd       	sbrc	r17, 7
    259e:	85 91       	lpm	r24, Z+
    25a0:	17 ff       	sbrs	r17, 7
    25a2:	81 91       	ld	r24, Z+
    25a4:	4f 01       	movw	r8, r30
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	b3 01       	movw	r22, r6
    25aa:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    25ae:	e1 10       	cpse	r14, r1
    25b0:	ea 94       	dec	r14
    25b2:	08 94       	sec
    25b4:	c1 08       	sbc	r12, r1
    25b6:	d1 08       	sbc	r13, r1
    25b8:	c1 14       	cp	r12, r1
    25ba:	d1 04       	cpc	r13, r1
    25bc:	71 f7       	brne	.-36     	; 0x259a <vfprintf+0x1d6>
    25be:	e7 c0       	rjmp	.+462    	; 0x278e <vfprintf+0x3ca>
    25c0:	84 36       	cpi	r24, 0x64	; 100
    25c2:	11 f0       	breq	.+4      	; 0x25c8 <vfprintf+0x204>
    25c4:	89 36       	cpi	r24, 0x69	; 105
    25c6:	51 f5       	brne	.+84     	; 0x261c <vfprintf+0x258>
    25c8:	f5 01       	movw	r30, r10
    25ca:	17 ff       	sbrs	r17, 7
    25cc:	07 c0       	rjmp	.+14     	; 0x25dc <vfprintf+0x218>
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	a2 81       	ldd	r26, Z+2	; 0x02
    25d4:	b3 81       	ldd	r27, Z+3	; 0x03
    25d6:	24 e0       	ldi	r18, 0x04	; 4
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	08 c0       	rjmp	.+16     	; 0x25ec <vfprintf+0x228>
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	aa 27       	eor	r26, r26
    25e2:	97 fd       	sbrc	r25, 7
    25e4:	a0 95       	com	r26
    25e6:	ba 2f       	mov	r27, r26
    25e8:	22 e0       	ldi	r18, 0x02	; 2
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	a2 0e       	add	r10, r18
    25ee:	b3 1e       	adc	r11, r19
    25f0:	01 2f       	mov	r16, r17
    25f2:	0f 76       	andi	r16, 0x6F	; 111
    25f4:	b7 ff       	sbrs	r27, 7
    25f6:	08 c0       	rjmp	.+16     	; 0x2608 <vfprintf+0x244>
    25f8:	b0 95       	com	r27
    25fa:	a0 95       	com	r26
    25fc:	90 95       	com	r25
    25fe:	81 95       	neg	r24
    2600:	9f 4f       	sbci	r25, 0xFF	; 255
    2602:	af 4f       	sbci	r26, 0xFF	; 255
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	00 68       	ori	r16, 0x80	; 128
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	a2 01       	movw	r20, r4
    260e:	2a e0       	ldi	r18, 0x0A	; 10
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__ultoa_invert>
    2616:	d8 2e       	mov	r13, r24
    2618:	d4 18       	sub	r13, r4
    261a:	3f c0       	rjmp	.+126    	; 0x269a <vfprintf+0x2d6>
    261c:	85 37       	cpi	r24, 0x75	; 117
    261e:	21 f4       	brne	.+8      	; 0x2628 <vfprintf+0x264>
    2620:	1f 7e       	andi	r17, 0xEF	; 239
    2622:	2a e0       	ldi	r18, 0x0A	; 10
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	20 c0       	rjmp	.+64     	; 0x2668 <vfprintf+0x2a4>
    2628:	19 7f       	andi	r17, 0xF9	; 249
    262a:	8f 36       	cpi	r24, 0x6F	; 111
    262c:	a9 f0       	breq	.+42     	; 0x2658 <vfprintf+0x294>
    262e:	80 37       	cpi	r24, 0x70	; 112
    2630:	20 f4       	brcc	.+8      	; 0x263a <vfprintf+0x276>
    2632:	88 35       	cpi	r24, 0x58	; 88
    2634:	09 f0       	breq	.+2      	; 0x2638 <vfprintf+0x274>
    2636:	ae c0       	rjmp	.+348    	; 0x2794 <vfprintf+0x3d0>
    2638:	0b c0       	rjmp	.+22     	; 0x2650 <vfprintf+0x28c>
    263a:	80 37       	cpi	r24, 0x70	; 112
    263c:	21 f0       	breq	.+8      	; 0x2646 <vfprintf+0x282>
    263e:	88 37       	cpi	r24, 0x78	; 120
    2640:	09 f0       	breq	.+2      	; 0x2644 <vfprintf+0x280>
    2642:	a8 c0       	rjmp	.+336    	; 0x2794 <vfprintf+0x3d0>
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <vfprintf+0x284>
    2646:	10 61       	ori	r17, 0x10	; 16
    2648:	14 ff       	sbrs	r17, 4
    264a:	09 c0       	rjmp	.+18     	; 0x265e <vfprintf+0x29a>
    264c:	14 60       	ori	r17, 0x04	; 4
    264e:	07 c0       	rjmp	.+14     	; 0x265e <vfprintf+0x29a>
    2650:	14 ff       	sbrs	r17, 4
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <vfprintf+0x2a0>
    2654:	16 60       	ori	r17, 0x06	; 6
    2656:	06 c0       	rjmp	.+12     	; 0x2664 <vfprintf+0x2a0>
    2658:	28 e0       	ldi	r18, 0x08	; 8
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	05 c0       	rjmp	.+10     	; 0x2668 <vfprintf+0x2a4>
    265e:	20 e1       	ldi	r18, 0x10	; 16
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <vfprintf+0x2a4>
    2664:	20 e1       	ldi	r18, 0x10	; 16
    2666:	32 e0       	ldi	r19, 0x02	; 2
    2668:	f5 01       	movw	r30, r10
    266a:	17 ff       	sbrs	r17, 7
    266c:	07 c0       	rjmp	.+14     	; 0x267c <vfprintf+0x2b8>
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	44 e0       	ldi	r20, 0x04	; 4
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	06 c0       	rjmp	.+12     	; 0x2688 <vfprintf+0x2c4>
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	42 e0       	ldi	r20, 0x02	; 2
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	a4 0e       	add	r10, r20
    268a:	b5 1e       	adc	r11, r21
    268c:	a2 01       	movw	r20, r4
    268e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <__ultoa_invert>
    2692:	d8 2e       	mov	r13, r24
    2694:	d4 18       	sub	r13, r4
    2696:	01 2f       	mov	r16, r17
    2698:	0f 77       	andi	r16, 0x7F	; 127
    269a:	06 ff       	sbrs	r16, 6
    269c:	09 c0       	rjmp	.+18     	; 0x26b0 <vfprintf+0x2ec>
    269e:	0e 7f       	andi	r16, 0xFE	; 254
    26a0:	df 14       	cp	r13, r15
    26a2:	30 f4       	brcc	.+12     	; 0x26b0 <vfprintf+0x2ec>
    26a4:	04 ff       	sbrs	r16, 4
    26a6:	06 c0       	rjmp	.+12     	; 0x26b4 <vfprintf+0x2f0>
    26a8:	02 fd       	sbrc	r16, 2
    26aa:	04 c0       	rjmp	.+8      	; 0x26b4 <vfprintf+0x2f0>
    26ac:	0f 7e       	andi	r16, 0xEF	; 239
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <vfprintf+0x2f0>
    26b0:	1d 2d       	mov	r17, r13
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <vfprintf+0x2f2>
    26b4:	1f 2d       	mov	r17, r15
    26b6:	80 2f       	mov	r24, r16
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	04 ff       	sbrs	r16, 4
    26bc:	0c c0       	rjmp	.+24     	; 0x26d6 <vfprintf+0x312>
    26be:	fe 01       	movw	r30, r28
    26c0:	ed 0d       	add	r30, r13
    26c2:	f1 1d       	adc	r31, r1
    26c4:	20 81       	ld	r18, Z
    26c6:	20 33       	cpi	r18, 0x30	; 48
    26c8:	11 f4       	brne	.+4      	; 0x26ce <vfprintf+0x30a>
    26ca:	09 7e       	andi	r16, 0xE9	; 233
    26cc:	09 c0       	rjmp	.+18     	; 0x26e0 <vfprintf+0x31c>
    26ce:	02 ff       	sbrs	r16, 2
    26d0:	06 c0       	rjmp	.+12     	; 0x26de <vfprintf+0x31a>
    26d2:	1e 5f       	subi	r17, 0xFE	; 254
    26d4:	05 c0       	rjmp	.+10     	; 0x26e0 <vfprintf+0x31c>
    26d6:	86 78       	andi	r24, 0x86	; 134
    26d8:	90 70       	andi	r25, 0x00	; 0
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <vfprintf+0x31c>
    26de:	1f 5f       	subi	r17, 0xFF	; 255
    26e0:	80 2e       	mov	r8, r16
    26e2:	99 24       	eor	r9, r9
    26e4:	03 fd       	sbrc	r16, 3
    26e6:	12 c0       	rjmp	.+36     	; 0x270c <vfprintf+0x348>
    26e8:	00 ff       	sbrs	r16, 0
    26ea:	0d c0       	rjmp	.+26     	; 0x2706 <vfprintf+0x342>
    26ec:	fd 2c       	mov	r15, r13
    26ee:	1e 15       	cp	r17, r14
    26f0:	50 f4       	brcc	.+20     	; 0x2706 <vfprintf+0x342>
    26f2:	fe 0c       	add	r15, r14
    26f4:	f1 1a       	sub	r15, r17
    26f6:	1e 2d       	mov	r17, r14
    26f8:	06 c0       	rjmp	.+12     	; 0x2706 <vfprintf+0x342>
    26fa:	80 e2       	ldi	r24, 0x20	; 32
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	b3 01       	movw	r22, r6
    2700:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    2704:	1f 5f       	subi	r17, 0xFF	; 255
    2706:	1e 15       	cp	r17, r14
    2708:	c0 f3       	brcs	.-16     	; 0x26fa <vfprintf+0x336>
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <vfprintf+0x350>
    270c:	1e 15       	cp	r17, r14
    270e:	10 f4       	brcc	.+4      	; 0x2714 <vfprintf+0x350>
    2710:	e1 1a       	sub	r14, r17
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <vfprintf+0x352>
    2714:	ee 24       	eor	r14, r14
    2716:	84 fe       	sbrs	r8, 4
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <vfprintf+0x374>
    271a:	80 e3       	ldi	r24, 0x30	; 48
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	b3 01       	movw	r22, r6
    2720:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    2724:	82 fe       	sbrs	r8, 2
    2726:	1f c0       	rjmp	.+62     	; 0x2766 <vfprintf+0x3a2>
    2728:	81 fe       	sbrs	r8, 1
    272a:	03 c0       	rjmp	.+6      	; 0x2732 <vfprintf+0x36e>
    272c:	88 e5       	ldi	r24, 0x58	; 88
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	10 c0       	rjmp	.+32     	; 0x2752 <vfprintf+0x38e>
    2732:	88 e7       	ldi	r24, 0x78	; 120
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0d c0       	rjmp	.+26     	; 0x2752 <vfprintf+0x38e>
    2738:	c4 01       	movw	r24, r8
    273a:	86 78       	andi	r24, 0x86	; 134
    273c:	90 70       	andi	r25, 0x00	; 0
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	91 f0       	breq	.+36     	; 0x2766 <vfprintf+0x3a2>
    2742:	81 fc       	sbrc	r8, 1
    2744:	02 c0       	rjmp	.+4      	; 0x274a <vfprintf+0x386>
    2746:	80 e2       	ldi	r24, 0x20	; 32
    2748:	01 c0       	rjmp	.+2      	; 0x274c <vfprintf+0x388>
    274a:	8b e2       	ldi	r24, 0x2B	; 43
    274c:	07 fd       	sbrc	r16, 7
    274e:	8d e2       	ldi	r24, 0x2D	; 45
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	b3 01       	movw	r22, r6
    2754:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    2758:	06 c0       	rjmp	.+12     	; 0x2766 <vfprintf+0x3a2>
    275a:	80 e3       	ldi	r24, 0x30	; 48
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	b3 01       	movw	r22, r6
    2760:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    2764:	fa 94       	dec	r15
    2766:	df 14       	cp	r13, r15
    2768:	c0 f3       	brcs	.-16     	; 0x275a <vfprintf+0x396>
    276a:	da 94       	dec	r13
    276c:	f2 01       	movw	r30, r4
    276e:	ed 0d       	add	r30, r13
    2770:	f1 1d       	adc	r31, r1
    2772:	80 81       	ld	r24, Z
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	b3 01       	movw	r22, r6
    2778:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    277c:	dd 20       	and	r13, r13
    277e:	a9 f7       	brne	.-22     	; 0x276a <vfprintf+0x3a6>
    2780:	06 c0       	rjmp	.+12     	; 0x278e <vfprintf+0x3ca>
    2782:	80 e2       	ldi	r24, 0x20	; 32
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	b3 01       	movw	r22, r6
    2788:	0e 94 3f 14 	call	0x287e	; 0x287e <fputc>
    278c:	ea 94       	dec	r14
    278e:	ee 20       	and	r14, r14
    2790:	c1 f7       	brne	.-16     	; 0x2782 <vfprintf+0x3be>
    2792:	40 ce       	rjmp	.-896    	; 0x2414 <vfprintf+0x50>
    2794:	f3 01       	movw	r30, r6
    2796:	86 81       	ldd	r24, Z+6	; 0x06
    2798:	97 81       	ldd	r25, Z+7	; 0x07
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <vfprintf+0x3dc>
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	9f ef       	ldi	r25, 0xFF	; 255
    27a0:	2d 96       	adiw	r28, 0x0d	; 13
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	df 91       	pop	r29
    27ae:	cf 91       	pop	r28
    27b0:	1f 91       	pop	r17
    27b2:	0f 91       	pop	r16
    27b4:	ff 90       	pop	r15
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	bf 90       	pop	r11
    27be:	af 90       	pop	r10
    27c0:	9f 90       	pop	r9
    27c2:	8f 90       	pop	r8
    27c4:	7f 90       	pop	r7
    27c6:	6f 90       	pop	r6
    27c8:	5f 90       	pop	r5
    27ca:	4f 90       	pop	r4
    27cc:	3f 90       	pop	r3
    27ce:	2f 90       	pop	r2
    27d0:	08 95       	ret

000027d2 <strnlen_P>:
    27d2:	fc 01       	movw	r30, r24
    27d4:	05 90       	lpm	r0, Z+
    27d6:	61 50       	subi	r22, 0x01	; 1
    27d8:	70 40       	sbci	r23, 0x00	; 0
    27da:	01 10       	cpse	r0, r1
    27dc:	d8 f7       	brcc	.-10     	; 0x27d4 <strnlen_P+0x2>
    27de:	80 95       	com	r24
    27e0:	90 95       	com	r25
    27e2:	8e 0f       	add	r24, r30
    27e4:	9f 1f       	adc	r25, r31
    27e6:	08 95       	ret

000027e8 <strnlen>:
    27e8:	fc 01       	movw	r30, r24
    27ea:	61 50       	subi	r22, 0x01	; 1
    27ec:	70 40       	sbci	r23, 0x00	; 0
    27ee:	01 90       	ld	r0, Z+
    27f0:	01 10       	cpse	r0, r1
    27f2:	d8 f7       	brcc	.-10     	; 0x27ea <strnlen+0x2>
    27f4:	80 95       	com	r24
    27f6:	90 95       	com	r25
    27f8:	8e 0f       	add	r24, r30
    27fa:	9f 1f       	adc	r25, r31
    27fc:	08 95       	ret

000027fe <fgetc>:
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	ec 01       	movw	r28, r24
    2804:	2b 81       	ldd	r18, Y+3	; 0x03
    2806:	20 ff       	sbrs	r18, 0
    2808:	35 c0       	rjmp	.+106    	; 0x2874 <fgetc+0x76>
    280a:	26 ff       	sbrs	r18, 6
    280c:	09 c0       	rjmp	.+18     	; 0x2820 <fgetc+0x22>
    280e:	2f 7b       	andi	r18, 0xBF	; 191
    2810:	2b 83       	std	Y+3, r18	; 0x03
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	9f 83       	std	Y+7, r25	; 0x07
    281a:	8e 83       	std	Y+6, r24	; 0x06
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	28 c0       	rjmp	.+80     	; 0x2870 <fgetc+0x72>
    2820:	22 ff       	sbrs	r18, 2
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <fgetc+0x44>
    2824:	e8 81       	ld	r30, Y
    2826:	f9 81       	ldd	r31, Y+1	; 0x01
    2828:	80 81       	ld	r24, Z
    282a:	99 27       	eor	r25, r25
    282c:	87 fd       	sbrc	r24, 7
    282e:	90 95       	com	r25
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	19 f4       	brne	.+6      	; 0x283a <fgetc+0x3c>
    2834:	20 62       	ori	r18, 0x20	; 32
    2836:	2b 83       	std	Y+3, r18	; 0x03
    2838:	1d c0       	rjmp	.+58     	; 0x2874 <fgetc+0x76>
    283a:	31 96       	adiw	r30, 0x01	; 1
    283c:	f9 83       	std	Y+1, r31	; 0x01
    283e:	e8 83       	st	Y, r30
    2840:	11 c0       	rjmp	.+34     	; 0x2864 <fgetc+0x66>
    2842:	ea 85       	ldd	r30, Y+10	; 0x0a
    2844:	fb 85       	ldd	r31, Y+11	; 0x0b
    2846:	ce 01       	movw	r24, r28
    2848:	19 95       	eicall
    284a:	97 ff       	sbrs	r25, 7
    284c:	0b c0       	rjmp	.+22     	; 0x2864 <fgetc+0x66>
    284e:	2b 81       	ldd	r18, Y+3	; 0x03
    2850:	3f ef       	ldi	r19, 0xFF	; 255
    2852:	8f 3f       	cpi	r24, 0xFF	; 255
    2854:	93 07       	cpc	r25, r19
    2856:	11 f4       	brne	.+4      	; 0x285c <fgetc+0x5e>
    2858:	80 e1       	ldi	r24, 0x10	; 16
    285a:	01 c0       	rjmp	.+2      	; 0x285e <fgetc+0x60>
    285c:	80 e2       	ldi	r24, 0x20	; 32
    285e:	82 2b       	or	r24, r18
    2860:	8b 83       	std	Y+3, r24	; 0x03
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <fgetc+0x76>
    2864:	2e 81       	ldd	r18, Y+6	; 0x06
    2866:	3f 81       	ldd	r19, Y+7	; 0x07
    2868:	2f 5f       	subi	r18, 0xFF	; 255
    286a:	3f 4f       	sbci	r19, 0xFF	; 255
    286c:	3f 83       	std	Y+7, r19	; 0x07
    286e:	2e 83       	std	Y+6, r18	; 0x06
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <fgetc+0x7a>
    2874:	8f ef       	ldi	r24, 0xFF	; 255
    2876:	9f ef       	ldi	r25, 0xFF	; 255
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	08 95       	ret

0000287e <fputc>:
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	8c 01       	movw	r16, r24
    2888:	eb 01       	movw	r28, r22
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	81 ff       	sbrs	r24, 1
    288e:	1b c0       	rjmp	.+54     	; 0x28c6 <fputc+0x48>
    2890:	82 ff       	sbrs	r24, 2
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <fputc+0x30>
    2894:	2e 81       	ldd	r18, Y+6	; 0x06
    2896:	3f 81       	ldd	r19, Y+7	; 0x07
    2898:	8c 81       	ldd	r24, Y+4	; 0x04
    289a:	9d 81       	ldd	r25, Y+5	; 0x05
    289c:	28 17       	cp	r18, r24
    289e:	39 07       	cpc	r19, r25
    28a0:	64 f4       	brge	.+24     	; 0x28ba <fputc+0x3c>
    28a2:	e8 81       	ld	r30, Y
    28a4:	f9 81       	ldd	r31, Y+1	; 0x01
    28a6:	01 93       	st	Z+, r16
    28a8:	f9 83       	std	Y+1, r31	; 0x01
    28aa:	e8 83       	st	Y, r30
    28ac:	06 c0       	rjmp	.+12     	; 0x28ba <fputc+0x3c>
    28ae:	e8 85       	ldd	r30, Y+8	; 0x08
    28b0:	f9 85       	ldd	r31, Y+9	; 0x09
    28b2:	80 2f       	mov	r24, r16
    28b4:	19 95       	eicall
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	31 f4       	brne	.+12     	; 0x28c6 <fputc+0x48>
    28ba:	8e 81       	ldd	r24, Y+6	; 0x06
    28bc:	9f 81       	ldd	r25, Y+7	; 0x07
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	9f 83       	std	Y+7, r25	; 0x07
    28c2:	8e 83       	std	Y+6, r24	; 0x06
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <fputc+0x4c>
    28c6:	0f ef       	ldi	r16, 0xFF	; 255
    28c8:	1f ef       	ldi	r17, 0xFF	; 255
    28ca:	c8 01       	movw	r24, r16
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	08 95       	ret

000028d6 <__ultoa_invert>:
    28d6:	fa 01       	movw	r30, r20
    28d8:	aa 27       	eor	r26, r26
    28da:	28 30       	cpi	r18, 0x08	; 8
    28dc:	51 f1       	breq	.+84     	; 0x2932 <__ultoa_invert+0x5c>
    28de:	20 31       	cpi	r18, 0x10	; 16
    28e0:	81 f1       	breq	.+96     	; 0x2942 <__ultoa_invert+0x6c>
    28e2:	e8 94       	clt
    28e4:	6f 93       	push	r22
    28e6:	6e 7f       	andi	r22, 0xFE	; 254
    28e8:	6e 5f       	subi	r22, 0xFE	; 254
    28ea:	7f 4f       	sbci	r23, 0xFF	; 255
    28ec:	8f 4f       	sbci	r24, 0xFF	; 255
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	af 4f       	sbci	r26, 0xFF	; 255
    28f2:	b1 e0       	ldi	r27, 0x01	; 1
    28f4:	3e d0       	rcall	.+124    	; 0x2972 <__ultoa_invert+0x9c>
    28f6:	b4 e0       	ldi	r27, 0x04	; 4
    28f8:	3c d0       	rcall	.+120    	; 0x2972 <__ultoa_invert+0x9c>
    28fa:	67 0f       	add	r22, r23
    28fc:	78 1f       	adc	r23, r24
    28fe:	89 1f       	adc	r24, r25
    2900:	9a 1f       	adc	r25, r26
    2902:	a1 1d       	adc	r26, r1
    2904:	68 0f       	add	r22, r24
    2906:	79 1f       	adc	r23, r25
    2908:	8a 1f       	adc	r24, r26
    290a:	91 1d       	adc	r25, r1
    290c:	a1 1d       	adc	r26, r1
    290e:	6a 0f       	add	r22, r26
    2910:	71 1d       	adc	r23, r1
    2912:	81 1d       	adc	r24, r1
    2914:	91 1d       	adc	r25, r1
    2916:	a1 1d       	adc	r26, r1
    2918:	20 d0       	rcall	.+64     	; 0x295a <__ultoa_invert+0x84>
    291a:	09 f4       	brne	.+2      	; 0x291e <__ultoa_invert+0x48>
    291c:	68 94       	set
    291e:	3f 91       	pop	r19
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	26 9f       	mul	r18, r22
    2924:	11 24       	eor	r1, r1
    2926:	30 19       	sub	r19, r0
    2928:	30 5d       	subi	r19, 0xD0	; 208
    292a:	31 93       	st	Z+, r19
    292c:	de f6       	brtc	.-74     	; 0x28e4 <__ultoa_invert+0xe>
    292e:	cf 01       	movw	r24, r30
    2930:	08 95       	ret
    2932:	46 2f       	mov	r20, r22
    2934:	47 70       	andi	r20, 0x07	; 7
    2936:	40 5d       	subi	r20, 0xD0	; 208
    2938:	41 93       	st	Z+, r20
    293a:	b3 e0       	ldi	r27, 0x03	; 3
    293c:	0f d0       	rcall	.+30     	; 0x295c <__ultoa_invert+0x86>
    293e:	c9 f7       	brne	.-14     	; 0x2932 <__ultoa_invert+0x5c>
    2940:	f6 cf       	rjmp	.-20     	; 0x292e <__ultoa_invert+0x58>
    2942:	46 2f       	mov	r20, r22
    2944:	4f 70       	andi	r20, 0x0F	; 15
    2946:	40 5d       	subi	r20, 0xD0	; 208
    2948:	4a 33       	cpi	r20, 0x3A	; 58
    294a:	18 f0       	brcs	.+6      	; 0x2952 <__ultoa_invert+0x7c>
    294c:	49 5d       	subi	r20, 0xD9	; 217
    294e:	31 fd       	sbrc	r19, 1
    2950:	40 52       	subi	r20, 0x20	; 32
    2952:	41 93       	st	Z+, r20
    2954:	02 d0       	rcall	.+4      	; 0x295a <__ultoa_invert+0x84>
    2956:	a9 f7       	brne	.-22     	; 0x2942 <__ultoa_invert+0x6c>
    2958:	ea cf       	rjmp	.-44     	; 0x292e <__ultoa_invert+0x58>
    295a:	b4 e0       	ldi	r27, 0x04	; 4
    295c:	a6 95       	lsr	r26
    295e:	97 95       	ror	r25
    2960:	87 95       	ror	r24
    2962:	77 95       	ror	r23
    2964:	67 95       	ror	r22
    2966:	ba 95       	dec	r27
    2968:	c9 f7       	brne	.-14     	; 0x295c <__ultoa_invert+0x86>
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	61 05       	cpc	r22, r1
    296e:	71 05       	cpc	r23, r1
    2970:	08 95       	ret
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	0a 2e       	mov	r0, r26
    2978:	06 94       	lsr	r0
    297a:	57 95       	ror	r21
    297c:	47 95       	ror	r20
    297e:	37 95       	ror	r19
    2980:	27 95       	ror	r18
    2982:	ba 95       	dec	r27
    2984:	c9 f7       	brne	.-14     	; 0x2978 <__ultoa_invert+0xa2>
    2986:	62 0f       	add	r22, r18
    2988:	73 1f       	adc	r23, r19
    298a:	84 1f       	adc	r24, r20
    298c:	95 1f       	adc	r25, r21
    298e:	a0 1d       	adc	r26, r0
    2990:	08 95       	ret

00002992 <_exit>:
    2992:	f8 94       	cli

00002994 <__stop_program>:
    2994:	ff cf       	rjmp	.-2      	; 0x2994 <__stop_program>
