
pjt12_ADC_TC1047.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800200  0000216e  00002202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000216e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000142  008003e8  008003e8  000023ea  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000448  00000000  00000000  00003908  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041ba  00000000  00000000  00003d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020ae  00000000  00000000  00007f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002039  00000000  00000000  00009fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae4  00000000  00000000  0000bff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b22  00000000  00000000  0000cad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002717  00000000  00000000  0000d5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000fd11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e6       	ldi	r30, 0x6E	; 110
      fc:	f1 e2       	ldi	r31, 0x21	; 33
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 3e       	cpi	r26, 0xE8	; 232
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	a8 ee       	ldi	r26, 0xE8	; 232
     114:	b3 e0       	ldi	r27, 0x03	; 3
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	aa 32       	cpi	r26, 0x2A	; 42
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <main>
     124:	0c 94 b5 10 	jmp	0x216a	; 0x216a <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include <stdlib.h>
#include "linked_list.h"
#include "Timer_linked_list.h"

int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
	int i;
	for (i = 2; i <= n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
		if((n % i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
#include "Timer_linked_list.h"

int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
		if((n % i) == 0)
			return 0;
	return 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return 0;
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:

void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 9c 0c 	call	0x1938	; 0x1938 <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     18c:	c2 e0       	ldi	r28, 0x02	; 2
     18e:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
		if (is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
			count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	8a e1       	ldi	r24, 0x1A	; 26
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <app_list>:

void app_list(char *ap)
{
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	28 97       	sbiw	r28, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	19 f0       	breq	.+6      	; 0x226 <app_list+0x24>
     220:	fc 01       	movw	r30, r24
     222:	10 81       	ld	r17, Z
     224:	01 c0       	rjmp	.+2      	; 0x228 <app_list+0x26>
	printf("count=%d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     226:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]

	while(1) {
		printf( ">  ");
     228:	24 e2       	ldi	r18, 0x24	; 36
     22a:	e2 2e       	mov	r14, r18
     22c:	22 e0       	ldi	r18, 0x02	; 2
     22e:	f2 2e       	mov	r15, r18
     230:	0f 92       	push	r0
     232:	0f 92       	push	r0
     234:	ed b7       	in	r30, 0x3d	; 61
     236:	fe b7       	in	r31, 0x3e	; 62
     238:	f2 82       	std	Z+2, r15	; 0x02
     23a:	e1 82       	std	Z+1, r14	; 0x01
     23c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
		if (fgets(buf, 8, stdin) == NULL)
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	40 91 24 05 	lds	r20, 0x0524
     248:	50 91 25 05 	lds	r21, 0x0525
     24c:	ce 01       	movw	r24, r28
     24e:	01 96       	adiw	r24, 0x01	; 1
     250:	68 e0       	ldi	r22, 0x08	; 8
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <fgets>
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	a1 f0       	breq	.+40     	; 0x284 <app_list+0x82>
			break;
		np = get_node();
     25c:	0e 94 17 02 	call	0x42e	; 0x42e <get_node>
		np->data = buf[0];
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
     266:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     268:	18 36       	cpi	r17, 0x68	; 104
     26a:	19 f0       	breq	.+6      	; 0x272 <app_list+0x70>
     26c:	14 37       	cpi	r17, 0x74	; 116
     26e:	39 f4       	brne	.+14     	; 0x27e <app_list+0x7c>
     270:	03 c0       	rjmp	.+6      	; 0x278 <app_list+0x76>
			case 'h'	: insert_node_head(np); break;
     272:	0e 94 1f 02 	call	0x43e	; 0x43e <insert_node_head>
     276:	dc cf       	rjmp	.-72     	; 0x230 <app_list+0x2e>
			case 't'	: insert_node_tail(np); break;
     278:	0e 94 34 02 	call	0x468	; 0x468 <insert_node_tail>
     27c:	d9 cf       	rjmp	.-78     	; 0x230 <app_list+0x2e>
			default 	: insert_node_ascn(np); //	'a'
     27e:	0e 94 4b 02 	call	0x496	; 0x496 <insert_node_ascn>
     282:	d6 cf       	rjmp	.-84     	; 0x230 <app_list+0x2e>
		}
	}

	tour_list();
     284:	0e 94 85 02 	call	0x50a	; 0x50a <tour_list>
	free_list();
     288:	0e 94 b2 02 	call	0x564	; 0x564 <free_list>
}
     28c:	28 96       	adiw	r28, 0x08	; 8
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <app_timer>:

void app_timer(char *ap)
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	62 97       	sbiw	r28, 0x12	; 18
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     2bc:	08 e2       	ldi	r16, 0x28	; 40
     2be:	12 e0       	ldi	r17, 0x02	; 2
     2c0:	0f 92       	push	r0
     2c2:	0f 92       	push	r0
     2c4:	ed b7       	in	r30, 0x3d	; 61
     2c6:	fe b7       	in	r31, 0x3e	; 62
     2c8:	12 83       	std	Z+2, r17	; 0x02
     2ca:	01 83       	std	Z+1, r16	; 0x01
     2cc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	40 91 24 05 	lds	r20, 0x0524
     2d8:	50 91 25 05 	lds	r21, 0x0525
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	68 e0       	ldi	r22, 0x08	; 8
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <fgets>
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	61 f0       	breq	.+24     	; 0x304 <app_timer+0x60>
     2ec:	ce 01       	movw	r24, r28
     2ee:	01 96       	adiw	r24, 0x01	; 1
     2f0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <atoi>
     2f4:	bc 01       	movw	r22, r24
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	29 f0       	breq	.+10     	; 0x304 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     2fa:	ce 01       	movw	r24, r28
     2fc:	09 96       	adiw	r24, 0x09	; 9
     2fe:	0e 94 af 04 	call	0x95e	; 0x95e <insert_timer>
	}
     302:	de cf       	rjmp	.-68     	; 0x2c0 <app_timer+0x1c>

	tour_timer();
     304:	0e 94 18 05 	call	0xa30	; 0xa30 <tour_timer>
	free_timer();
     308:	0e 94 5a 05 	call	0xab4	; 0xab4 <free_timer>
}
     30c:	62 96       	adiw	r28, 0x12	; 18
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	08 95       	ret

00000322 <task_prime>:

void task_prime(char *ap)
{
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	41 f0       	breq	.+16     	; 0x346 <task_prime+0x24>
     336:	fc 01       	movw	r30, r24
     338:	20 81       	ld	r18, Z
     33a:	22 23       	and	r18, r18
     33c:	21 f0       	breq	.+8      	; 0x346 <task_prime+0x24>
     33e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <atoi>
     342:	8c 01       	movw	r16, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <task_prime+0x28>
	free_timer();
}

void task_prime(char *ap)
{
	int n, t= 2000, count = 0;
     346:	00 ed       	ldi	r16, 0xD0	; 208
     348:	17 e0       	ldi	r17, 0x07	; 7
     34a:	ee 24       	eor	r14, r14
     34c:	ff 24       	eor	r15, r15

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     34e:	c2 e0       	ldi	r28, 0x02	; 2
     350:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	c3 2e       	mov	r12, r19
     356:	32 e0       	ldi	r19, 0x02	; 2
     358:	d3 2e       	mov	r13, r19
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     35a:	17 c0       	rjmp	.+46     	; 0x38a <task_prime+0x68>
		if (is_prime(n)) {
     35c:	ce 01       	movw	r24, r28
     35e:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	89 f0       	breq	.+34     	; 0x388 <task_prime+0x66>
			count++;
     366:	08 94       	sec
     368:	e1 1c       	adc	r14, r1
     36a:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!!\n", n);
     36c:	00 d0       	rcall	.+0      	; 0x36e <task_prime+0x4c>
     36e:	0f 92       	push	r0
     370:	ed b7       	in	r30, 0x3d	; 61
     372:	fe b7       	in	r31, 0x3e	; 62
     374:	d2 82       	std	Z+2, r13	; 0x02
     376:	c1 82       	std	Z+1, r12	; 0x01
     378:	d4 83       	std	Z+4, r29	; 0x04
     37a:	c3 83       	std	Z+3, r28	; 0x03
     37c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int n, t= 2000, count = 0;

	if (ap && *ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     388:	21 96       	adiw	r28, 0x01	; 1
     38a:	0c 17       	cp	r16, r28
     38c:	1d 07       	cpc	r17, r29
     38e:	34 f7       	brge	.-52     	; 0x35c <task_prime+0x3a>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     390:	00 d0       	rcall	.+0      	; 0x392 <task_prime+0x70>
     392:	0f 92       	push	r0
     394:	8a e1       	ldi	r24, 0x1A	; 26
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	ed b7       	in	r30, 0x3d	; 61
     39a:	fe b7       	in	r31, 0x3e	; 62
     39c:	92 83       	std	Z+2, r25	; 0x02
     39e:	81 83       	std	Z+1, r24	; 0x01
     3a0:	f4 82       	std	Z+4, r15	; 0x04
     3a2:	e3 82       	std	Z+3, r14	; 0x03
     3a4:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	08 95       	ret

000003c2 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
     3c2:	8f ef       	ldi	r24, 0xFF	; 255
     3c4:	80 93 0b 01 	sts	0x010B, r24
     3c8:	80 93 0a 01 	sts	0x010A, r24
}
     3cc:	08 95       	ret

000003ce <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
     3ce:	10 92 0b 01 	sts	0x010B, r1
     3d2:	10 92 e8 03 	sts	0x03E8, r1
}
     3d6:	08 95       	ret

000003d8 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	80 93 0b 01 	sts	0x010B, r24
     3de:	80 93 e8 03 	sts	0x03E8, r24
}
     3e2:	08 95       	ret

000003e4 <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <led_on+0xa>
     3ea:	22 0f       	add	r18, r18
     3ec:	33 1f       	adc	r19, r19
     3ee:	8a 95       	dec	r24
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <led_on+0x6>
     3f2:	20 95       	com	r18
     3f4:	80 91 e8 03 	lds	r24, 0x03E8
     3f8:	28 23       	and	r18, r24
     3fa:	20 93 e8 03 	sts	0x03E8, r18
	PORTL = Leds;
     3fe:	20 93 0b 01 	sts	0x010B, r18
}
     402:	08 95       	ret

00000404 <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	02 c0       	rjmp	.+4      	; 0x40e <led_off+0xa>
     40a:	22 0f       	add	r18, r18
     40c:	33 1f       	adc	r19, r19
     40e:	8a 95       	dec	r24
     410:	e2 f7       	brpl	.-8      	; 0x40a <led_off+0x6>
     412:	80 91 e8 03 	lds	r24, 0x03E8
     416:	82 2b       	or	r24, r18
     418:	80 93 e8 03 	sts	0x03E8, r24
	PORTL = Leds;
     41c:	80 93 0b 01 	sts	0x010B, r24
}
     420:	08 95       	ret

00000422 <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     422:	80 95       	com	r24
     424:	80 93 e8 03 	sts	0x03E8, r24
	PORTL = Leds;
     428:	80 93 0b 01 	sts	0x010B, r24
}
     42c:	08 95       	ret

0000042e <get_node>:

struct node *get_node()
{
	struct node *cp;	// current pointer

	cp = (struct node *)malloc(sizeof(struct node));
     42e:	84 e0       	ldi	r24, 0x04	; 4
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 6d 0b 	call	0x16da	; 0x16da <malloc>
	return cp;
}
     436:	08 95       	ret

00000438 <free_node>:

void free_node(struct node *np)
{
	free(np);
     438:	0e 94 03 0c 	call	0x1806	; 0x1806 <free>
}
     43c:	08 95       	ret

0000043e <insert_node_head>:

void insert_node_head(struct node *np)
{
     43e:	fc 01       	movw	r30, r24
	if (!Head) {
     440:	80 91 e9 03 	lds	r24, 0x03E9
     444:	90 91 ea 03 	lds	r25, 0x03EA
     448:	00 97       	sbiw	r24, 0x00	; 0
     44a:	39 f4       	brne	.+14     	; 0x45a <insert_node_head+0x1c>
		Head = np;
     44c:	f0 93 ea 03 	sts	0x03EA, r31
     450:	e0 93 e9 03 	sts	0x03E9, r30
		np->link = NULL;
     454:	13 82       	std	Z+3, r1	; 0x03
     456:	12 82       	std	Z+2, r1	; 0x02
     458:	08 95       	ret
	}
	else {
		np->link = Head;
     45a:	93 83       	std	Z+3, r25	; 0x03
     45c:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     45e:	f0 93 ea 03 	sts	0x03EA, r31
     462:	e0 93 e9 03 	sts	0x03E9, r30
     466:	08 95       	ret

00000468 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if (!Head)
     468:	e0 91 e9 03 	lds	r30, 0x03E9
     46c:	f0 91 ea 03 	lds	r31, 0x03EA
     470:	30 97       	sbiw	r30, 0x00	; 0
     472:	31 f4       	brne	.+12     	; 0x480 <insert_node_tail+0x18>
		Head = np;
     474:	90 93 ea 03 	sts	0x03EA, r25
     478:	80 93 e9 03 	sts	0x03E9, r24
     47c:	08 c0       	rjmp	.+16     	; 0x48e <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     47e:	f9 01       	movw	r30, r18
     480:	22 81       	ldd	r18, Z+2	; 0x02
     482:	33 81       	ldd	r19, Z+3	; 0x03
     484:	21 15       	cp	r18, r1
     486:	31 05       	cpc	r19, r1
     488:	d1 f7       	brne	.-12     	; 0x47e <insert_node_tail+0x16>
		cp->link = np;
     48a:	93 83       	std	Z+3, r25	; 0x03
     48c:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     48e:	fc 01       	movw	r30, r24
     490:	13 82       	std	Z+3, r1	; 0x03
     492:	12 82       	std	Z+2, r1	; 0x02
}
     494:	08 95       	ret

00000496 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	fc 01       	movw	r30, r24
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
     49c:	a0 91 e9 03 	lds	r26, 0x03E9
     4a0:	b0 91 ea 03 	lds	r27, 0x03EA
     4a4:	10 97       	sbiw	r26, 0x00	; 0
     4a6:	49 f0       	breq	.+18     	; 0x4ba <insert_node_ascn+0x24>
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4a8:	60 81       	ld	r22, Z
     4aa:	71 81       	ldd	r23, Z+1	; 0x01
     4ac:	3a 2f       	mov	r19, r26
     4ae:	2b 2f       	mov	r18, r27
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
			np->link = Head;
			Head = np;
     4b4:	58 2f       	mov	r21, r24
     4b6:	4f 2f       	mov	r20, r31
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <insert_node_ascn+0x5a>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
		Head = np;
     4ba:	90 93 ea 03 	sts	0x03EA, r25
     4be:	80 93 e9 03 	sts	0x03E9, r24
		np->link = NULL;
     4c2:	13 82       	std	Z+3, r1	; 0x03
     4c4:	12 82       	std	Z+2, r1	; 0x02
     4c6:	1e c0       	rjmp	.+60     	; 0x504 <insert_node_ascn+0x6e>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
		
		if (pp == NULL) {
     4c8:	20 97       	sbiw	r28, 0x00	; 0
     4ca:	21 f4       	brne	.+8      	; 0x4d4 <insert_node_ascn+0x3e>
			np->link = Head;
     4cc:	32 83       	std	Z+2, r19	; 0x02
     4ce:	23 83       	std	Z+3, r18	; 0x03
			Head = np;
     4d0:	9a 01       	movw	r18, r20
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <insert_node_ascn+0x4a>
		}
		else {
			np->link = pp->link;
     4d4:	8a 81       	ldd	r24, Y+2	; 0x02
     4d6:	9b 81       	ldd	r25, Y+3	; 0x03
     4d8:	93 83       	std	Z+3, r25	; 0x03
     4da:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     4dc:	fb 83       	std	Y+3, r31	; 0x03
     4de:	ea 83       	std	Y+2, r30	; 0x02
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link)
     4e0:	12 96       	adiw	r26, 0x02	; 2
     4e2:	8d 91       	ld	r24, X+
     4e4:	9c 91       	ld	r25, X
     4e6:	13 97       	sbiw	r26, 0x03	; 3
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	41 f0       	breq	.+16     	; 0x4fc <insert_node_ascn+0x66>
     4ec:	ed 01       	movw	r28, r26
												pp = cp, cp = cp->link)
     4ee:	dc 01       	movw	r26, r24
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     4f0:	8d 91       	ld	r24, X+
     4f2:	9c 91       	ld	r25, X
     4f4:	11 97       	sbiw	r26, 0x01	; 1
     4f6:	86 17       	cp	r24, r22
     4f8:	97 07       	cpc	r25, r23
     4fa:	34 f3       	brlt	.-52     	; 0x4c8 <insert_node_ascn+0x32>
     4fc:	30 93 e9 03 	sts	0x03E9, r19
     500:	20 93 ea 03 	sts	0x03EA, r18
			np->link = pp->link;
			pp->link = np;
		}

	}
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <tour_list>:

void tour_list()
{
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     512:	8a e0       	ldi	r24, 0x0A	; 10
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <putchar>
	for (cp = Head; cp != NULL; cp = cp->link)
     51a:	c0 91 e9 03 	lds	r28, 0x03E9
     51e:	d0 91 ea 03 	lds	r29, 0x03EA
		printf("-->%c ", cp->data);
     522:	0c e2       	ldi	r16, 0x2C	; 44
     524:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     526:	13 c0       	rjmp	.+38     	; 0x54e <tour_list+0x44>
		printf("-->%c ", cp->data);
     528:	00 d0       	rcall	.+0      	; 0x52a <tour_list+0x20>
     52a:	0f 92       	push	r0
     52c:	ed b7       	in	r30, 0x3d	; 61
     52e:	fe b7       	in	r31, 0x3e	; 62
     530:	12 83       	std	Z+2, r17	; 0x02
     532:	01 83       	std	Z+1, r16	; 0x01
     534:	88 81       	ld	r24, Y
     536:	99 81       	ldd	r25, Y+1	; 0x01
     538:	94 83       	std	Z+4, r25	; 0x04
     53a:	83 83       	std	Z+3, r24	; 0x03
     53c:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     540:	0a 80       	ldd	r0, Y+2	; 0x02
     542:	db 81       	ldd	r29, Y+3	; 0x03
     544:	c0 2d       	mov	r28, r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	20 97       	sbiw	r28, 0x00	; 0
     550:	59 f7       	brne	.-42     	; 0x528 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     552:	8a e0       	ldi	r24, 0x0A	; 10
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <putchar>
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	08 95       	ret

00000564 <free_list>:

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     564:	09 c0       	rjmp	.+18     	; 0x578 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     566:	fc 01       	movw	r30, r24
     568:	22 81       	ldd	r18, Z+2	; 0x02
     56a:	33 81       	ldd	r19, Z+3	; 0x03
     56c:	30 93 ea 03 	sts	0x03EA, r19
     570:	20 93 e9 03 	sts	0x03E9, r18
	return cp;
}

void free_node(struct node *np)
{
	free(np);
     574:	0e 94 03 0c 	call	0x1806	; 0x1806 <free>

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     578:	80 91 e9 03 	lds	r24, 0x03E9
     57c:	90 91 ea 03 	lds	r25, 0x03EA
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	89 f7       	brne	.-30     	; 0x566 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     584:	08 95       	ret

00000586 <task_init>:
#include "Timer_linked_list.h"
#include "adc.h"

void task_init()
{
	Task_f = Task_r = 0;
     586:	10 92 f4 03 	sts	0x03F4, r1
     58a:	10 92 f3 03 	sts	0x03F3, r1
     58e:	10 92 96 04 	sts	0x0496, r1
     592:	10 92 95 04 	sts	0x0495, r1
}
     596:	08 95       	ret

00000598 <task_insert>:

int task_insert(struct task *tskp)
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	48 2f       	mov	r20, r24
     59e:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
     5a0:	80 91 f3 03 	lds	r24, 0x03F3
     5a4:	90 91 f4 03 	lds	r25, 0x03F4
     5a8:	c0 91 95 04 	lds	r28, 0x0495
     5ac:	d0 91 96 04 	lds	r29, 0x0496
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	20 e1       	ldi	r18, 0x10	; 16
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	b9 01       	movw	r22, r18
     5b8:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     5bc:	8c 17       	cp	r24, r28
     5be:	9d 07       	cpc	r25, r29
     5c0:	31 f1       	breq	.+76     	; 0x60e <task_insert+0x76>
		return 0;
	Task_r = (Task_f + 1) % MAX_TASK;
     5c2:	80 91 95 04 	lds	r24, 0x0495
     5c6:	90 91 96 04 	lds	r25, 0x0496
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	b9 01       	movw	r22, r18
     5ce:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     5d2:	90 93 f4 03 	sts	0x03F4, r25
     5d6:	80 93 f3 03 	sts	0x03F3, r24
	Task_q[Task_r] = *tskp;
     5da:	80 91 f3 03 	lds	r24, 0x03F3
     5de:	90 91 f4 03 	lds	r25, 0x03F4
     5e2:	dc 01       	movw	r26, r24
     5e4:	aa 0f       	add	r26, r26
     5e6:	bb 1f       	adc	r27, r27
     5e8:	63 e0       	ldi	r22, 0x03	; 3
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	6a 95       	dec	r22
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <task_insert+0x52>
     5f2:	a8 0f       	add	r26, r24
     5f4:	b9 1f       	adc	r27, r25
     5f6:	ab 50       	subi	r26, 0x0B	; 11
     5f8:	bc 4f       	sbci	r27, 0xFC	; 252
     5fa:	c4 2f       	mov	r28, r20
     5fc:	de 2f       	mov	r29, r30
     5fe:	8a e0       	ldi	r24, 0x0A	; 10
     600:	09 90       	ld	r0, Y+
     602:	0d 92       	st	X+, r0
     604:	81 50       	subi	r24, 0x01	; 1
     606:	e1 f7       	brne	.-8      	; 0x600 <task_insert+0x68>
	return 1;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	02 c0       	rjmp	.+4      	; 0x612 <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)	// Full
		return 0;
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_f + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return 1;
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <task_delete>:
int task_delete(struct task *tskp)
{
     618:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)	// Empty
     61a:	40 91 f3 03 	lds	r20, 0x03F3
     61e:	50 91 f4 03 	lds	r21, 0x03F4
     622:	80 91 95 04 	lds	r24, 0x0495
     626:	90 91 96 04 	lds	r25, 0x0496
     62a:	48 17       	cp	r20, r24
     62c:	59 07       	cpc	r21, r25
     62e:	31 f1       	breq	.+76     	; 0x67c <task_delete+0x64>
		return 0;
	Task_f = (Task_f + 1) % MAX_TASK;
     630:	80 91 95 04 	lds	r24, 0x0495
     634:	90 91 96 04 	lds	r25, 0x0496
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	60 e1       	ldi	r22, 0x10	; 16
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     642:	90 93 96 04 	sts	0x0496, r25
     646:	80 93 95 04 	sts	0x0495, r24
	*tskp = Task_q[Task_f];
     64a:	80 91 95 04 	lds	r24, 0x0495
     64e:	90 91 96 04 	lds	r25, 0x0496
     652:	fc 01       	movw	r30, r24
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	a3 e0       	ldi	r26, 0x03	; 3
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	aa 95       	dec	r26
     660:	e1 f7       	brne	.-8      	; 0x65a <task_delete+0x42>
     662:	e8 0f       	add	r30, r24
     664:	f9 1f       	adc	r31, r25
     666:	d9 01       	movw	r26, r18
     668:	eb 50       	subi	r30, 0x0B	; 11
     66a:	fc 4f       	sbci	r31, 0xFC	; 252
     66c:	8a e0       	ldi	r24, 0x0A	; 10
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	81 50       	subi	r24, 0x01	; 1
     674:	e1 f7       	brne	.-8      	; 0x66e <task_delete+0x56>
	return 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	08 95       	ret
	return 1;
}
int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)	// Empty
		return 0;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return 1;
}
     680:	08 95       	ret

00000682 <task_tc1047>:

void task_tc1047(char *arg)
{
	static int value;
	static int volatile in_adc = 0;
	if (!strcmp(arg, "")) {		// called from task_cmd or timer task
     682:	fc 01       	movw	r30, r24
     684:	20 81       	ld	r18, Z
     686:	22 23       	and	r18, r18
     688:	19 f5       	brne	.+70     	; 0x6d0 <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     68a:	0e 94 17 07 	call	0xe2e	; 0xe2e <adc_start>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	90 93 ec 03 	sts	0x03EC, r25
     696:	80 93 eb 03 	sts	0x03EB, r24
     69a:	80 91 eb 03 	lds	r24, 0x03EB
     69e:	90 91 ec 03 	lds	r25, 0x03EC
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	d1 f7       	brne	.-12     	; 0x69a <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n", value);
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <task_tc1047+0x26>
     6a8:	0f 92       	push	r0
     6aa:	86 e3       	ldi	r24, 0x36	; 54
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	ed b7       	in	r30, 0x3d	; 61
     6b0:	fe b7       	in	r31, 0x3e	; 62
     6b2:	92 83       	std	Z+2, r25	; 0x02
     6b4:	81 83       	std	Z+1, r24	; 0x01
     6b6:	80 91 ed 03 	lds	r24, 0x03ED
     6ba:	90 91 ee 03 	lds	r25, 0x03EE
     6be:	94 83       	std	Z+4, r25	; 0x04
     6c0:	83 83       	std	Z+3, r24	; 0x03
     6c2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	08 95       	ret
	}
	else {		// called from ISR()
		value = atoi(arg) * (1.1/1023) * 1000;	// get input voltage(mv)
     6d0:	0e 94 9c 0c 	call	0x1938	; 0x1938 <atoi>
     6d4:	9c 01       	movw	r18, r24
     6d6:	b9 01       	movw	r22, r18
     6d8:	88 27       	eor	r24, r24
     6da:	77 fd       	sbrc	r23, 7
     6dc:	80 95       	com	r24
     6de:	98 2f       	mov	r25, r24
     6e0:	0e 94 89 08 	call	0x1112	; 0x1112 <__floatsisf>
     6e4:	29 e0       	ldi	r18, 0x09	; 9
     6e6:	30 ef       	ldi	r19, 0xF0	; 240
     6e8:	4c e8       	ldi	r20, 0x8C	; 140
     6ea:	5a e3       	ldi	r21, 0x3A	; 58
     6ec:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	4a e7       	ldi	r20, 0x7A	; 122
     6f6:	54 e4       	ldi	r21, 0x44	; 68
     6f8:	0e 94 88 07 	call	0xf10	; 0xf10 <__mulsf3>
     6fc:	0e 94 00 09 	call	0x1200	; 0x1200 <__fixsfsi>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;				// get degree from input voltage
     704:	84 5f       	subi	r24, 0xF4	; 244
     706:	91 40       	sbci	r25, 0x01	; 1
     708:	6a e0       	ldi	r22, 0x0A	; 10
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     710:	70 93 ee 03 	sts	0x03EE, r23
     714:	60 93 ed 03 	sts	0x03ED, r22
		in_adc = 0;
     718:	10 92 ec 03 	sts	0x03EC, r1
     71c:	10 92 eb 03 	sts	0x03EB, r1
     720:	08 95       	ret

00000722 <task_cmd>:
	}
}

void task_cmd(char *arg)
{
     722:	af 92       	push	r10
     724:	bf 92       	push	r11
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	ca 54       	subi	r28, 0x4A	; 74
     73c:	d0 40       	sbci	r29, 0x00	; 0
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if (!uart_peek()) return;
     748:	0e 94 d3 05 	call	0xba6	; 0xba6 <uart_peek>
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	09 f4       	brne	.+2      	; 0x752 <task_cmd+0x30>
     750:	88 c0       	rjmp	.+272    	; 0x862 <task_cmd+0x140>

	if (gets(buf) == NULL) {
     752:	ce 01       	movw	r24, r28
     754:	0b 96       	adiw	r24, 0x0b	; 11
     756:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <gets>
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	29 f4       	brne	.+10     	; 0x768 <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     75e:	89 e5       	ldi	r24, 0x59	; 89
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <puts>
     766:	ff cf       	rjmp	.-2      	; 0x766 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r");
     768:	ce 01       	movw	r24, r28
     76a:	0b 96       	adiw	r24, 0x0b	; 11
     76c:	6e e6       	ldi	r22, 0x6E	; 110
     76e:	72 e0       	ldi	r23, 0x02	; 2
     770:	0e 94 ba 0c 	call	0x1974	; 0x1974 <strtok>
     774:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	6e e6       	ldi	r22, 0x6E	; 110
     77c:	72 e0       	ldi	r23, 0x02	; 2
     77e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <strtok>
     782:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	6e e6       	ldi	r22, 0x6E	; 110
     78a:	72 e0       	ldi	r23, 0x02	; 2
     78c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <strtok>
     790:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	6e e6       	ldi	r22, 0x6E	; 110
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <strtok>
     79e:	6c 01       	movw	r12, r24

	if (cp0 == NULL) {
     7a0:	01 15       	cp	r16, r1
     7a2:	11 05       	cpc	r17, r1
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <task_cmd+0x86>
     7a6:	51 c0       	rjmp	.+162    	; 0x84a <task_cmd+0x128>
		// printf("!!!-111\n");
		printf( "$ "); return;
	}

	if (!strcmp(cp0, "prime"))
     7a8:	c8 01       	movw	r24, r16
     7aa:	66 e7       	ldi	r22, 0x76	; 118
     7ac:	72 e0       	ldi	r23, 0x02	; 2
     7ae:	0e 94 bf 0c 	call	0x197e	; 0x197e <strcmp>
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	21 f4       	brne	.+8      	; 0x7be <task_cmd+0x9c>
		task_prime(cp1);
     7b6:	c7 01       	movw	r24, r14
     7b8:	0e 94 91 01 	call	0x322	; 0x322 <task_prime>
     7bc:	46 c0       	rjmp	.+140    	; 0x84a <task_cmd+0x128>

	else if (!strcmp(cp0, "timer")) {
     7be:	c8 01       	movw	r24, r16
     7c0:	6c e7       	ldi	r22, 0x7C	; 124
     7c2:	72 e0       	ldi	r23, 0x02	; 2
     7c4:	0e 94 bf 0c 	call	0x197e	; 0x197e <strcmp>
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	79 f5       	brne	.+94     	; 0x82a <task_cmd+0x108>
		if (cp1 == NULL) {
     7cc:	e1 14       	cp	r14, r1
     7ce:	f1 04       	cpc	r15, r1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <task_cmd+0xb6>
			printf("!!!-222\n");
     7d2:	82 e8       	ldi	r24, 0x82	; 130
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	37 c0       	rjmp	.+110    	; 0x846 <task_cmd+0x124>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     7d8:	c7 01       	movw	r24, r14
     7da:	0e 94 9c 0c 	call	0x1938	; 0x1938 <atoi>
     7de:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     7e0:	c5 01       	movw	r24, r10
     7e2:	66 e7       	ldi	r22, 0x76	; 118
     7e4:	72 e0       	ldi	r23, 0x02	; 2
     7e6:	0e 94 bf 0c 	call	0x197e	; 0x197e <strcmp>
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	d9 f4       	brne	.+54     	; 0x824 <task_cmd+0x102>
			task.fun = task_prime;
     7ee:	81 e9       	ldi	r24, 0x91	; 145
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
			if(cp3) strcpy(task.arg, cp3);
     7f6:	ce 01       	movw	r24, r28
     7f8:	03 96       	adiw	r24, 0x03	; 3
     7fa:	c1 14       	cp	r12, r1
     7fc:	d1 04       	cpc	r13, r1
     7fe:	11 f0       	breq	.+4      	; 0x804 <task_cmd+0xe2>
     800:	b6 01       	movw	r22, r12
     802:	02 c0       	rjmp	.+4      	; 0x808 <task_cmd+0xe6>
			else strcpy(task.arg, "");
     804:	6a e8       	ldi	r22, 0x8A	; 138
     806:	72 e0       	ldi	r23, 0x02	; 2
     808:	0e 94 c8 0c 	call	0x1990	; 0x1990 <strcpy>
			cli();
     80c:	f8 94       	cli
		if (cp1 == NULL) {
			printf("!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     80e:	c8 01       	movw	r24, r16
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	71 e0       	ldi	r23, 0x01	; 1
     814:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3) strcpy(task.arg, cp3);
			else strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     818:	ce 01       	movw	r24, r28
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	0e 94 af 04 	call	0x95e	; 0x95e <insert_timer>
			sei();
     820:	78 94       	sei
     822:	13 c0       	rjmp	.+38     	; 0x84a <task_cmd+0x128>
		}
		else printf("!!!-333\n");
     824:	8b e8       	ldi	r24, 0x8B	; 139
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	0e c0       	rjmp	.+28     	; 0x846 <task_cmd+0x124>
	}

	else if (!strcmp(cp0, "tc1047"))
     82a:	c8 01       	movw	r24, r16
     82c:	63 e9       	ldi	r22, 0x93	; 147
     82e:	72 e0       	ldi	r23, 0x02	; 2
     830:	0e 94 bf 0c 	call	0x197e	; 0x197e <strcmp>
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	29 f4       	brne	.+10     	; 0x842 <task_cmd+0x120>
		task_tc1047("");
     838:	8a e8       	ldi	r24, 0x8A	; 138
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	0e 94 41 03 	call	0x682	; 0x682 <task_tc1047>
     840:	04 c0       	rjmp	.+8      	; 0x84a <task_cmd+0x128>

	else printf("Unknown command...\n");
     842:	8a e9       	ldi	r24, 0x9A	; 154
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <puts>

	printf("$ ");
     84a:	0f 92       	push	r0
     84c:	0f 92       	push	r0
     84e:	83 e7       	ldi	r24, 0x73	; 115
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	ed b7       	in	r30, 0x3d	; 61
     854:	fe b7       	in	r31, 0x3e	; 62
     856:	92 83       	std	Z+2, r25	; 0x02
     858:	81 83       	std	Z+1, r24	; 0x01
     85a:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
}
     862:	c6 5b       	subi	r28, 0xB6	; 182
     864:	df 4f       	sbci	r29, 0xFF	; 255
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	08 95       	ret

00000886 <timer_init>:
#include "Timer_linked_list.h"
#include "Task_queue.h"

void timer_init()
{
	TCNT2 = 0;					// Timer/Counter Register of Timer 2
     886:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1 << AS2);			// Asynchronous Status Register(Asynchronous Timer/Counter 2
     88a:	e6 eb       	ldi	r30, 0xB6	; 182
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	80 62       	ori	r24, 0x20	; 32
     892:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2);		// Timer/Counter Interrupt Mask Register of timer 2
     894:	e0 e7       	ldi	r30, 0x70	; 112
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	81 60       	ori	r24, 0x01	; 1
     89c:	80 83       	st	Z, r24
	// Timer/Counter Control Register B of timer 2
	TCCR2B |= (1 << CS20);	TCCR2B |= (1 << CS21);	// 32KHz/32 prescaling, clock 1KHz
     89e:	e1 eb       	ldi	r30, 0xB1	; 177
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	81 60       	ori	r24, 0x01	; 1
     8a6:	80 83       	st	Z, r24
     8a8:	80 81       	ld	r24, Z
     8aa:	82 60       	ori	r24, 0x02	; 2
     8ac:	80 83       	st	Z, r24
}
     8ae:	08 95       	ret

000008b0 <timer_expire>:

void timer_expire()
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     8b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     8b8:	9d 85       	ldd	r25, Y+13	; 0x0d
     8ba:	90 93 f0 03 	sts	0x03F0, r25
     8be:	80 93 ef 03 	sts	0x03EF, r24

		task_insert(&tp->task);
     8c2:	ce 01       	movw	r24, r28
     8c4:	02 96       	adiw	r24, 0x02	; 2
     8c6:	0e 94 cc 02 	call	0x598	; 0x598 <task_insert>

		free(tp);
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 03 0c 	call	0x1806	; 0x1806 <free>

void timer_expire()
{
	struct timer *tp;

	for( ; Thead != NULL && !Thead->time; ) {
     8d0:	c0 91 ef 03 	lds	r28, 0x03EF
     8d4:	d0 91 f0 03 	lds	r29, 0x03F0
     8d8:	20 97       	sbiw	r28, 0x00	; 0
     8da:	21 f0       	breq	.+8      	; 0x8e4 <timer_expire+0x34>
     8dc:	88 81       	ld	r24, Y
     8de:	99 81       	ldd	r25, Y+1	; 0x01
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	49 f3       	breq	.-46     	; 0x8b6 <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <__vector_15>:

////////////////////////////////
ISR(TIMER2_OVF_vect)
{
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	0b b6       	in	r0, 0x3b	; 59
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
	if (!Thead)
     910:	e0 91 ef 03 	lds	r30, 0x03EF
     914:	f0 91 f0 03 	lds	r31, 0x03F0
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	49 f0       	breq	.+18     	; 0x92e <__vector_15+0x44>
		return;
	if (--Thead->time == 0)
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	80 83       	st	Z, r24
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	11 f4       	brne	.+4      	; 0x92e <__vector_15+0x44>
		timer_expire();
     92a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <timer_expire>
}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	bf 91       	pop	r27
     934:	af 91       	pop	r26
     936:	9f 91       	pop	r25
     938:	8f 91       	pop	r24
     93a:	7f 91       	pop	r23
     93c:	6f 91       	pop	r22
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0b be       	out	0x3b, r0	; 59
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     954:	8e e0       	ldi	r24, 0x0E	; 14
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 6d 0b 	call	0x16da	; 0x16da <malloc>
	return tp;
}
     95c:	08 95       	ret

0000095e <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	f8 2e       	mov	r15, r24
     96c:	e9 2e       	mov	r14, r25
     96e:	8b 01       	movw	r16, r22
	int 		 total;
	struct timer *tp, *cp, *pp;	// timer, current, previous pointer

	tp = get_timer();
     970:	0e 94 aa 04 	call	0x954	; 0x954 <get_timer>
     974:	dc 01       	movw	r26, r24
	tp->task = *tskp;	// task pointer
     976:	fc 01       	movw	r30, r24
     978:	32 96       	adiw	r30, 0x02	; 2
     97a:	cf 2d       	mov	r28, r15
     97c:	de 2d       	mov	r29, r14
     97e:	8a e0       	ldi	r24, 0x0A	; 10
     980:	09 90       	ld	r0, Y+
     982:	01 92       	st	Z+, r0
     984:	81 50       	subi	r24, 0x01	; 1
     986:	e1 f7       	brne	.-8      	; 0x980 <insert_timer+0x22>
	tp->time = ms;
     988:	11 96       	adiw	r26, 0x01	; 1
     98a:	1c 93       	st	X, r17
     98c:	0e 93       	st	-X, r16

	if (Thead == NULL) {	// list empty
     98e:	c0 91 ef 03 	lds	r28, 0x03EF
     992:	d0 91 f0 03 	lds	r29, 0x03F0
     996:	20 97       	sbiw	r28, 0x00	; 0
     998:	29 f4       	brne	.+10     	; 0x9a4 <insert_timer+0x46>
		Thead = tp, tp->link = NULL;
     99a:	b0 93 f0 03 	sts	0x03F0, r27
     99e:	a0 93 ef 03 	sts	0x03EF, r26
     9a2:	30 c0       	rjmp	.+96     	; 0xa04 <insert_timer+0xa6>

	tp = get_timer();
	tp->task = *tskp;	// task pointer
	tp->time = ms;

	if (Thead == NULL) {	// list empty
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <insert_timer+0x52>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     9ae:	ef 01       	movw	r28, r30
		total += cp->time;
     9b0:	88 81       	ld	r24, Y
     9b2:	99 81       	ldd	r25, Y+1	; 0x01
     9b4:	48 0f       	add	r20, r24
     9b6:	59 1f       	adc	r21, r25
		if (total >= ms)
     9b8:	40 17       	cp	r20, r16
     9ba:	51 07       	cpc	r21, r17
     9bc:	34 f4       	brge	.+12     	; 0x9ca <insert_timer+0x6c>
		Thead = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     9be:	ec 85       	ldd	r30, Y+12	; 0x0c
     9c0:	fd 85       	ldd	r31, Y+13	; 0x0d
     9c2:	9e 01       	movw	r18, r28
     9c4:	30 97       	sbiw	r30, 0x00	; 0
     9c6:	99 f7       	brne	.-26     	; 0x9ae <insert_timer+0x50>
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <insert_timer+0x6e>
		total += cp->time;
		if (total >= ms)
     9ca:	fe 01       	movw	r30, r28
			break;
		pp = cp;
	}
	if (pp == NULL) {	// First insert
     9cc:	21 15       	cp	r18, r1
     9ce:	31 05       	cpc	r19, r1
     9d0:	79 f4       	brne	.+30     	; 0x9f0 <insert_timer+0x92>
		cp->time -= tp->time;
     9d2:	80 81       	ld	r24, Z
     9d4:	91 81       	ldd	r25, Z+1	; 0x01
     9d6:	80 1b       	sub	r24, r16
     9d8:	91 0b       	sbc	r25, r17
     9da:	91 83       	std	Z+1, r25	; 0x01
     9dc:	80 83       	st	Z, r24
		tp->link = cp, Thead = tp;
     9de:	1d 96       	adiw	r26, 0x0d	; 13
     9e0:	fc 93       	st	X, r31
     9e2:	ee 93       	st	-X, r30
     9e4:	1c 97       	sbiw	r26, 0x0c	; 12
     9e6:	b0 93 f0 03 	sts	0x03F0, r27
     9ea:	a0 93 ef 03 	sts	0x03EF, r26
     9ee:	19 c0       	rjmp	.+50     	; 0xa22 <insert_timer+0xc4>
	}
	else if (cp == NULL) {	// Last insert
     9f0:	30 97       	sbiw	r30, 0x00	; 0
     9f2:	69 f4       	brne	.+26     	; 0xa0e <insert_timer+0xb0>
		tp->time -= total;	// pp->time
     9f4:	04 1b       	sub	r16, r20
     9f6:	15 0b       	sbc	r17, r21
     9f8:	11 96       	adiw	r26, 0x01	; 1
     9fa:	1c 93       	st	X, r17
     9fc:	0e 93       	st	-X, r16
		pp->link = tp;
     9fe:	e9 01       	movw	r28, r18
     a00:	bd 87       	std	Y+13, r27	; 0x0d
     a02:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = NULL;
     a04:	1d 96       	adiw	r26, 0x0d	; 13
     a06:	1c 92       	st	X, r1
     a08:	1e 92       	st	-X, r1
     a0a:	1c 97       	sbiw	r26, 0x0c	; 12
     a0c:	0a c0       	rjmp	.+20     	; 0xa22 <insert_timer+0xc4>
	}
	else {	// Middle insert
		total -= cp->time;	// just before
		tp->time -= tp->time;
     a0e:	11 96       	adiw	r26, 0x01	; 1
     a10:	1c 92       	st	X, r1
     a12:	1e 92       	st	-X, r1
		pp->link = tp;
     a14:	e9 01       	movw	r28, r18
     a16:	bd 87       	std	Y+13, r27	; 0x0d
     a18:	ac 87       	std	Y+12, r26	; 0x0c
		tp->link = cp;
     a1a:	1d 96       	adiw	r26, 0x0d	; 13
     a1c:	fc 93       	st	X, r31
     a1e:	ee 93       	st	-X, r30
     a20:	1c 97       	sbiw	r26, 0x0c	; 12
	}
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	08 95       	ret

00000a30 <tour_timer>:

void tour_timer()
{
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     a44:	c0 91 ef 03 	lds	r28, 0x03EF
     a48:	d0 91 f0 03 	lds	r29, 0x03F0
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     a50:	8d ea       	ldi	r24, 0xAD	; 173
     a52:	e8 2e       	mov	r14, r24
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     a58:	20 c0       	rjmp	.+64     	; 0xa9a <tour_timer+0x6a>
		total += cp->time;
     a5a:	88 81       	ld	r24, Y
     a5c:	99 81       	ldd	r25, Y+1	; 0x01
     a5e:	08 0f       	add	r16, r24
     a60:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     a62:	00 d0       	rcall	.+0      	; 0xa64 <tour_timer+0x34>
     a64:	00 d0       	rcall	.+0      	; 0xa66 <tour_timer+0x36>
     a66:	ed b7       	in	r30, 0x3d	; 61
     a68:	fe b7       	in	r31, 0x3e	; 62
     a6a:	31 96       	adiw	r30, 0x01	; 1
     a6c:	ad b7       	in	r26, 0x3d	; 61
     a6e:	be b7       	in	r27, 0x3e	; 62
     a70:	12 96       	adiw	r26, 0x02	; 2
     a72:	fc 92       	st	X, r15
     a74:	ee 92       	st	-X, r14
     a76:	11 97       	sbiw	r26, 0x01	; 1
     a78:	93 83       	std	Z+3, r25	; 0x03
     a7a:	82 83       	std	Z+2, r24	; 0x02
     a7c:	15 83       	std	Z+5, r17	; 0x05
     a7e:	04 83       	std	Z+4, r16	; 0x04
     a80:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link)	{
     a84:	0c 84       	ldd	r0, Y+12	; 0x0c
     a86:	dd 85       	ldd	r29, Y+13	; 0x0d
     a88:	c0 2d       	mov	r28, r0
     a8a:	8d b7       	in	r24, 0x3d	; 61
     a8c:	9e b7       	in	r25, 0x3e	; 62
     a8e:	06 96       	adiw	r24, 0x06	; 6
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	9e bf       	out	0x3e, r25	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	8d bf       	out	0x3d, r24	; 61
     a9a:	20 97       	sbiw	r28, 0x00	; 0
     a9c:	f1 f6       	brne	.-68     	; 0xa5a <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <putchar>
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	08 95       	ret

00000ab4 <free_timer>:

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     ab4:	09 c0       	rjmp	.+18     	; 0xac8 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     ab6:	fc 01       	movw	r30, r24
     ab8:	24 85       	ldd	r18, Z+12	; 0x0c
     aba:	35 85       	ldd	r19, Z+13	; 0x0d
     abc:	30 93 f0 03 	sts	0x03F0, r19
     ac0:	20 93 ef 03 	sts	0x03EF, r18
		free(cp);
     ac4:	0e 94 03 0c 	call	0x1806	; 0x1806 <free>

void free_timer()
{
	struct timer *cp;

	for ( ; Thead != NULL; ) {
     ac8:	80 91 ef 03 	lds	r24, 0x03EF
     acc:	90 91 f0 03 	lds	r25, 0x03F0
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	89 f7       	brne	.-30     	; 0xab6 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     ad4:	08 95       	ret

00000ad6 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     ad6:	f8 94       	cli
		ch = qi_delete();
     ad8:	0e 94 a0 06 	call	0xd40	; 0xd40 <qi_delete>
		sei();
     adc:	78 94       	sei
	} while (ch == 0);
     ade:	88 23       	and	r24, r24
     ae0:	d1 f3       	breq	.-12     	; 0xad6 <uart_getchar>

	if (ch == E0T) return -1;
     ae2:	84 30       	cpi	r24, 0x04	; 4
     ae4:	11 f0       	breq	.+4      	; 0xaea <uart_getchar+0x14>
	else 		   return ch;
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return ch;
}
     aee:	08 95       	ret

00000af0 <uart_putchar>:
	sbi(UCSR0B, RXEN0);				// RX enable
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
}

int uart_putchar(char ch, FILE *stream)
{
     af0:	cf 93       	push	r28
     af2:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     af4:	8a 30       	cpi	r24, 0x0A	; 10
     af6:	19 f4       	brne	.+6      	; 0xafe <uart_putchar+0xe>
     af8:	8d e0       	ldi	r24, 0x0D	; 13
     afa:	0e 94 78 05 	call	0xaf0	; 0xaf0 <uart_putchar>
	cli();
     afe:	f8 94       	cli
	if(!uart_busy) {
     b00:	80 91 97 04 	lds	r24, 0x0497
     b04:	88 23       	and	r24, r24
     b06:	59 f4       	brne	.+22     	; 0xb1e <uart_putchar+0x2e>
		UDR0 = ch;
     b08:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 97 04 	sts	0x0497, r24
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     b14:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	86 ef       	ldi	r24, 0xF6	; 246
     b18:	8a 95       	dec	r24
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     b1c:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     b1e:	8c 2f       	mov	r24, r28
     b20:	0e 94 bd 06 	call	0xd7a	; 0xd7a <qo_insert>
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	b1 f3       	breq	.-20     	; 0xb14 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     b28:	78 94       	sei
	return 1;
}
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <uart_init>:
char uart_busy;
static int echo_mode = 1;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     b32:	89 eb       	ldi	r24, 0xB9	; 185
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	90 93 25 05 	sts	0x0525, r25
     b3a:	80 93 24 05 	sts	0x0524, r24
     b3e:	87 ec       	ldi	r24, 0xC7	; 199
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	90 93 27 05 	sts	0x0527, r25
     b46:	80 93 26 05 	sts	0x0526, r24
	q_init();
     b4a:	0e 94 6d 06 	call	0xcda	; 0xcda <q_init>
	uart_busy = 0;
     b4e:	10 92 97 04 	sts	0x0497, r1

	UBRR0H = 0x00; UBRR0L = 0x03;	// 115.2Kbps
     b52:	10 92 c5 00 	sts	0x00C5, r1
     b56:	83 e0       	ldi	r24, 0x03	; 3
     b58:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0B, TXEN0);				// TX enable
     b5c:	e1 ec       	ldi	r30, 0xC1	; 193
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	88 60       	ori	r24, 0x08	; 8
     b64:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);			// TX complete interrupt
     b66:	80 81       	ld	r24, Z
     b68:	80 64       	ori	r24, 0x40	; 64
     b6a:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);				// RX enable
     b6c:	80 81       	ld	r24, Z
     b6e:	80 61       	ori	r24, 0x10	; 16
     b70:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
     b72:	80 81       	ld	r24, Z
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	80 83       	st	Z, r24
}
     b78:	08 95       	ret

00000b7a <uart_echo>:
	if (ch == E0T) return -1;
	else 		   return ch;
}

void uart_echo(char ch)
{
     b7a:	cf 93       	push	r28
     b7c:	c8 2f       	mov	r28, r24
	if (ch == '\n')	uart_echo( '\r' );
     b7e:	8a 30       	cpi	r24, 0x0A	; 10
     b80:	19 f4       	brne	.+6      	; 0xb88 <uart_echo+0xe>
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	0e 94 bd 05 	call	0xb7a	; 0xb7a <uart_echo>
	if (!uart_busy) {
     b88:	80 91 97 04 	lds	r24, 0x0497
     b8c:	88 23       	and	r24, r24
     b8e:	31 f4       	brne	.+12     	; 0xb9c <uart_echo+0x22>
		UDR0 = ch;
     b90:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	80 93 97 04 	sts	0x0497, r24
     b9a:	03 c0       	rjmp	.+6      	; 0xba2 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     b9c:	8c 2f       	mov	r24, r28
     b9e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <qo_insert>

}
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <uart_peek>:

int uart_peek()
{
	return qi_peek();
     ba6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <qi_peek>
}
     baa:	08 95       	ret

00000bac <__vector_27>:

////////////////////////////////////////////
ISR(USART0_TX_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	char ch;

	if ((ch = qo_delete()) == 0)
     bd2:	0e 94 df 06 	call	0xdbe	; 0xdbe <qo_delete>
     bd6:	88 23       	and	r24, r24
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <__vector_27+0x34>
		uart_busy = 0;
     bda:	10 92 97 04 	sts	0x0497, r1
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <__vector_27+0x38>
	else
		UDR0 = ch;
     be0:	80 93 c6 00 	sts	0x00C6, r24
}
     be4:	ff 91       	pop	r31
     be6:	ef 91       	pop	r30
     be8:	bf 91       	pop	r27
     bea:	af 91       	pop	r26
     bec:	9f 91       	pop	r25
     bee:	8f 91       	pop	r24
     bf0:	7f 91       	pop	r23
     bf2:	6f 91       	pop	r22
     bf4:	5f 91       	pop	r21
     bf6:	4f 91       	pop	r20
     bf8:	3f 91       	pop	r19
     bfa:	2f 91       	pop	r18
     bfc:	0f 90       	pop	r0
     bfe:	0b be       	out	0x3b, r0	; 59
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <__vector_25>:

ISR(USART0_RX_vect)
{
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	0b b6       	in	r0, 0x3b	; 59
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	1f 93       	push	r17
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	2a 97       	sbiw	r28, 0x0a	; 10
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     c40:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch == ESC) {
     c44:	1b 31       	cpi	r17, 0x1B	; 27
     c46:	61 f4       	brne	.+24     	; 0xc60 <__vector_25+0x56>
		echo_mode = ((echo_mode+1) & 0x01);
     c48:	80 91 d5 02 	lds	r24, 0x02D5
     c4c:	90 91 d6 02 	lds	r25, 0x02D6
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	81 70       	andi	r24, 0x01	; 1
     c54:	90 70       	andi	r25, 0x00	; 0
     c56:	90 93 d6 02 	sts	0x02D6, r25
     c5a:	80 93 d5 02 	sts	0x02D5, r24
		return;
     c5e:	24 c0       	rjmp	.+72     	; 0xca8 <__vector_25+0x9e>
	}
	if (ch != EOT) {
     c60:	14 30       	cpi	r17, 0x04	; 4
     c62:	69 f0       	breq	.+26     	; 0xc7e <__vector_25+0x74>
		if (ch == '\r') ch = '\n';
     c64:	1d 30       	cpi	r17, 0x0D	; 13
     c66:	09 f4       	brne	.+2      	; 0xc6a <__vector_25+0x60>
     c68:	1a e0       	ldi	r17, 0x0A	; 10
		if (echo_mode) uart_echo(ch);
     c6a:	20 91 d5 02 	lds	r18, 0x02D5
     c6e:	30 91 d6 02 	lds	r19, 0x02D6
     c72:	21 15       	cp	r18, r1
     c74:	31 05       	cpc	r19, r1
     c76:	19 f0       	breq	.+6      	; 0xc7e <__vector_25+0x74>
     c78:	81 2f       	mov	r24, r17
     c7a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <uart_echo>
	}
	qi_insert(ch);
     c7e:	81 2f       	mov	r24, r17
     c80:	0e 94 7e 06 	call	0xcfc	; 0xcfc <qi_insert>
	if (ch == EOT || ch == '\n') {
     c84:	14 30       	cpi	r17, 0x04	; 4
     c86:	11 f0       	breq	.+4      	; 0xc8c <__vector_25+0x82>
     c88:	1a 30       	cpi	r17, 0x0A	; 10
     c8a:	71 f4       	brne	.+28     	; 0xca8 <__vector_25+0x9e>
		task.fun = task_cmd;
     c8c:	81 e9       	ldi	r24, 0x91	; 145
     c8e:	93 e0       	ldi	r25, 0x03	; 3
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     c94:	ce 01       	movw	r24, r28
     c96:	03 96       	adiw	r24, 0x03	; 3
     c98:	68 eb       	ldi	r22, 0xB8	; 184
     c9a:	72 e0       	ldi	r23, 0x02	; 2
     c9c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <strcpy>
		task_insert(&task);
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	0e 94 cc 02 	call	0x598	; 0x598 <task_insert>
	}
}
     ca8:	2a 96       	adiw	r28, 0x0a	; 10
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	bf 91       	pop	r27
     cb8:	af 91       	pop	r26
     cba:	9f 91       	pop	r25
     cbc:	8f 91       	pop	r24
     cbe:	7f 91       	pop	r23
     cc0:	6f 91       	pop	r22
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	1f 91       	pop	r17
     ccc:	0f 90       	pop	r0
     cce:	0b be       	out	0x3b, r0	; 59
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     cda:	10 92 dd 04 	sts	0x04DD, r1
     cde:	10 92 dc 04 	sts	0x04DC, r1
     ce2:	10 92 db 04 	sts	0x04DB, r1
     ce6:	10 92 da 04 	sts	0x04DA, r1
     cea:	10 92 df 04 	sts	0x04DF, r1
     cee:	10 92 de 04 	sts	0x04DE, r1
     cf2:	10 92 99 04 	sts	0x0499, r1
     cf6:	10 92 98 04 	sts	0x0498, r1
}
     cfa:	08 95       	ret

00000cfc <qi_insert>:

int qi_insert(char ch)
{
     cfc:	48 2f       	mov	r20, r24
	if ((ri + 1) % QI_SIZE == fi)
     cfe:	20 91 de 04 	lds	r18, 0x04DE
     d02:	30 91 df 04 	lds	r19, 0x04DF
     d06:	2f 5f       	subi	r18, 0xFF	; 255
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	c9 01       	movw	r24, r18
     d0c:	60 e4       	ldi	r22, 0x40	; 64
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     d14:	9c 01       	movw	r18, r24
     d16:	80 91 98 04 	lds	r24, 0x0498
     d1a:	90 91 99 04 	lds	r25, 0x0499
     d1e:	28 17       	cp	r18, r24
     d20:	39 07       	cpc	r19, r25
     d22:	59 f0       	breq	.+22     	; 0xd3a <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     d24:	30 93 df 04 	sts	0x04DF, r19
     d28:	20 93 de 04 	sts	0x04DE, r18
	qi[ri] = ch;
     d2c:	20 52       	subi	r18, 0x20	; 32
     d2e:	3b 4f       	sbci	r19, 0xFB	; 251
     d30:	f9 01       	movw	r30, r18
     d32:	40 83       	st	Z, r20
	return 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri + 1) % QI_SIZE == fi)
		return 0;
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     d3e:	08 95       	ret

00000d40 <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     d40:	80 91 98 04 	lds	r24, 0x0498
     d44:	90 91 99 04 	lds	r25, 0x0499
     d48:	20 91 de 04 	lds	r18, 0x04DE
     d4c:	30 91 df 04 	lds	r19, 0x04DF
     d50:	28 17       	cp	r18, r24
     d52:	39 07       	cpc	r19, r25
     d54:	79 f0       	breq	.+30     	; 0xd74 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	60 e4       	ldi	r22, 0x40	; 64
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     d60:	90 93 99 04 	sts	0x0499, r25
     d64:	80 93 98 04 	sts	0x0498, r24
	return qi[fi];
     d68:	80 52       	subi	r24, 0x20	; 32
     d6a:	9b 4f       	sbci	r25, 0xFB	; 251
     d6c:	fc 01       	movw	r30, r24
     d6e:	80 81       	ld	r24, Z
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     d78:	08 95       	ret

00000d7a <qo_insert>:

int qo_insert(char ch)
{
     d7a:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     d7c:	20 91 dc 04 	lds	r18, 0x04DC
     d80:	30 91 dd 04 	lds	r19, 0x04DD
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	c9 01       	movw	r24, r18
     d8a:	60 e4       	ldi	r22, 0x40	; 64
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     d92:	9c 01       	movw	r18, r24
     d94:	80 91 da 04 	lds	r24, 0x04DA
     d98:	90 91 db 04 	lds	r25, 0x04DB
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	59 f0       	breq	.+22     	; 0xdb8 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     da2:	30 93 dd 04 	sts	0x04DD, r19
     da6:	20 93 dc 04 	sts	0x04DC, r18
	qo[ro] = ch;
     daa:	26 56       	subi	r18, 0x66	; 102
     dac:	3b 4f       	sbci	r19, 0xFB	; 251
     dae:	f9 01       	movw	r30, r18
     db0:	40 83       	st	Z, r20
	return 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     dbc:	08 95       	ret

00000dbe <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     dbe:	80 91 da 04 	lds	r24, 0x04DA
     dc2:	90 91 db 04 	lds	r25, 0x04DB
     dc6:	20 91 dc 04 	lds	r18, 0x04DC
     dca:	30 91 dd 04 	lds	r19, 0x04DD
     dce:	28 17       	cp	r18, r24
     dd0:	39 07       	cpc	r19, r25
     dd2:	79 f0       	breq	.+30     	; 0xdf2 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	60 e4       	ldi	r22, 0x40	; 64
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	0e 94 0f 0b 	call	0x161e	; 0x161e <__divmodhi4>
     dde:	90 93 db 04 	sts	0x04DB, r25
     de2:	80 93 da 04 	sts	0x04DA, r24
	return qo[fo];
     de6:	86 56       	subi	r24, 0x66	; 102
     de8:	9b 4f       	sbci	r25, 0xFB	; 251
     dea:	fc 01       	movw	r30, r24
     dec:	80 81       	ld	r24, Z
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     df6:	08 95       	ret

00000df8 <qi_peek>:

int qi_peek()
{
	if (fi == ri)
     df8:	80 91 98 04 	lds	r24, 0x0498
     dfc:	90 91 99 04 	lds	r25, 0x0499
     e00:	20 91 de 04 	lds	r18, 0x04DE
     e04:	30 91 df 04 	lds	r19, 0x04DF
     e08:	82 17       	cp	r24, r18
     e0a:	93 07       	cpc	r25, r19
     e0c:	41 f0       	breq	.+16     	; 0xe1e <qi_peek+0x26>
		return 0;
	else
		return(qi[fi + 1] % QI_SIZE);
     e0e:	80 52       	subi	r24, 0x20	; 32
     e10:	9b 4f       	sbci	r25, 0xFB	; 251
     e12:	fc 01       	movw	r30, r24
     e14:	81 81       	ldd	r24, Z+1	; 0x01
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	8f 73       	andi	r24, 0x3F	; 63
     e1a:	90 70       	andi	r25, 0x00	; 0
     e1c:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[fi + 1] % QI_SIZE);
}
     e22:	08 95       	ret

00000e24 <adc_init>:
#include <avr/interrupt.h>
#include "task_queue.h"

void adc_init()
{
	cbi(DDRF, PF0);			// input PF0(=ADC0)GPIO
     e24:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;	// Ref : 1.1v, Port : PF0
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	80 93 7c 00 	sts	0x007C, r24
}
     e2c:	08 95       	ret

00000e2e <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);		// ADC enable
     e2e:	ea e7       	ldi	r30, 0x7A	; 122
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 68       	ori	r24, 0x80	; 128
     e36:	80 83       	st	Z, r24
     e38:	8d ed       	ldi	r24, 0xDD	; 221
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <adc_start+0xe>
	_delay_us(120);			// warming up
	sbi(ADCSRA, ADIE);		// ADC interruput enable
     e40:	80 81       	ld	r24, Z
     e42:	88 60       	ori	r24, 0x08	; 8
     e44:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);		// start conversion
     e46:	80 81       	ld	r24, Z
     e48:	80 64       	ori	r24, 0x40	; 64
     e4a:	80 83       	st	Z, r24
}
     e4c:	08 95       	ret

00000e4e <__vector_29>:

////////////////////////////////////////////
ISR(ADC_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	0b b6       	in	r0, 0x3b	; 59
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	28 97       	sbiw	r28, 0x08	; 8
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	cd bf       	out	0x3d, r28	; 61
	uint16_t data;
	char	 arg[8];

	data = ADCW & 0x03ff;
     e86:	80 91 78 00 	lds	r24, 0x0078
     e8a:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);		// ADC stop
     e8e:	ea e7       	ldi	r30, 0x7A	; 122
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	20 81       	ld	r18, Z
     e94:	2f 77       	andi	r18, 0x7F	; 127
     e96:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     e98:	00 d0       	rcall	.+0      	; 0xe9a <__vector_29+0x4c>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <__vector_29+0x4e>
     e9c:	ed b7       	in	r30, 0x3d	; 61
     e9e:	fe b7       	in	r31, 0x3e	; 62
     ea0:	31 96       	adiw	r30, 0x01	; 1
     ea2:	8e 01       	movw	r16, r28
     ea4:	0f 5f       	subi	r16, 0xFF	; 255
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	ad b7       	in	r26, 0x3d	; 61
     eaa:	be b7       	in	r27, 0x3e	; 62
     eac:	12 96       	adiw	r26, 0x02	; 2
     eae:	1c 93       	st	X, r17
     eb0:	0e 93       	st	-X, r16
     eb2:	11 97       	sbiw	r26, 0x01	; 1
     eb4:	27 ed       	ldi	r18, 0xD7	; 215
     eb6:	32 e0       	ldi	r19, 0x02	; 2
     eb8:	33 83       	std	Z+3, r19	; 0x03
     eba:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t data;
	char	 arg[8];

	data = ADCW & 0x03ff;
     ebc:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);		// ADC stop

	sprintf(arg, "%d", data);
     ebe:	95 83       	std	Z+5, r25	; 0x05
     ec0:	84 83       	std	Z+4, r24	; 0x04
     ec2:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <sprintf>

	task_tc1047(arg);
     ec6:	8d b7       	in	r24, 0x3d	; 61
     ec8:	9e b7       	in	r25, 0x3e	; 62
     eca:	06 96       	adiw	r24, 0x06	; 6
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	9e bf       	out	0x3e, r25	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	8d bf       	out	0x3d, r24	; 61
     ed6:	c8 01       	movw	r24, r16
     ed8:	0e 94 41 03 	call	0x682	; 0x682 <task_tc1047>
}
     edc:	28 96       	adiw	r28, 0x08	; 8
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	ff 91       	pop	r31
     ee8:	ef 91       	pop	r30
     eea:	bf 91       	pop	r27
     eec:	af 91       	pop	r26
     eee:	9f 91       	pop	r25
     ef0:	8f 91       	pop	r24
     ef2:	7f 91       	pop	r23
     ef4:	6f 91       	pop	r22
     ef6:	5f 91       	pop	r21
     ef8:	4f 91       	pop	r20
     efa:	3f 91       	pop	r19
     efc:	2f 91       	pop	r18
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	0f 90       	pop	r0
     f04:	0b be       	out	0x3b, r0	; 59
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	1f 90       	pop	r1
     f0e:	18 95       	reti

00000f10 <__mulsf3>:
     f10:	a0 e2       	ldi	r26, 0x20	; 32
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ee e8       	ldi	r30, 0x8E	; 142
     f16:	f7 e0       	ldi	r31, 0x07	; 7
     f18:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__prologue_saves__+0x4>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	9e 83       	std	Y+6, r25	; 0x06
     f24:	af 83       	std	Y+7, r26	; 0x07
     f26:	b8 87       	std	Y+8, r27	; 0x08
     f28:	29 83       	std	Y+1, r18	; 0x01
     f2a:	3a 83       	std	Y+2, r19	; 0x02
     f2c:	4b 83       	std	Y+3, r20	; 0x03
     f2e:	5c 83       	std	Y+4, r21	; 0x04
     f30:	ce 01       	movw	r24, r28
     f32:	05 96       	adiw	r24, 0x05	; 5
     f34:	be 01       	movw	r22, r28
     f36:	67 5e       	subi	r22, 0xE7	; 231
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__unpack_f>
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	be 01       	movw	r22, r28
     f44:	6f 5e       	subi	r22, 0xEF	; 239
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__unpack_f>
     f4c:	99 8d       	ldd	r25, Y+25	; 0x19
     f4e:	92 30       	cpi	r25, 0x02	; 2
     f50:	78 f0       	brcs	.+30     	; 0xf70 <__mulsf3+0x60>
     f52:	89 89       	ldd	r24, Y+17	; 0x11
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	c0 f0       	brcs	.+48     	; 0xf88 <__mulsf3+0x78>
     f58:	94 30       	cpi	r25, 0x04	; 4
     f5a:	19 f4       	brne	.+6      	; 0xf62 <__mulsf3+0x52>
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	41 f4       	brne	.+16     	; 0xf70 <__mulsf3+0x60>
     f60:	ca c0       	rjmp	.+404    	; 0x10f6 <__mulsf3+0x1e6>
     f62:	84 30       	cpi	r24, 0x04	; 4
     f64:	19 f4       	brne	.+6      	; 0xf6c <__mulsf3+0x5c>
     f66:	92 30       	cpi	r25, 0x02	; 2
     f68:	79 f4       	brne	.+30     	; 0xf88 <__mulsf3+0x78>
     f6a:	c5 c0       	rjmp	.+394    	; 0x10f6 <__mulsf3+0x1e6>
     f6c:	92 30       	cpi	r25, 0x02	; 2
     f6e:	51 f4       	brne	.+20     	; 0xf84 <__mulsf3+0x74>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f74:	9a 89       	ldd	r25, Y+18	; 0x12
     f76:	29 17       	cp	r18, r25
     f78:	09 f4       	brne	.+2      	; 0xf7c <__mulsf3+0x6c>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	8a 8f       	std	Y+26, r24	; 0x1a
     f7e:	ce 01       	movw	r24, r28
     f80:	49 96       	adiw	r24, 0x19	; 25
     f82:	bb c0       	rjmp	.+374    	; 0x10fa <__mulsf3+0x1ea>
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	51 f4       	brne	.+20     	; 0xf9c <__mulsf3+0x8c>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f8c:	9a 89       	ldd	r25, Y+18	; 0x12
     f8e:	29 17       	cp	r18, r25
     f90:	09 f4       	brne	.+2      	; 0xf94 <__mulsf3+0x84>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	8a 8b       	std	Y+18, r24	; 0x12
     f96:	ce 01       	movw	r24, r28
     f98:	41 96       	adiw	r24, 0x11	; 17
     f9a:	af c0       	rjmp	.+350    	; 0x10fa <__mulsf3+0x1ea>
     f9c:	4d 8c       	ldd	r4, Y+29	; 0x1d
     f9e:	5e 8c       	ldd	r5, Y+30	; 0x1e
     fa0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     fa2:	78 a0       	lds	r23, 0x88
     fa4:	0d 89       	ldd	r16, Y+21	; 0x15
     fa6:	1e 89       	ldd	r17, Y+22	; 0x16
     fa8:	2f 89       	ldd	r18, Y+23	; 0x17
     faa:	38 8d       	ldd	r19, Y+24	; 0x18
     fac:	e0 e2       	ldi	r30, 0x20	; 32
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	ba 01       	movw	r22, r20
     fb6:	88 24       	eor	r8, r8
     fb8:	99 24       	eor	r9, r9
     fba:	54 01       	movw	r10, r8
     fbc:	cc 24       	eor	r12, r12
     fbe:	dd 24       	eor	r13, r13
     fc0:	76 01       	movw	r14, r12
     fc2:	c2 01       	movw	r24, r4
     fc4:	81 70       	andi	r24, 0x01	; 1
     fc6:	90 70       	andi	r25, 0x00	; 0
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	d1 f0       	breq	.+52     	; 0x1000 <__mulsf3+0xf0>
     fcc:	c0 0e       	add	r12, r16
     fce:	d1 1e       	adc	r13, r17
     fd0:	e2 1e       	adc	r14, r18
     fd2:	f3 1e       	adc	r15, r19
     fd4:	db 01       	movw	r26, r22
     fd6:	ca 01       	movw	r24, r20
     fd8:	88 0d       	add	r24, r8
     fda:	99 1d       	adc	r25, r9
     fdc:	aa 1d       	adc	r26, r10
     fde:	bb 1d       	adc	r27, r11
     fe0:	41 e0       	ldi	r20, 0x01	; 1
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	c0 16       	cp	r12, r16
     fea:	d1 06       	cpc	r13, r17
     fec:	e2 06       	cpc	r14, r18
     fee:	f3 06       	cpc	r15, r19
     ff0:	18 f0       	brcs	.+6      	; 0xff8 <__mulsf3+0xe8>
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	ba 01       	movw	r22, r20
     ff8:	48 0f       	add	r20, r24
     ffa:	59 1f       	adc	r21, r25
     ffc:	6a 1f       	adc	r22, r26
     ffe:	7b 1f       	adc	r23, r27
    1000:	88 0c       	add	r8, r8
    1002:	99 1c       	adc	r9, r9
    1004:	aa 1c       	adc	r10, r10
    1006:	bb 1c       	adc	r11, r11
    1008:	37 ff       	sbrs	r19, 7
    100a:	08 c0       	rjmp	.+16     	; 0x101c <__mulsf3+0x10c>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	a0 e0       	ldi	r26, 0x00	; 0
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	88 2a       	or	r8, r24
    1016:	99 2a       	or	r9, r25
    1018:	aa 2a       	or	r10, r26
    101a:	bb 2a       	or	r11, r27
    101c:	00 0f       	add	r16, r16
    101e:	11 1f       	adc	r17, r17
    1020:	22 1f       	adc	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	76 94       	lsr	r7
    1026:	67 94       	ror	r6
    1028:	57 94       	ror	r5
    102a:	47 94       	ror	r4
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	49 f6       	brne	.-110    	; 0xfc2 <__mulsf3+0xb2>
    1030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1034:	2b 89       	ldd	r18, Y+19	; 0x13
    1036:	3c 89       	ldd	r19, Y+20	; 0x14
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
    103c:	02 96       	adiw	r24, 0x02	; 2
    103e:	9c 87       	std	Y+12, r25	; 0x0c
    1040:	8b 87       	std	Y+11, r24	; 0x0b
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1046:	9a 89       	ldd	r25, Y+18	; 0x12
    1048:	29 17       	cp	r18, r25
    104a:	09 f4       	brne	.+2      	; 0x104e <__mulsf3+0x13e>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	8a 87       	std	Y+10, r24	; 0x0a
    1050:	2b 85       	ldd	r18, Y+11	; 0x0b
    1052:	3c 85       	ldd	r19, Y+12	; 0x0c
    1054:	17 c0       	rjmp	.+46     	; 0x1084 <__mulsf3+0x174>
    1056:	ca 01       	movw	r24, r20
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	61 f0       	breq	.+24     	; 0x1078 <__mulsf3+0x168>
    1060:	f6 94       	lsr	r15
    1062:	e7 94       	ror	r14
    1064:	d7 94       	ror	r13
    1066:	c7 94       	ror	r12
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e8       	ldi	r27, 0x80	; 128
    1070:	c8 2a       	or	r12, r24
    1072:	d9 2a       	or	r13, r25
    1074:	ea 2a       	or	r14, r26
    1076:	fb 2a       	or	r15, r27
    1078:	76 95       	lsr	r23
    107a:	67 95       	ror	r22
    107c:	57 95       	ror	r21
    107e:	47 95       	ror	r20
    1080:	2f 5f       	subi	r18, 0xFF	; 255
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	77 fd       	sbrc	r23, 7
    1086:	e7 cf       	rjmp	.-50     	; 0x1056 <__mulsf3+0x146>
    1088:	c9 01       	movw	r24, r18
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <__mulsf3+0x192>
    108c:	44 0f       	add	r20, r20
    108e:	55 1f       	adc	r21, r21
    1090:	66 1f       	adc	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	f7 fc       	sbrc	r15, 7
    1096:	41 60       	ori	r20, 0x01	; 1
    1098:	cc 0c       	add	r12, r12
    109a:	dd 1c       	adc	r13, r13
    109c:	ee 1c       	adc	r14, r14
    109e:	ff 1c       	adc	r15, r15
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	40 30       	cpi	r20, 0x00	; 0
    10a4:	a0 e0       	ldi	r26, 0x00	; 0
    10a6:	5a 07       	cpc	r21, r26
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	6a 07       	cpc	r22, r26
    10ac:	a0 e4       	ldi	r26, 0x40	; 64
    10ae:	7a 07       	cpc	r23, r26
    10b0:	68 f3       	brcs	.-38     	; 0x108c <__mulsf3+0x17c>
    10b2:	8b 87       	std	Y+11, r24	; 0x0b
    10b4:	9c 87       	std	Y+12, r25	; 0x0c
    10b6:	db 01       	movw	r26, r22
    10b8:	ca 01       	movw	r24, r20
    10ba:	8f 77       	andi	r24, 0x7F	; 127
    10bc:	90 70       	andi	r25, 0x00	; 0
    10be:	a0 70       	andi	r26, 0x00	; 0
    10c0:	b0 70       	andi	r27, 0x00	; 0
    10c2:	80 34       	cpi	r24, 0x40	; 64
    10c4:	91 05       	cpc	r25, r1
    10c6:	a1 05       	cpc	r26, r1
    10c8:	b1 05       	cpc	r27, r1
    10ca:	61 f4       	brne	.+24     	; 0x10e4 <__mulsf3+0x1d4>
    10cc:	47 fd       	sbrc	r20, 7
    10ce:	0a c0       	rjmp	.+20     	; 0x10e4 <__mulsf3+0x1d4>
    10d0:	c1 14       	cp	r12, r1
    10d2:	d1 04       	cpc	r13, r1
    10d4:	e1 04       	cpc	r14, r1
    10d6:	f1 04       	cpc	r15, r1
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <__mulsf3+0x1d4>
    10da:	40 5c       	subi	r20, 0xC0	; 192
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255
    10de:	6f 4f       	sbci	r22, 0xFF	; 255
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	40 78       	andi	r20, 0x80	; 128
    10e4:	4d 87       	std	Y+13, r20	; 0x0d
    10e6:	5e 87       	std	Y+14, r21	; 0x0e
    10e8:	6f 87       	std	Y+15, r22	; 0x0f
    10ea:	78 8b       	std	Y+16, r23	; 0x10
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	89 87       	std	Y+9, r24	; 0x09
    10f0:	ce 01       	movw	r24, r28
    10f2:	09 96       	adiw	r24, 0x09	; 9
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <__mulsf3+0x1ea>
    10f6:	8a ed       	ldi	r24, 0xDA	; 218
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	0e 94 a4 09 	call	0x1348	; 0x1348 <__pack_f>
    10fe:	46 2f       	mov	r20, r22
    1100:	57 2f       	mov	r21, r23
    1102:	68 2f       	mov	r22, r24
    1104:	79 2f       	mov	r23, r25
    1106:	cb 01       	movw	r24, r22
    1108:	ba 01       	movw	r22, r20
    110a:	a0 96       	adiw	r28, 0x20	; 32
    110c:	e0 e1       	ldi	r30, 0x10	; 16
    110e:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__epilogue_restores__+0x4>

00001112 <__floatsisf>:
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	28 97       	sbiw	r28, 0x08	; 8
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	6b 01       	movw	r12, r22
    1130:	7c 01       	movw	r14, r24
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	d7 01       	movw	r26, r14
    1138:	c6 01       	movw	r24, r12
    113a:	88 27       	eor	r24, r24
    113c:	b7 fd       	sbrc	r27, 7
    113e:	83 95       	inc	r24
    1140:	99 27       	eor	r25, r25
    1142:	aa 27       	eor	r26, r26
    1144:	bb 27       	eor	r27, r27
    1146:	28 2f       	mov	r18, r24
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	c1 14       	cp	r12, r1
    114c:	d1 04       	cpc	r13, r1
    114e:	e1 04       	cpc	r14, r1
    1150:	f1 04       	cpc	r15, r1
    1152:	19 f4       	brne	.+6      	; 0x115a <__floatsisf+0x48>
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	35 c0       	rjmp	.+106    	; 0x11c4 <__floatsisf+0xb2>
    115a:	8e e1       	ldi	r24, 0x1E	; 30
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	22 23       	and	r18, r18
    1164:	89 f0       	breq	.+34     	; 0x1188 <__floatsisf+0x76>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	c8 16       	cp	r12, r24
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	d8 06       	cpc	r13, r24
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	e8 06       	cpc	r14, r24
    1172:	80 e8       	ldi	r24, 0x80	; 128
    1174:	f8 06       	cpc	r15, r24
    1176:	59 f1       	breq	.+86     	; 0x11ce <__floatsisf+0xbc>
    1178:	f0 94       	com	r15
    117a:	e0 94       	com	r14
    117c:	d0 94       	com	r13
    117e:	c0 94       	com	r12
    1180:	c1 1c       	adc	r12, r1
    1182:	d1 1c       	adc	r13, r1
    1184:	e1 1c       	adc	r14, r1
    1186:	f1 1c       	adc	r15, r1
    1188:	cd 82       	std	Y+5, r12	; 0x05
    118a:	de 82       	std	Y+6, r13	; 0x06
    118c:	ef 82       	std	Y+7, r14	; 0x07
    118e:	f8 86       	std	Y+8, r15	; 0x08
    1190:	c7 01       	movw	r24, r14
    1192:	b6 01       	movw	r22, r12
    1194:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__clzsi2>
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	18 16       	cp	r1, r24
    119c:	19 06       	cpc	r1, r25
    119e:	94 f4       	brge	.+36     	; 0x11c4 <__floatsisf+0xb2>
    11a0:	08 2e       	mov	r0, r24
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <__floatsisf+0x9a>
    11a4:	cc 0c       	add	r12, r12
    11a6:	dd 1c       	adc	r13, r13
    11a8:	ee 1c       	adc	r14, r14
    11aa:	ff 1c       	adc	r15, r15
    11ac:	0a 94       	dec	r0
    11ae:	d2 f7       	brpl	.-12     	; 0x11a4 <__floatsisf+0x92>
    11b0:	cd 82       	std	Y+5, r12	; 0x05
    11b2:	de 82       	std	Y+6, r13	; 0x06
    11b4:	ef 82       	std	Y+7, r14	; 0x07
    11b6:	f8 86       	std	Y+8, r15	; 0x08
    11b8:	2e e1       	ldi	r18, 0x1E	; 30
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	28 1b       	sub	r18, r24
    11be:	39 0b       	sbc	r19, r25
    11c0:	3c 83       	std	Y+4, r19	; 0x04
    11c2:	2b 83       	std	Y+3, r18	; 0x03
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	0e 94 a4 09 	call	0x1348	; 0x1348 <__pack_f>
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <__floatsisf+0xc4>
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	9f ec       	ldi	r25, 0xCF	; 207
    11d6:	38 2f       	mov	r19, r24
    11d8:	29 2f       	mov	r18, r25
    11da:	86 2f       	mov	r24, r22
    11dc:	97 2f       	mov	r25, r23
    11de:	a3 2f       	mov	r26, r19
    11e0:	b2 2f       	mov	r27, r18
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	28 96       	adiw	r28, 0x08	; 8
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	08 95       	ret

00001200 <__fixsfsi>:
    1200:	ac e0       	ldi	r26, 0x0C	; 12
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e0       	ldi	r30, 0x06	; 6
    1206:	f9 e0       	ldi	r31, 0x09	; 9
    1208:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__prologue_saves__+0x1c>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	ab 83       	std	Y+3, r26	; 0x03
    1216:	bc 83       	std	Y+4, r27	; 0x04
    1218:	ce 01       	movw	r24, r28
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	be 01       	movw	r22, r28
    121e:	6b 5f       	subi	r22, 0xFB	; 251
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__unpack_f>
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	69 f1       	breq	.+90     	; 0x1286 <__fixsfsi+0x86>
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	58 f1       	brcs	.+86     	; 0x1286 <__fixsfsi+0x86>
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	39 f0       	breq	.+14     	; 0x1242 <__fixsfsi+0x42>
    1234:	2f 81       	ldd	r18, Y+7	; 0x07
    1236:	38 85       	ldd	r19, Y+8	; 0x08
    1238:	37 fd       	sbrc	r19, 7
    123a:	25 c0       	rjmp	.+74     	; 0x1286 <__fixsfsi+0x86>
    123c:	2f 31       	cpi	r18, 0x1F	; 31
    123e:	31 05       	cpc	r19, r1
    1240:	44 f0       	brlt	.+16     	; 0x1252 <__fixsfsi+0x52>
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	88 23       	and	r24, r24
    1246:	19 f1       	breq	.+70     	; 0x128e <__fixsfsi+0x8e>
    1248:	00 e0       	ldi	r16, 0x00	; 0
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e8       	ldi	r19, 0x80	; 128
    1250:	22 c0       	rjmp	.+68     	; 0x1296 <__fixsfsi+0x96>
    1252:	8e e1       	ldi	r24, 0x1E	; 30
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	82 1b       	sub	r24, r18
    1258:	93 0b       	sbc	r25, r19
    125a:	09 85       	ldd	r16, Y+9	; 0x09
    125c:	1a 85       	ldd	r17, Y+10	; 0x0a
    125e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1260:	3c 85       	ldd	r19, Y+12	; 0x0c
    1262:	04 c0       	rjmp	.+8      	; 0x126c <__fixsfsi+0x6c>
    1264:	36 95       	lsr	r19
    1266:	27 95       	ror	r18
    1268:	17 95       	ror	r17
    126a:	07 95       	ror	r16
    126c:	8a 95       	dec	r24
    126e:	d2 f7       	brpl	.-12     	; 0x1264 <__fixsfsi+0x64>
    1270:	8e 81       	ldd	r24, Y+6	; 0x06
    1272:	88 23       	and	r24, r24
    1274:	81 f0       	breq	.+32     	; 0x1296 <__fixsfsi+0x96>
    1276:	30 95       	com	r19
    1278:	20 95       	com	r18
    127a:	10 95       	com	r17
    127c:	01 95       	neg	r16
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	2f 4f       	sbci	r18, 0xFF	; 255
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <__fixsfsi+0x96>
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	10 e0       	ldi	r17, 0x00	; 0
    128a:	98 01       	movw	r18, r16
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <__fixsfsi+0x96>
    128e:	0f ef       	ldi	r16, 0xFF	; 255
    1290:	1f ef       	ldi	r17, 0xFF	; 255
    1292:	2f ef       	ldi	r18, 0xFF	; 255
    1294:	3f e7       	ldi	r19, 0x7F	; 127
    1296:	b8 01       	movw	r22, r16
    1298:	c9 01       	movw	r24, r18
    129a:	2c 96       	adiw	r28, 0x0c	; 12
    129c:	e4 e0       	ldi	r30, 0x04	; 4
    129e:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__epilogue_restores__+0x1c>

000012a2 <__clzsi2>:
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	8b 01       	movw	r16, r22
    12b0:	9c 01       	movw	r18, r24
    12b2:	00 30       	cpi	r16, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	18 07       	cpc	r17, r24
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	28 07       	cpc	r18, r24
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	38 07       	cpc	r19, r24
    12c0:	50 f4       	brcc	.+20     	; 0x12d6 <__clzsi2+0x34>
    12c2:	0f 3f       	cpi	r16, 0xFF	; 255
    12c4:	11 05       	cpc	r17, r1
    12c6:	21 05       	cpc	r18, r1
    12c8:	31 05       	cpc	r19, r1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <__clzsi2+0x2c>
    12cc:	88 f4       	brcc	.+34     	; 0x12f0 <__clzsi2+0x4e>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	dc 01       	movw	r26, r24
    12d4:	16 c0       	rjmp	.+44     	; 0x1302 <__clzsi2+0x60>
    12d6:	00 30       	cpi	r16, 0x00	; 0
    12d8:	e0 e0       	ldi	r30, 0x00	; 0
    12da:	1e 07       	cpc	r17, r30
    12dc:	e0 e0       	ldi	r30, 0x00	; 0
    12de:	2e 07       	cpc	r18, r30
    12e0:	e1 e0       	ldi	r30, 0x01	; 1
    12e2:	3e 07       	cpc	r19, r30
    12e4:	50 f4       	brcc	.+20     	; 0x12fa <__clzsi2+0x58>
    12e6:	80 e1       	ldi	r24, 0x10	; 16
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a0 e0       	ldi	r26, 0x00	; 0
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <__clzsi2+0x60>
    12f0:	88 e0       	ldi	r24, 0x08	; 8
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <__clzsi2+0x60>
    12fa:	88 e1       	ldi	r24, 0x18	; 24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	40 e2       	ldi	r20, 0x20	; 32
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	48 1b       	sub	r20, r24
    130c:	59 0b       	sbc	r21, r25
    130e:	6a 0b       	sbc	r22, r26
    1310:	7b 0b       	sbc	r23, r27
    1312:	68 01       	movw	r12, r16
    1314:	79 01       	movw	r14, r18
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__clzsi2+0x7e>
    1318:	f6 94       	lsr	r15
    131a:	e7 94       	ror	r14
    131c:	d7 94       	ror	r13
    131e:	c7 94       	ror	r12
    1320:	8a 95       	dec	r24
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <__clzsi2+0x76>
    1324:	d7 01       	movw	r26, r14
    1326:	c6 01       	movw	r24, r12
    1328:	8e 51       	subi	r24, 0x1E	; 30
    132a:	9d 4f       	sbci	r25, 0xFD	; 253
    132c:	fc 01       	movw	r30, r24
    132e:	80 81       	ld	r24, Z
    1330:	48 1b       	sub	r20, r24
    1332:	51 09       	sbc	r21, r1
    1334:	61 09       	sbc	r22, r1
    1336:	71 09       	sbc	r23, r1
    1338:	ca 01       	movw	r24, r20
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	cf 90       	pop	r12
    1346:	08 95       	ret

00001348 <__pack_f>:
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	dc 01       	movw	r26, r24
    1356:	14 96       	adiw	r26, 0x04	; 4
    1358:	4d 91       	ld	r20, X+
    135a:	5d 91       	ld	r21, X+
    135c:	6d 91       	ld	r22, X+
    135e:	7c 91       	ld	r23, X
    1360:	17 97       	sbiw	r26, 0x07	; 7
    1362:	11 96       	adiw	r26, 0x01	; 1
    1364:	ec 91       	ld	r30, X
    1366:	11 97       	sbiw	r26, 0x01	; 1
    1368:	8c 91       	ld	r24, X
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	20 f4       	brcc	.+8      	; 0x1376 <__pack_f+0x2e>
    136e:	60 61       	ori	r22, 0x10	; 16
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a5 c0       	rjmp	.+330    	; 0x14c0 <__pack_f+0x178>
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	09 f4       	brne	.+2      	; 0x137c <__pack_f+0x34>
    137a:	9d c0       	rjmp	.+314    	; 0x14b6 <__pack_f+0x16e>
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	09 f4       	brne	.+2      	; 0x1382 <__pack_f+0x3a>
    1380:	94 c0       	rjmp	.+296    	; 0x14aa <__pack_f+0x162>
    1382:	41 15       	cp	r20, r1
    1384:	51 05       	cpc	r21, r1
    1386:	61 05       	cpc	r22, r1
    1388:	71 05       	cpc	r23, r1
    138a:	09 f4       	brne	.+2      	; 0x138e <__pack_f+0x46>
    138c:	91 c0       	rjmp	.+290    	; 0x14b0 <__pack_f+0x168>
    138e:	12 96       	adiw	r26, 0x02	; 2
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	13 97       	sbiw	r26, 0x03	; 3
    1396:	2f ef       	ldi	r18, 0xFF	; 255
    1398:	82 38       	cpi	r24, 0x82	; 130
    139a:	92 07       	cpc	r25, r18
    139c:	0c f0       	brlt	.+2      	; 0x13a0 <__pack_f+0x58>
    139e:	59 c0       	rjmp	.+178    	; 0x1452 <__pack_f+0x10a>
    13a0:	22 e8       	ldi	r18, 0x82	; 130
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	28 1b       	sub	r18, r24
    13a6:	39 0b       	sbc	r19, r25
    13a8:	2a 31       	cpi	r18, 0x1A	; 26
    13aa:	31 05       	cpc	r19, r1
    13ac:	64 f5       	brge	.+88     	; 0x1406 <__pack_f+0xbe>
    13ae:	6a 01       	movw	r12, r20
    13b0:	7b 01       	movw	r14, r22
    13b2:	02 2e       	mov	r0, r18
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <__pack_f+0x76>
    13b6:	f6 94       	lsr	r15
    13b8:	e7 94       	ror	r14
    13ba:	d7 94       	ror	r13
    13bc:	c7 94       	ror	r12
    13be:	0a 94       	dec	r0
    13c0:	d2 f7       	brpl	.-12     	; 0x13b6 <__pack_f+0x6e>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	04 c0       	rjmp	.+8      	; 0x13d4 <__pack_f+0x8c>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	aa 1f       	adc	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	2a 95       	dec	r18
    13d6:	d2 f7       	brpl	.-12     	; 0x13cc <__pack_f+0x84>
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	a1 09       	sbc	r26, r1
    13dc:	b1 09       	sbc	r27, r1
    13de:	84 23       	and	r24, r20
    13e0:	95 23       	and	r25, r21
    13e2:	a6 23       	and	r26, r22
    13e4:	b7 23       	and	r27, r23
    13e6:	41 e0       	ldi	r20, 0x01	; 1
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	a1 05       	cpc	r26, r1
    13f2:	b1 05       	cpc	r27, r1
    13f4:	19 f4       	brne	.+6      	; 0x13fc <__pack_f+0xb4>
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	ba 01       	movw	r22, r20
    13fc:	4c 29       	or	r20, r12
    13fe:	5d 29       	or	r21, r13
    1400:	6e 29       	or	r22, r14
    1402:	7f 29       	or	r23, r15
    1404:	03 c0       	rjmp	.+6      	; 0x140c <__pack_f+0xc4>
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	ba 01       	movw	r22, r20
    140c:	db 01       	movw	r26, r22
    140e:	ca 01       	movw	r24, r20
    1410:	8f 77       	andi	r24, 0x7F	; 127
    1412:	90 70       	andi	r25, 0x00	; 0
    1414:	a0 70       	andi	r26, 0x00	; 0
    1416:	b0 70       	andi	r27, 0x00	; 0
    1418:	80 34       	cpi	r24, 0x40	; 64
    141a:	91 05       	cpc	r25, r1
    141c:	a1 05       	cpc	r26, r1
    141e:	b1 05       	cpc	r27, r1
    1420:	39 f4       	brne	.+14     	; 0x1430 <__pack_f+0xe8>
    1422:	47 ff       	sbrs	r20, 7
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <__pack_f+0xf0>
    1426:	40 5c       	subi	r20, 0xC0	; 192
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	6f 4f       	sbci	r22, 0xFF	; 255
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <__pack_f+0xf0>
    1430:	41 5c       	subi	r20, 0xC1	; 193
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	6f 4f       	sbci	r22, 0xFF	; 255
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	40 30       	cpi	r20, 0x00	; 0
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	52 07       	cpc	r21, r18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	62 07       	cpc	r22, r18
    1446:	20 e4       	ldi	r18, 0x40	; 64
    1448:	72 07       	cpc	r23, r18
    144a:	38 f5       	brcc	.+78     	; 0x149a <__pack_f+0x152>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	24 c0       	rjmp	.+72     	; 0x149a <__pack_f+0x152>
    1452:	80 38       	cpi	r24, 0x80	; 128
    1454:	91 05       	cpc	r25, r1
    1456:	7c f5       	brge	.+94     	; 0x14b6 <__pack_f+0x16e>
    1458:	8a 01       	movw	r16, r20
    145a:	9b 01       	movw	r18, r22
    145c:	0f 77       	andi	r16, 0x7F	; 127
    145e:	10 70       	andi	r17, 0x00	; 0
    1460:	20 70       	andi	r18, 0x00	; 0
    1462:	30 70       	andi	r19, 0x00	; 0
    1464:	00 34       	cpi	r16, 0x40	; 64
    1466:	11 05       	cpc	r17, r1
    1468:	21 05       	cpc	r18, r1
    146a:	31 05       	cpc	r19, r1
    146c:	39 f4       	brne	.+14     	; 0x147c <__pack_f+0x134>
    146e:	47 ff       	sbrs	r20, 7
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <__pack_f+0x13c>
    1472:	40 5c       	subi	r20, 0xC0	; 192
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	6f 4f       	sbci	r22, 0xFF	; 255
    1478:	7f 4f       	sbci	r23, 0xFF	; 255
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <__pack_f+0x13c>
    147c:	41 5c       	subi	r20, 0xC1	; 193
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	6f 4f       	sbci	r22, 0xFF	; 255
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	77 fd       	sbrc	r23, 7
    1486:	03 c0       	rjmp	.+6      	; 0x148e <__pack_f+0x146>
    1488:	81 58       	subi	r24, 0x81	; 129
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	06 c0       	rjmp	.+12     	; 0x149a <__pack_f+0x152>
    148e:	76 95       	lsr	r23
    1490:	67 95       	ror	r22
    1492:	57 95       	ror	r21
    1494:	47 95       	ror	r20
    1496:	80 58       	subi	r24, 0x80	; 128
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	97 e0       	ldi	r25, 0x07	; 7
    149c:	76 95       	lsr	r23
    149e:	67 95       	ror	r22
    14a0:	57 95       	ror	r21
    14a2:	47 95       	ror	r20
    14a4:	9a 95       	dec	r25
    14a6:	d1 f7       	brne	.-12     	; 0x149c <__pack_f+0x154>
    14a8:	0b c0       	rjmp	.+22     	; 0x14c0 <__pack_f+0x178>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <__pack_f+0x172>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <__pack_f+0x178>
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	ba 01       	movw	r22, r20
    14c0:	98 2f       	mov	r25, r24
    14c2:	97 95       	ror	r25
    14c4:	99 27       	eor	r25, r25
    14c6:	97 95       	ror	r25
    14c8:	a6 2f       	mov	r26, r22
    14ca:	af 77       	andi	r26, 0x7F	; 127
    14cc:	e7 95       	ror	r30
    14ce:	ee 27       	eor	r30, r30
    14d0:	e7 95       	ror	r30
    14d2:	86 95       	lsr	r24
    14d4:	3a 2f       	mov	r19, r26
    14d6:	39 2b       	or	r19, r25
    14d8:	28 2f       	mov	r18, r24
    14da:	2e 2b       	or	r18, r30
    14dc:	84 2f       	mov	r24, r20
    14de:	95 2f       	mov	r25, r21
    14e0:	a3 2f       	mov	r26, r19
    14e2:	b2 2f       	mov	r27, r18
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	08 95       	ret

000014f6 <__unpack_f>:
    14f6:	dc 01       	movw	r26, r24
    14f8:	fb 01       	movw	r30, r22
    14fa:	4c 91       	ld	r20, X
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	5c 91       	ld	r21, X
    1500:	11 97       	sbiw	r26, 0x01	; 1
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	8c 91       	ld	r24, X
    1506:	12 97       	sbiw	r26, 0x02	; 2
    1508:	68 2f       	mov	r22, r24
    150a:	6f 77       	andi	r22, 0x7F	; 127
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	98 2f       	mov	r25, r24
    1510:	99 1f       	adc	r25, r25
    1512:	99 27       	eor	r25, r25
    1514:	99 1f       	adc	r25, r25
    1516:	13 96       	adiw	r26, 0x03	; 3
    1518:	2c 91       	ld	r18, X
    151a:	13 97       	sbiw	r26, 0x03	; 3
    151c:	82 2f       	mov	r24, r18
    151e:	88 0f       	add	r24, r24
    1520:	89 2b       	or	r24, r25
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	22 1f       	adc	r18, r18
    1526:	22 27       	eor	r18, r18
    1528:	22 1f       	adc	r18, r18
    152a:	21 83       	std	Z+1, r18	; 0x01
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	39 f5       	brne	.+78     	; 0x157e <__unpack_f+0x88>
    1530:	41 15       	cp	r20, r1
    1532:	51 05       	cpc	r21, r1
    1534:	61 05       	cpc	r22, r1
    1536:	71 05       	cpc	r23, r1
    1538:	11 f4       	brne	.+4      	; 0x153e <__unpack_f+0x48>
    153a:	82 e0       	ldi	r24, 0x02	; 2
    153c:	29 c0       	rjmp	.+82     	; 0x1590 <__unpack_f+0x9a>
    153e:	82 e8       	ldi	r24, 0x82	; 130
    1540:	9f ef       	ldi	r25, 0xFF	; 255
    1542:	93 83       	std	Z+3, r25	; 0x03
    1544:	82 83       	std	Z+2, r24	; 0x02
    1546:	27 e0       	ldi	r18, 0x07	; 7
    1548:	44 0f       	add	r20, r20
    154a:	55 1f       	adc	r21, r21
    154c:	66 1f       	adc	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	2a 95       	dec	r18
    1552:	d1 f7       	brne	.-12     	; 0x1548 <__unpack_f+0x52>
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	80 83       	st	Z, r24
    1558:	09 c0       	rjmp	.+18     	; 0x156c <__unpack_f+0x76>
    155a:	44 0f       	add	r20, r20
    155c:	55 1f       	adc	r21, r21
    155e:	66 1f       	adc	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	93 83       	std	Z+3, r25	; 0x03
    156a:	82 83       	std	Z+2, r24	; 0x02
    156c:	40 30       	cpi	r20, 0x00	; 0
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	58 07       	cpc	r21, r24
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	68 07       	cpc	r22, r24
    1576:	80 e4       	ldi	r24, 0x40	; 64
    1578:	78 07       	cpc	r23, r24
    157a:	78 f3       	brcs	.-34     	; 0x155a <__unpack_f+0x64>
    157c:	20 c0       	rjmp	.+64     	; 0x15be <__unpack_f+0xc8>
    157e:	8f 3f       	cpi	r24, 0xFF	; 255
    1580:	91 05       	cpc	r25, r1
    1582:	79 f4       	brne	.+30     	; 0x15a2 <__unpack_f+0xac>
    1584:	41 15       	cp	r20, r1
    1586:	51 05       	cpc	r21, r1
    1588:	61 05       	cpc	r22, r1
    158a:	71 05       	cpc	r23, r1
    158c:	19 f4       	brne	.+6      	; 0x1594 <__unpack_f+0x9e>
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	80 83       	st	Z, r24
    1592:	08 95       	ret
    1594:	64 ff       	sbrs	r22, 4
    1596:	03 c0       	rjmp	.+6      	; 0x159e <__unpack_f+0xa8>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 83       	st	Z, r24
    159c:	10 c0       	rjmp	.+32     	; 0x15be <__unpack_f+0xc8>
    159e:	10 82       	st	Z, r1
    15a0:	0e c0       	rjmp	.+28     	; 0x15be <__unpack_f+0xc8>
    15a2:	8f 57       	subi	r24, 0x7F	; 127
    15a4:	90 40       	sbci	r25, 0x00	; 0
    15a6:	93 83       	std	Z+3, r25	; 0x03
    15a8:	82 83       	std	Z+2, r24	; 0x02
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	80 83       	st	Z, r24
    15ae:	87 e0       	ldi	r24, 0x07	; 7
    15b0:	44 0f       	add	r20, r20
    15b2:	55 1f       	adc	r21, r21
    15b4:	66 1f       	adc	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	8a 95       	dec	r24
    15ba:	d1 f7       	brne	.-12     	; 0x15b0 <__unpack_f+0xba>
    15bc:	70 64       	ori	r23, 0x40	; 64
    15be:	44 83       	std	Z+4, r20	; 0x04
    15c0:	55 83       	std	Z+5, r21	; 0x05
    15c2:	66 83       	std	Z+6, r22	; 0x06
    15c4:	77 83       	std	Z+7, r23	; 0x07
    15c6:	08 95       	ret

000015c8 <main>:
#include "app.h"
#include "Task_queue.h"
#include "Timer.h"

int main()
{
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2a 97       	sbiw	r28, 0x0a	; 10
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;

	uart_init();
    15dc:	0e 94 99 05 	call	0xb32	; 0xb32 <uart_init>
	task_init();
    15e0:	0e 94 c3 02 	call	0x586	; 0x586 <task_init>
	timer_init();
    15e4:	0e 94 43 04 	call	0x886	; 0x886 <timer_init>

	sei();
    15e8:	78 94       	sei

	printf("$ ");
    15ea:	0f 92       	push	r0
    15ec:	0f 92       	push	r0
    15ee:	83 e3       	ldi	r24, 0x33	; 51
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	ed b7       	in	r30, 0x3d	; 61
    15f4:	fe b7       	in	r31, 0x3e	; 62
    15f6:	92 83       	std	Z+2, r25	; 0x02
    15f8:	81 83       	std	Z+1, r24	; 0x01
    15fa:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <printf>
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0

	while(1) {
		cli();
    1602:	f8 94       	cli
		tag = task_delete(&task);
    1604:	ce 01       	movw	r24, r28
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	0e 94 0c 03 	call	0x618	; 0x618 <task_delete>
		sei();
    160c:	78 94       	sei
		if (tag)
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	c1 f3       	breq	.-16     	; 0x1602 <main+0x3a>
			(*(task.fun))(task.arg);
    1612:	e9 81       	ldd	r30, Y+1	; 0x01
    1614:	fa 81       	ldd	r31, Y+2	; 0x02
    1616:	ce 01       	movw	r24, r28
    1618:	03 96       	adiw	r24, 0x03	; 3
    161a:	19 95       	eicall
    161c:	f2 cf       	rjmp	.-28     	; 0x1602 <main+0x3a>

0000161e <__divmodhi4>:
    161e:	97 fb       	bst	r25, 7
    1620:	09 2e       	mov	r0, r25
    1622:	07 26       	eor	r0, r23
    1624:	0a d0       	rcall	.+20     	; 0x163a <__divmodhi4_neg1>
    1626:	77 fd       	sbrc	r23, 7
    1628:	04 d0       	rcall	.+8      	; 0x1632 <__divmodhi4_neg2>
    162a:	0c d0       	rcall	.+24     	; 0x1644 <__udivmodhi4>
    162c:	06 d0       	rcall	.+12     	; 0x163a <__divmodhi4_neg1>
    162e:	00 20       	and	r0, r0
    1630:	1a f4       	brpl	.+6      	; 0x1638 <__divmodhi4_exit>

00001632 <__divmodhi4_neg2>:
    1632:	70 95       	com	r23
    1634:	61 95       	neg	r22
    1636:	7f 4f       	sbci	r23, 0xFF	; 255

00001638 <__divmodhi4_exit>:
    1638:	08 95       	ret

0000163a <__divmodhi4_neg1>:
    163a:	f6 f7       	brtc	.-4      	; 0x1638 <__divmodhi4_exit>
    163c:	90 95       	com	r25
    163e:	81 95       	neg	r24
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	08 95       	ret

00001644 <__udivmodhi4>:
    1644:	aa 1b       	sub	r26, r26
    1646:	bb 1b       	sub	r27, r27
    1648:	51 e1       	ldi	r21, 0x11	; 17
    164a:	07 c0       	rjmp	.+14     	; 0x165a <__udivmodhi4_ep>

0000164c <__udivmodhi4_loop>:
    164c:	aa 1f       	adc	r26, r26
    164e:	bb 1f       	adc	r27, r27
    1650:	a6 17       	cp	r26, r22
    1652:	b7 07       	cpc	r27, r23
    1654:	10 f0       	brcs	.+4      	; 0x165a <__udivmodhi4_ep>
    1656:	a6 1b       	sub	r26, r22
    1658:	b7 0b       	sbc	r27, r23

0000165a <__udivmodhi4_ep>:
    165a:	88 1f       	adc	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	5a 95       	dec	r21
    1660:	a9 f7       	brne	.-22     	; 0x164c <__udivmodhi4_loop>
    1662:	80 95       	com	r24
    1664:	90 95       	com	r25
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	08 95       	ret

0000166c <__prologue_saves__>:
    166c:	2f 92       	push	r2
    166e:	3f 92       	push	r3
    1670:	4f 92       	push	r4
    1672:	5f 92       	push	r5
    1674:	6f 92       	push	r6
    1676:	7f 92       	push	r7
    1678:	8f 92       	push	r8
    167a:	9f 92       	push	r9
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	ca 1b       	sub	r28, r26
    1696:	db 0b       	sbc	r29, r27
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	19 94       	eijmp

000016a4 <__epilogue_restores__>:
    16a4:	2a 88       	ldd	r2, Y+18	; 0x12
    16a6:	39 88       	ldd	r3, Y+17	; 0x11
    16a8:	48 88       	ldd	r4, Y+16	; 0x10
    16aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    16ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    16ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    16b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    16b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    16b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    16b6:	b9 84       	ldd	r11, Y+9	; 0x09
    16b8:	c8 84       	ldd	r12, Y+8	; 0x08
    16ba:	df 80       	ldd	r13, Y+7	; 0x07
    16bc:	ee 80       	ldd	r14, Y+6	; 0x06
    16be:	fd 80       	ldd	r15, Y+5	; 0x05
    16c0:	0c 81       	ldd	r16, Y+4	; 0x04
    16c2:	1b 81       	ldd	r17, Y+3	; 0x03
    16c4:	aa 81       	ldd	r26, Y+2	; 0x02
    16c6:	b9 81       	ldd	r27, Y+1	; 0x01
    16c8:	ce 0f       	add	r28, r30
    16ca:	d1 1d       	adc	r29, r1
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	ed 01       	movw	r28, r26
    16d8:	08 95       	ret

000016da <malloc>:
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ac 01       	movw	r20, r24
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	91 05       	cpc	r25, r1
    16e4:	10 f4       	brcc	.+4      	; 0x16ea <malloc+0x10>
    16e6:	42 e0       	ldi	r20, 0x02	; 2
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	e0 91 22 05 	lds	r30, 0x0522
    16ee:	f0 91 23 05 	lds	r31, 0x0523
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	a0 e0       	ldi	r26, 0x00	; 0
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	24 c0       	rjmp	.+72     	; 0x1744 <malloc+0x6a>
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	84 17       	cp	r24, r20
    1702:	95 07       	cpc	r25, r21
    1704:	d0 f0       	brcs	.+52     	; 0x173a <malloc+0x60>
    1706:	84 17       	cp	r24, r20
    1708:	95 07       	cpc	r25, r21
    170a:	71 f4       	brne	.+28     	; 0x1728 <malloc+0x4e>
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	10 97       	sbiw	r26, 0x00	; 0
    1712:	29 f0       	breq	.+10     	; 0x171e <malloc+0x44>
    1714:	13 96       	adiw	r26, 0x03	; 3
    1716:	9c 93       	st	X, r25
    1718:	8e 93       	st	-X, r24
    171a:	12 97       	sbiw	r26, 0x02	; 2
    171c:	2c c0       	rjmp	.+88     	; 0x1776 <malloc+0x9c>
    171e:	90 93 23 05 	sts	0x0523, r25
    1722:	80 93 22 05 	sts	0x0522, r24
    1726:	27 c0       	rjmp	.+78     	; 0x1776 <malloc+0x9c>
    1728:	21 15       	cp	r18, r1
    172a:	31 05       	cpc	r19, r1
    172c:	19 f0       	breq	.+6      	; 0x1734 <malloc+0x5a>
    172e:	82 17       	cp	r24, r18
    1730:	93 07       	cpc	r25, r19
    1732:	18 f4       	brcc	.+6      	; 0x173a <malloc+0x60>
    1734:	9c 01       	movw	r18, r24
    1736:	bd 01       	movw	r22, r26
    1738:	ef 01       	movw	r28, r30
    173a:	92 81       	ldd	r25, Z+2	; 0x02
    173c:	83 81       	ldd	r24, Z+3	; 0x03
    173e:	df 01       	movw	r26, r30
    1740:	e9 2f       	mov	r30, r25
    1742:	f8 2f       	mov	r31, r24
    1744:	30 97       	sbiw	r30, 0x00	; 0
    1746:	d1 f6       	brne	.-76     	; 0x16fc <malloc+0x22>
    1748:	21 15       	cp	r18, r1
    174a:	31 05       	cpc	r19, r1
    174c:	f9 f0       	breq	.+62     	; 0x178c <malloc+0xb2>
    174e:	c9 01       	movw	r24, r18
    1750:	84 1b       	sub	r24, r20
    1752:	95 0b       	sbc	r25, r21
    1754:	84 30       	cpi	r24, 0x04	; 4
    1756:	91 05       	cpc	r25, r1
    1758:	80 f4       	brcc	.+32     	; 0x177a <malloc+0xa0>
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	61 15       	cp	r22, r1
    1760:	71 05       	cpc	r23, r1
    1762:	21 f0       	breq	.+8      	; 0x176c <malloc+0x92>
    1764:	fb 01       	movw	r30, r22
    1766:	93 83       	std	Z+3, r25	; 0x03
    1768:	82 83       	std	Z+2, r24	; 0x02
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <malloc+0x9a>
    176c:	90 93 23 05 	sts	0x0523, r25
    1770:	80 93 22 05 	sts	0x0522, r24
    1774:	fe 01       	movw	r30, r28
    1776:	32 96       	adiw	r30, 0x02	; 2
    1778:	42 c0       	rjmp	.+132    	; 0x17fe <malloc+0x124>
    177a:	fe 01       	movw	r30, r28
    177c:	e8 0f       	add	r30, r24
    177e:	f9 1f       	adc	r31, r25
    1780:	41 93       	st	Z+, r20
    1782:	51 93       	st	Z+, r21
    1784:	02 97       	sbiw	r24, 0x02	; 2
    1786:	99 83       	std	Y+1, r25	; 0x01
    1788:	88 83       	st	Y, r24
    178a:	39 c0       	rjmp	.+114    	; 0x17fe <malloc+0x124>
    178c:	80 91 20 05 	lds	r24, 0x0520
    1790:	90 91 21 05 	lds	r25, 0x0521
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	41 f4       	brne	.+16     	; 0x17a8 <malloc+0xce>
    1798:	80 91 e4 03 	lds	r24, 0x03E4
    179c:	90 91 e5 03 	lds	r25, 0x03E5
    17a0:	90 93 21 05 	sts	0x0521, r25
    17a4:	80 93 20 05 	sts	0x0520, r24
    17a8:	20 91 e2 03 	lds	r18, 0x03E2
    17ac:	30 91 e3 03 	lds	r19, 0x03E3
    17b0:	21 15       	cp	r18, r1
    17b2:	31 05       	cpc	r19, r1
    17b4:	41 f4       	brne	.+16     	; 0x17c6 <malloc+0xec>
    17b6:	2d b7       	in	r18, 0x3d	; 61
    17b8:	3e b7       	in	r19, 0x3e	; 62
    17ba:	80 91 e6 03 	lds	r24, 0x03E6
    17be:	90 91 e7 03 	lds	r25, 0x03E7
    17c2:	28 1b       	sub	r18, r24
    17c4:	39 0b       	sbc	r19, r25
    17c6:	e0 91 20 05 	lds	r30, 0x0520
    17ca:	f0 91 21 05 	lds	r31, 0x0521
    17ce:	e2 17       	cp	r30, r18
    17d0:	f3 07       	cpc	r31, r19
    17d2:	98 f4       	brcc	.+38     	; 0x17fa <malloc+0x120>
    17d4:	2e 1b       	sub	r18, r30
    17d6:	3f 0b       	sbc	r19, r31
    17d8:	24 17       	cp	r18, r20
    17da:	35 07       	cpc	r19, r21
    17dc:	70 f0       	brcs	.+28     	; 0x17fa <malloc+0x120>
    17de:	ca 01       	movw	r24, r20
    17e0:	02 96       	adiw	r24, 0x02	; 2
    17e2:	28 17       	cp	r18, r24
    17e4:	39 07       	cpc	r19, r25
    17e6:	48 f0       	brcs	.+18     	; 0x17fa <malloc+0x120>
    17e8:	8e 0f       	add	r24, r30
    17ea:	9f 1f       	adc	r25, r31
    17ec:	90 93 21 05 	sts	0x0521, r25
    17f0:	80 93 20 05 	sts	0x0520, r24
    17f4:	41 93       	st	Z+, r20
    17f6:	51 93       	st	Z+, r21
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <malloc+0x124>
    17fa:	e0 e0       	ldi	r30, 0x00	; 0
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	cf 01       	movw	r24, r30
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <free>:
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	9c 01       	movw	r18, r24
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	09 f4       	brne	.+2      	; 0x1816 <free+0x10>
    1814:	8c c0       	rjmp	.+280    	; 0x192e <free+0x128>
    1816:	dc 01       	movw	r26, r24
    1818:	12 97       	sbiw	r26, 0x02	; 2
    181a:	13 96       	adiw	r26, 0x03	; 3
    181c:	1c 92       	st	X, r1
    181e:	1e 92       	st	-X, r1
    1820:	12 97       	sbiw	r26, 0x02	; 2
    1822:	60 91 22 05 	lds	r22, 0x0522
    1826:	70 91 23 05 	lds	r23, 0x0523
    182a:	61 15       	cp	r22, r1
    182c:	71 05       	cpc	r23, r1
    182e:	89 f4       	brne	.+34     	; 0x1852 <free+0x4c>
    1830:	8d 91       	ld	r24, X+
    1832:	9c 91       	ld	r25, X
    1834:	11 97       	sbiw	r26, 0x01	; 1
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	20 91 20 05 	lds	r18, 0x0520
    183e:	30 91 21 05 	lds	r19, 0x0521
    1842:	28 17       	cp	r18, r24
    1844:	39 07       	cpc	r19, r25
    1846:	69 f5       	brne	.+90     	; 0x18a2 <free+0x9c>
    1848:	b0 93 21 05 	sts	0x0521, r27
    184c:	a0 93 20 05 	sts	0x0520, r26
    1850:	6e c0       	rjmp	.+220    	; 0x192e <free+0x128>
    1852:	fb 01       	movw	r30, r22
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	01 c0       	rjmp	.+2      	; 0x185c <free+0x56>
    185a:	fc 01       	movw	r30, r24
    185c:	ea 17       	cp	r30, r26
    185e:	fb 07       	cpc	r31, r27
    1860:	30 f4       	brcc	.+12     	; 0x186e <free+0x68>
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	af 01       	movw	r20, r30
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	b9 f7       	brne	.-18     	; 0x185a <free+0x54>
    186c:	1f c0       	rjmp	.+62     	; 0x18ac <free+0xa6>
    186e:	e9 01       	movw	r28, r18
    1870:	22 97       	sbiw	r28, 0x02	; 2
    1872:	fb 83       	std	Y+3, r31	; 0x03
    1874:	ea 83       	std	Y+2, r30	; 0x02
    1876:	08 81       	ld	r16, Y
    1878:	19 81       	ldd	r17, Y+1	; 0x01
    187a:	c9 01       	movw	r24, r18
    187c:	80 0f       	add	r24, r16
    187e:	91 1f       	adc	r25, r17
    1880:	8e 17       	cp	r24, r30
    1882:	9f 07       	cpc	r25, r31
    1884:	59 f4       	brne	.+22     	; 0x189c <free+0x96>
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	80 0f       	add	r24, r16
    188c:	91 1f       	adc	r25, r17
    188e:	02 96       	adiw	r24, 0x02	; 2
    1890:	99 83       	std	Y+1, r25	; 0x01
    1892:	88 83       	st	Y, r24
    1894:	82 81       	ldd	r24, Z+2	; 0x02
    1896:	93 81       	ldd	r25, Z+3	; 0x03
    1898:	9b 83       	std	Y+3, r25	; 0x03
    189a:	8a 83       	std	Y+2, r24	; 0x02
    189c:	41 15       	cp	r20, r1
    189e:	51 05       	cpc	r21, r1
    18a0:	29 f4       	brne	.+10     	; 0x18ac <free+0xa6>
    18a2:	b0 93 23 05 	sts	0x0523, r27
    18a6:	a0 93 22 05 	sts	0x0522, r26
    18aa:	41 c0       	rjmp	.+130    	; 0x192e <free+0x128>
    18ac:	fa 01       	movw	r30, r20
    18ae:	b3 83       	std	Z+3, r27	; 0x03
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	c1 91       	ld	r28, Z+
    18b4:	d1 91       	ld	r29, Z+
    18b6:	ec 0f       	add	r30, r28
    18b8:	fd 1f       	adc	r31, r29
    18ba:	ae 17       	cp	r26, r30
    18bc:	bf 07       	cpc	r27, r31
    18be:	81 f4       	brne	.+32     	; 0x18e0 <free+0xda>
    18c0:	f9 01       	movw	r30, r18
    18c2:	92 91       	ld	r25, -Z
    18c4:	82 91       	ld	r24, -Z
    18c6:	8c 0f       	add	r24, r28
    18c8:	9d 1f       	adc	r25, r29
    18ca:	02 96       	adiw	r24, 0x02	; 2
    18cc:	da 01       	movw	r26, r20
    18ce:	11 96       	adiw	r26, 0x01	; 1
    18d0:	9c 93       	st	X, r25
    18d2:	8e 93       	st	-X, r24
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	13 96       	adiw	r26, 0x03	; 3
    18da:	9c 93       	st	X, r25
    18dc:	8e 93       	st	-X, r24
    18de:	12 97       	sbiw	r26, 0x02	; 2
    18e0:	e0 e0       	ldi	r30, 0x00	; 0
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <free+0xe4>
    18e6:	fb 01       	movw	r30, r22
    18e8:	bc 01       	movw	r22, r24
    18ea:	db 01       	movw	r26, r22
    18ec:	12 96       	adiw	r26, 0x02	; 2
    18ee:	8d 91       	ld	r24, X+
    18f0:	9c 91       	ld	r25, X
    18f2:	13 97       	sbiw	r26, 0x03	; 3
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	b9 f7       	brne	.-18     	; 0x18e6 <free+0xe0>
    18f8:	cb 01       	movw	r24, r22
    18fa:	02 96       	adiw	r24, 0x02	; 2
    18fc:	2d 91       	ld	r18, X+
    18fe:	3c 91       	ld	r19, X
    1900:	11 97       	sbiw	r26, 0x01	; 1
    1902:	82 0f       	add	r24, r18
    1904:	93 1f       	adc	r25, r19
    1906:	20 91 20 05 	lds	r18, 0x0520
    190a:	30 91 21 05 	lds	r19, 0x0521
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	69 f4       	brne	.+26     	; 0x192e <free+0x128>
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	29 f4       	brne	.+10     	; 0x1922 <free+0x11c>
    1918:	10 92 23 05 	sts	0x0523, r1
    191c:	10 92 22 05 	sts	0x0522, r1
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <free+0x120>
    1922:	13 82       	std	Z+3, r1	; 0x03
    1924:	12 82       	std	Z+2, r1	; 0x02
    1926:	70 93 21 05 	sts	0x0521, r23
    192a:	60 93 20 05 	sts	0x0520, r22
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <atoi>:
    1938:	fc 01       	movw	r30, r24
    193a:	88 27       	eor	r24, r24
    193c:	99 27       	eor	r25, r25
    193e:	e8 94       	clt
    1940:	21 91       	ld	r18, Z+
    1942:	20 32       	cpi	r18, 0x20	; 32
    1944:	e9 f3       	breq	.-6      	; 0x1940 <atoi+0x8>
    1946:	29 30       	cpi	r18, 0x09	; 9
    1948:	10 f0       	brcs	.+4      	; 0x194e <atoi+0x16>
    194a:	2e 30       	cpi	r18, 0x0E	; 14
    194c:	c8 f3       	brcs	.-14     	; 0x1940 <atoi+0x8>
    194e:	2b 32       	cpi	r18, 0x2B	; 43
    1950:	41 f0       	breq	.+16     	; 0x1962 <atoi+0x2a>
    1952:	2d 32       	cpi	r18, 0x2D	; 45
    1954:	39 f4       	brne	.+14     	; 0x1964 <atoi+0x2c>
    1956:	68 94       	set
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <atoi+0x2a>
    195a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__mulhi_const_10>
    195e:	82 0f       	add	r24, r18
    1960:	91 1d       	adc	r25, r1
    1962:	21 91       	ld	r18, Z+
    1964:	20 53       	subi	r18, 0x30	; 48
    1966:	2a 30       	cpi	r18, 0x0A	; 10
    1968:	c0 f3       	brcs	.-16     	; 0x195a <atoi+0x22>
    196a:	1e f4       	brtc	.+6      	; 0x1972 <atoi+0x3a>
    196c:	90 95       	com	r25
    196e:	81 95       	neg	r24
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	08 95       	ret

00001974 <strtok>:
    1974:	41 ef       	ldi	r20, 0xF1	; 241
    1976:	53 e0       	ldi	r21, 0x03	; 3
    1978:	0e 94 cf 0c 	call	0x199e	; 0x199e <strtok_r>
    197c:	08 95       	ret

0000197e <strcmp>:
    197e:	fb 01       	movw	r30, r22
    1980:	dc 01       	movw	r26, r24
    1982:	8d 91       	ld	r24, X+
    1984:	01 90       	ld	r0, Z+
    1986:	80 19       	sub	r24, r0
    1988:	01 10       	cpse	r0, r1
    198a:	d9 f3       	breq	.-10     	; 0x1982 <strcmp+0x4>
    198c:	99 0b       	sbc	r25, r25
    198e:	08 95       	ret

00001990 <strcpy>:
    1990:	fb 01       	movw	r30, r22
    1992:	dc 01       	movw	r26, r24
    1994:	01 90       	ld	r0, Z+
    1996:	0d 92       	st	X+, r0
    1998:	00 20       	and	r0, r0
    199a:	e1 f7       	brne	.-8      	; 0x1994 <strcpy+0x4>
    199c:	08 95       	ret

0000199e <strtok_r>:
    199e:	fa 01       	movw	r30, r20
    19a0:	a1 91       	ld	r26, Z+
    19a2:	b0 81       	ld	r27, Z
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	19 f4       	brne	.+6      	; 0x19ae <strtok_r+0x10>
    19a8:	10 97       	sbiw	r26, 0x00	; 0
    19aa:	e1 f0       	breq	.+56     	; 0x19e4 <strtok_r+0x46>
    19ac:	cd 01       	movw	r24, r26
    19ae:	dc 01       	movw	r26, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0d 90       	ld	r0, X+
    19b4:	00 20       	and	r0, r0
    19b6:	11 f4       	brne	.+4      	; 0x19bc <strtok_r+0x1e>
    19b8:	c0 01       	movw	r24, r0
    19ba:	13 c0       	rjmp	.+38     	; 0x19e2 <strtok_r+0x44>
    19bc:	fb 01       	movw	r30, r22
    19be:	21 91       	ld	r18, Z+
    19c0:	22 23       	and	r18, r18
    19c2:	19 f0       	breq	.+6      	; 0x19ca <strtok_r+0x2c>
    19c4:	20 15       	cp	r18, r0
    19c6:	d9 f7       	brne	.-10     	; 0x19be <strtok_r+0x20>
    19c8:	f3 cf       	rjmp	.-26     	; 0x19b0 <strtok_r+0x12>
    19ca:	fb 01       	movw	r30, r22
    19cc:	21 91       	ld	r18, Z+
    19ce:	20 15       	cp	r18, r0
    19d0:	19 f4       	brne	.+6      	; 0x19d8 <strtok_r+0x3a>
    19d2:	1e 92       	st	-X, r1
    19d4:	11 96       	adiw	r26, 0x01	; 1
    19d6:	06 c0       	rjmp	.+12     	; 0x19e4 <strtok_r+0x46>
    19d8:	22 23       	and	r18, r18
    19da:	c1 f7       	brne	.-16     	; 0x19cc <strtok_r+0x2e>
    19dc:	0d 90       	ld	r0, X+
    19de:	00 20       	and	r0, r0
    19e0:	a1 f7       	brne	.-24     	; 0x19ca <strtok_r+0x2c>
    19e2:	d0 01       	movw	r26, r0
    19e4:	fa 01       	movw	r30, r20
    19e6:	a1 93       	st	Z+, r26
    19e8:	b0 83       	st	Z, r27
    19ea:	08 95       	ret

000019ec <__mulhi_const_10>:
    19ec:	7a e0       	ldi	r23, 0x0A	; 10
    19ee:	97 9f       	mul	r25, r23
    19f0:	90 2d       	mov	r25, r0
    19f2:	87 9f       	mul	r24, r23
    19f4:	80 2d       	mov	r24, r0
    19f6:	91 0d       	add	r25, r1
    19f8:	11 24       	eor	r1, r1
    19fa:	08 95       	ret

000019fc <fgets>:
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	8c 01       	movw	r16, r24
    1a0e:	6a 01       	movw	r12, r20
    1a10:	fa 01       	movw	r30, r20
    1a12:	83 81       	ldd	r24, Z+3	; 0x03
    1a14:	80 ff       	sbrs	r24, 0
    1a16:	1a c0       	rjmp	.+52     	; 0x1a4c <fgets+0x50>
    1a18:	16 16       	cp	r1, r22
    1a1a:	17 06       	cpc	r1, r23
    1a1c:	bc f4       	brge	.+46     	; 0x1a4c <fgets+0x50>
    1a1e:	7b 01       	movw	r14, r22
    1a20:	e8 01       	movw	r28, r16
    1a22:	0e c0       	rjmp	.+28     	; 0x1a40 <fgets+0x44>
    1a24:	c6 01       	movw	r24, r12
    1a26:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <fgetc>
    1a2a:	ff ef       	ldi	r31, 0xFF	; 255
    1a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a2e:	9f 07       	cpc	r25, r31
    1a30:	69 f0       	breq	.+26     	; 0x1a4c <fgets+0x50>
    1a32:	89 93       	st	Y+, r24
    1a34:	08 94       	sec
    1a36:	e1 08       	sbc	r14, r1
    1a38:	f1 08       	sbc	r15, r1
    1a3a:	8a 30       	cpi	r24, 0x0A	; 10
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	21 f0       	breq	.+8      	; 0x1a48 <fgets+0x4c>
    1a40:	21 e0       	ldi	r18, 0x01	; 1
    1a42:	e2 16       	cp	r14, r18
    1a44:	f1 04       	cpc	r15, r1
    1a46:	71 f7       	brne	.-36     	; 0x1a24 <fgets+0x28>
    1a48:	18 82       	st	Y, r1
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <fgets+0x54>
    1a4c:	00 e0       	ldi	r16, 0x00	; 0
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	c8 01       	movw	r24, r16
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	08 95       	ret

00001a64 <gets>:
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	8c 01       	movw	r16, r24
    1a6e:	e0 91 24 05 	lds	r30, 0x0524
    1a72:	f0 91 25 05 	lds	r31, 0x0525
    1a76:	83 81       	ldd	r24, Z+3	; 0x03
    1a78:	80 ff       	sbrs	r24, 0
    1a7a:	12 c0       	rjmp	.+36     	; 0x1aa0 <gets+0x3c>
    1a7c:	e8 01       	movw	r28, r16
    1a7e:	80 91 24 05 	lds	r24, 0x0524
    1a82:	90 91 25 05 	lds	r25, 0x0525
    1a86:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <fgetc>
    1a8a:	2f ef       	ldi	r18, 0xFF	; 255
    1a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a8e:	92 07       	cpc	r25, r18
    1a90:	39 f0       	breq	.+14     	; 0x1aa0 <gets+0x3c>
    1a92:	89 93       	st	Y+, r24
    1a94:	8a 30       	cpi	r24, 0x0A	; 10
    1a96:	91 05       	cpc	r25, r1
    1a98:	91 f7       	brne	.-28     	; 0x1a7e <gets+0x1a>
    1a9a:	21 97       	sbiw	r28, 0x01	; 1
    1a9c:	18 82       	st	Y, r1
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <gets+0x40>
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
    1aa4:	c8 01       	movw	r24, r16
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	08 95       	ret

00001ab0 <printf>:
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	fe 01       	movw	r30, r28
    1aba:	36 96       	adiw	r30, 0x06	; 6
    1abc:	61 91       	ld	r22, Z+
    1abe:	71 91       	ld	r23, Z+
    1ac0:	80 91 26 05 	lds	r24, 0x0526
    1ac4:	90 91 27 05 	lds	r25, 0x0527
    1ac8:	af 01       	movw	r20, r30
    1aca:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <vfprintf>
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <putchar>:
    1ad4:	60 91 26 05 	lds	r22, 0x0526
    1ad8:	70 91 27 05 	lds	r23, 0x0527
    1adc:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1ae0:	08 95       	ret

00001ae2 <puts>:
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	8c 01       	movw	r16, r24
    1aec:	e0 91 26 05 	lds	r30, 0x0526
    1af0:	f0 91 27 05 	lds	r31, 0x0527
    1af4:	83 81       	ldd	r24, Z+3	; 0x03
    1af6:	81 ff       	sbrs	r24, 1
    1af8:	1a c0       	rjmp	.+52     	; 0x1b2e <puts+0x4c>
    1afa:	c0 e0       	ldi	r28, 0x00	; 0
    1afc:	d0 e0       	ldi	r29, 0x00	; 0
    1afe:	05 c0       	rjmp	.+10     	; 0x1b0a <puts+0x28>
    1b00:	19 95       	eicall
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <puts+0x28>
    1b06:	cf ef       	ldi	r28, 0xFF	; 255
    1b08:	df ef       	ldi	r29, 0xFF	; 255
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	81 91       	ld	r24, Z+
    1b0e:	8f 01       	movw	r16, r30
    1b10:	60 91 26 05 	lds	r22, 0x0526
    1b14:	70 91 27 05 	lds	r23, 0x0527
    1b18:	db 01       	movw	r26, r22
    1b1a:	18 96       	adiw	r26, 0x08	; 8
    1b1c:	ed 91       	ld	r30, X+
    1b1e:	fc 91       	ld	r31, X
    1b20:	19 97       	sbiw	r26, 0x09	; 9
    1b22:	88 23       	and	r24, r24
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <puts+0x1e>
    1b26:	8a e0       	ldi	r24, 0x0A	; 10
    1b28:	19 95       	eicall
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	11 f0       	breq	.+4      	; 0x1b32 <puts+0x50>
    1b2e:	cf ef       	ldi	r28, 0xFF	; 255
    1b30:	df ef       	ldi	r29, 0xFF	; 255
    1b32:	ce 01       	movw	r24, r28
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	08 95       	ret

00001b3e <sprintf>:
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	0e 89       	ldd	r16, Y+22	; 0x16
    1b58:	1f 89       	ldd	r17, Y+23	; 0x17
    1b5a:	86 e0       	ldi	r24, 0x06	; 6
    1b5c:	8c 83       	std	Y+4, r24	; 0x04
    1b5e:	1a 83       	std	Y+2, r17	; 0x02
    1b60:	09 83       	std	Y+1, r16	; 0x01
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	9f e7       	ldi	r25, 0x7F	; 127
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	ae 01       	movw	r20, r28
    1b6c:	46 5e       	subi	r20, 0xE6	; 230
    1b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b70:	ce 01       	movw	r24, r28
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	68 8d       	ldd	r22, Y+24	; 0x18
    1b76:	79 8d       	ldd	r23, Y+25	; 0x19
    1b78:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <vfprintf>
    1b7c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b7e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b80:	e0 0f       	add	r30, r16
    1b82:	f1 1f       	adc	r31, r17
    1b84:	10 82       	st	Z, r1
    1b86:	2e 96       	adiw	r28, 0x0e	; 14
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	08 95       	ret

00001b9c <vfprintf>:
    1b9c:	2f 92       	push	r2
    1b9e:	3f 92       	push	r3
    1ba0:	4f 92       	push	r4
    1ba2:	5f 92       	push	r5
    1ba4:	6f 92       	push	r6
    1ba6:	7f 92       	push	r7
    1ba8:	8f 92       	push	r8
    1baa:	9f 92       	push	r9
    1bac:	af 92       	push	r10
    1bae:	bf 92       	push	r11
    1bb0:	cf 92       	push	r12
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	2d 97       	sbiw	r28, 0x0d	; 13
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	3c 01       	movw	r6, r24
    1bd2:	7d 87       	std	Y+13, r23	; 0x0d
    1bd4:	6c 87       	std	Y+12, r22	; 0x0c
    1bd6:	5a 01       	movw	r10, r20
    1bd8:	fc 01       	movw	r30, r24
    1bda:	17 82       	std	Z+7, r1	; 0x07
    1bdc:	16 82       	std	Z+6, r1	; 0x06
    1bde:	83 81       	ldd	r24, Z+3	; 0x03
    1be0:	81 ff       	sbrs	r24, 1
    1be2:	c8 c1       	rjmp	.+912    	; 0x1f74 <vfprintf+0x3d8>
    1be4:	2e 01       	movw	r4, r28
    1be6:	08 94       	sec
    1be8:	41 1c       	adc	r4, r1
    1bea:	51 1c       	adc	r5, r1
    1bec:	f3 01       	movw	r30, r6
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bf2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bf4:	93 fd       	sbrc	r25, 3
    1bf6:	85 91       	lpm	r24, Z+
    1bf8:	93 ff       	sbrs	r25, 3
    1bfa:	81 91       	ld	r24, Z+
    1bfc:	fd 87       	std	Y+13, r31	; 0x0d
    1bfe:	ec 87       	std	Y+12, r30	; 0x0c
    1c00:	88 23       	and	r24, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <vfprintf+0x6a>
    1c04:	b3 c1       	rjmp	.+870    	; 0x1f6c <vfprintf+0x3d0>
    1c06:	85 32       	cpi	r24, 0x25	; 37
    1c08:	41 f4       	brne	.+16     	; 0x1c1a <vfprintf+0x7e>
    1c0a:	93 fd       	sbrc	r25, 3
    1c0c:	85 91       	lpm	r24, Z+
    1c0e:	93 ff       	sbrs	r25, 3
    1c10:	81 91       	ld	r24, Z+
    1c12:	fd 87       	std	Y+13, r31	; 0x0d
    1c14:	ec 87       	std	Y+12, r30	; 0x0c
    1c16:	85 32       	cpi	r24, 0x25	; 37
    1c18:	29 f4       	brne	.+10     	; 0x1c24 <vfprintf+0x88>
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	b3 01       	movw	r22, r6
    1c1e:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1c22:	e4 cf       	rjmp	.-56     	; 0x1bec <vfprintf+0x50>
    1c24:	ff 24       	eor	r15, r15
    1c26:	ee 24       	eor	r14, r14
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	10 32       	cpi	r17, 0x20	; 32
    1c2c:	b0 f4       	brcc	.+44     	; 0x1c5a <vfprintf+0xbe>
    1c2e:	8b 32       	cpi	r24, 0x2B	; 43
    1c30:	69 f0       	breq	.+26     	; 0x1c4c <vfprintf+0xb0>
    1c32:	8c 32       	cpi	r24, 0x2C	; 44
    1c34:	28 f4       	brcc	.+10     	; 0x1c40 <vfprintf+0xa4>
    1c36:	80 32       	cpi	r24, 0x20	; 32
    1c38:	51 f0       	breq	.+20     	; 0x1c4e <vfprintf+0xb2>
    1c3a:	83 32       	cpi	r24, 0x23	; 35
    1c3c:	71 f4       	brne	.+28     	; 0x1c5a <vfprintf+0xbe>
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <vfprintf+0xba>
    1c40:	8d 32       	cpi	r24, 0x2D	; 45
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <vfprintf+0xb6>
    1c44:	80 33       	cpi	r24, 0x30	; 48
    1c46:	49 f4       	brne	.+18     	; 0x1c5a <vfprintf+0xbe>
    1c48:	11 60       	ori	r17, 0x01	; 1
    1c4a:	2c c0       	rjmp	.+88     	; 0x1ca4 <vfprintf+0x108>
    1c4c:	12 60       	ori	r17, 0x02	; 2
    1c4e:	14 60       	ori	r17, 0x04	; 4
    1c50:	29 c0       	rjmp	.+82     	; 0x1ca4 <vfprintf+0x108>
    1c52:	18 60       	ori	r17, 0x08	; 8
    1c54:	27 c0       	rjmp	.+78     	; 0x1ca4 <vfprintf+0x108>
    1c56:	10 61       	ori	r17, 0x10	; 16
    1c58:	25 c0       	rjmp	.+74     	; 0x1ca4 <vfprintf+0x108>
    1c5a:	17 fd       	sbrc	r17, 7
    1c5c:	2e c0       	rjmp	.+92     	; 0x1cba <vfprintf+0x11e>
    1c5e:	28 2f       	mov	r18, r24
    1c60:	20 53       	subi	r18, 0x30	; 48
    1c62:	2a 30       	cpi	r18, 0x0A	; 10
    1c64:	98 f4       	brcc	.+38     	; 0x1c8c <vfprintf+0xf0>
    1c66:	16 ff       	sbrs	r17, 6
    1c68:	08 c0       	rjmp	.+16     	; 0x1c7a <vfprintf+0xde>
    1c6a:	8f 2d       	mov	r24, r15
    1c6c:	88 0f       	add	r24, r24
    1c6e:	f8 2e       	mov	r15, r24
    1c70:	ff 0c       	add	r15, r15
    1c72:	ff 0c       	add	r15, r15
    1c74:	f8 0e       	add	r15, r24
    1c76:	f2 0e       	add	r15, r18
    1c78:	15 c0       	rjmp	.+42     	; 0x1ca4 <vfprintf+0x108>
    1c7a:	8e 2d       	mov	r24, r14
    1c7c:	88 0f       	add	r24, r24
    1c7e:	e8 2e       	mov	r14, r24
    1c80:	ee 0c       	add	r14, r14
    1c82:	ee 0c       	add	r14, r14
    1c84:	e8 0e       	add	r14, r24
    1c86:	e2 0e       	add	r14, r18
    1c88:	10 62       	ori	r17, 0x20	; 32
    1c8a:	0c c0       	rjmp	.+24     	; 0x1ca4 <vfprintf+0x108>
    1c8c:	8e 32       	cpi	r24, 0x2E	; 46
    1c8e:	21 f4       	brne	.+8      	; 0x1c98 <vfprintf+0xfc>
    1c90:	16 fd       	sbrc	r17, 6
    1c92:	6c c1       	rjmp	.+728    	; 0x1f6c <vfprintf+0x3d0>
    1c94:	10 64       	ori	r17, 0x40	; 64
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <vfprintf+0x108>
    1c98:	8c 36       	cpi	r24, 0x6C	; 108
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <vfprintf+0x104>
    1c9c:	10 68       	ori	r17, 0x80	; 128
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0x108>
    1ca0:	88 36       	cpi	r24, 0x68	; 104
    1ca2:	59 f4       	brne	.+22     	; 0x1cba <vfprintf+0x11e>
    1ca4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ca6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1ca8:	93 fd       	sbrc	r25, 3
    1caa:	85 91       	lpm	r24, Z+
    1cac:	93 ff       	sbrs	r25, 3
    1cae:	81 91       	ld	r24, Z+
    1cb0:	fd 87       	std	Y+13, r31	; 0x0d
    1cb2:	ec 87       	std	Y+12, r30	; 0x0c
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <vfprintf+0x11e>
    1cb8:	b8 cf       	rjmp	.-144    	; 0x1c2a <vfprintf+0x8e>
    1cba:	98 2f       	mov	r25, r24
    1cbc:	95 54       	subi	r25, 0x45	; 69
    1cbe:	93 30       	cpi	r25, 0x03	; 3
    1cc0:	18 f0       	brcs	.+6      	; 0x1cc8 <vfprintf+0x12c>
    1cc2:	90 52       	subi	r25, 0x20	; 32
    1cc4:	93 30       	cpi	r25, 0x03	; 3
    1cc6:	38 f4       	brcc	.+14     	; 0x1cd6 <vfprintf+0x13a>
    1cc8:	24 e0       	ldi	r18, 0x04	; 4
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	a2 0e       	add	r10, r18
    1cce:	b3 1e       	adc	r11, r19
    1cd0:	3f e3       	ldi	r19, 0x3F	; 63
    1cd2:	39 83       	std	Y+1, r19	; 0x01
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <vfprintf+0x158>
    1cd6:	83 36       	cpi	r24, 0x63	; 99
    1cd8:	31 f0       	breq	.+12     	; 0x1ce6 <vfprintf+0x14a>
    1cda:	83 37       	cpi	r24, 0x73	; 115
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <vfprintf+0x162>
    1cde:	83 35       	cpi	r24, 0x53	; 83
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <vfprintf+0x148>
    1ce2:	5a c0       	rjmp	.+180    	; 0x1d98 <vfprintf+0x1fc>
    1ce4:	22 c0       	rjmp	.+68     	; 0x1d2a <vfprintf+0x18e>
    1ce6:	f5 01       	movw	r30, r10
    1ce8:	80 81       	ld	r24, Z
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	22 e0       	ldi	r18, 0x02	; 2
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	a2 0e       	add	r10, r18
    1cf2:	b3 1e       	adc	r11, r19
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	c2 2e       	mov	r12, r18
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	42 01       	movw	r8, r4
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <vfprintf+0x18a>
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	29 2e       	mov	r2, r25
    1d02:	31 2c       	mov	r3, r1
    1d04:	2a 0c       	add	r2, r10
    1d06:	3b 1c       	adc	r3, r11
    1d08:	f5 01       	movw	r30, r10
    1d0a:	80 80       	ld	r8, Z
    1d0c:	91 80       	ldd	r9, Z+1	; 0x01
    1d0e:	16 ff       	sbrs	r17, 6
    1d10:	03 c0       	rjmp	.+6      	; 0x1d18 <vfprintf+0x17c>
    1d12:	6f 2d       	mov	r22, r15
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <vfprintf+0x180>
    1d18:	6f ef       	ldi	r22, 0xFF	; 255
    1d1a:	7f ef       	ldi	r23, 0xFF	; 255
    1d1c:	c4 01       	movw	r24, r8
    1d1e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <strnlen>
    1d22:	6c 01       	movw	r12, r24
    1d24:	51 01       	movw	r10, r2
    1d26:	1f 77       	andi	r17, 0x7F	; 127
    1d28:	15 c0       	rjmp	.+42     	; 0x1d54 <vfprintf+0x1b8>
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	28 2e       	mov	r2, r24
    1d2e:	31 2c       	mov	r3, r1
    1d30:	2a 0c       	add	r2, r10
    1d32:	3b 1c       	adc	r3, r11
    1d34:	f5 01       	movw	r30, r10
    1d36:	80 80       	ld	r8, Z
    1d38:	91 80       	ldd	r9, Z+1	; 0x01
    1d3a:	16 ff       	sbrs	r17, 6
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <vfprintf+0x1a8>
    1d3e:	6f 2d       	mov	r22, r15
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x1ac>
    1d44:	6f ef       	ldi	r22, 0xFF	; 255
    1d46:	7f ef       	ldi	r23, 0xFF	; 255
    1d48:	c4 01       	movw	r24, r8
    1d4a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <strnlen_P>
    1d4e:	6c 01       	movw	r12, r24
    1d50:	10 68       	ori	r17, 0x80	; 128
    1d52:	51 01       	movw	r10, r2
    1d54:	13 fd       	sbrc	r17, 3
    1d56:	1c c0       	rjmp	.+56     	; 0x1d90 <vfprintf+0x1f4>
    1d58:	06 c0       	rjmp	.+12     	; 0x1d66 <vfprintf+0x1ca>
    1d5a:	80 e2       	ldi	r24, 0x20	; 32
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	b3 01       	movw	r22, r6
    1d60:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d64:	ea 94       	dec	r14
    1d66:	8e 2d       	mov	r24, r14
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	c8 16       	cp	r12, r24
    1d6c:	d9 06       	cpc	r13, r25
    1d6e:	a8 f3       	brcs	.-22     	; 0x1d5a <vfprintf+0x1be>
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <vfprintf+0x1f4>
    1d72:	f4 01       	movw	r30, r8
    1d74:	17 fd       	sbrc	r17, 7
    1d76:	85 91       	lpm	r24, Z+
    1d78:	17 ff       	sbrs	r17, 7
    1d7a:	81 91       	ld	r24, Z+
    1d7c:	4f 01       	movw	r8, r30
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	b3 01       	movw	r22, r6
    1d82:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1d86:	e1 10       	cpse	r14, r1
    1d88:	ea 94       	dec	r14
    1d8a:	08 94       	sec
    1d8c:	c1 08       	sbc	r12, r1
    1d8e:	d1 08       	sbc	r13, r1
    1d90:	c1 14       	cp	r12, r1
    1d92:	d1 04       	cpc	r13, r1
    1d94:	71 f7       	brne	.-36     	; 0x1d72 <vfprintf+0x1d6>
    1d96:	e7 c0       	rjmp	.+462    	; 0x1f66 <vfprintf+0x3ca>
    1d98:	84 36       	cpi	r24, 0x64	; 100
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <vfprintf+0x204>
    1d9c:	89 36       	cpi	r24, 0x69	; 105
    1d9e:	51 f5       	brne	.+84     	; 0x1df4 <vfprintf+0x258>
    1da0:	f5 01       	movw	r30, r10
    1da2:	17 ff       	sbrs	r17, 7
    1da4:	07 c0       	rjmp	.+14     	; 0x1db4 <vfprintf+0x218>
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	a2 81       	ldd	r26, Z+2	; 0x02
    1dac:	b3 81       	ldd	r27, Z+3	; 0x03
    1dae:	24 e0       	ldi	r18, 0x04	; 4
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	08 c0       	rjmp	.+16     	; 0x1dc4 <vfprintf+0x228>
    1db4:	80 81       	ld	r24, Z
    1db6:	91 81       	ldd	r25, Z+1	; 0x01
    1db8:	aa 27       	eor	r26, r26
    1dba:	97 fd       	sbrc	r25, 7
    1dbc:	a0 95       	com	r26
    1dbe:	ba 2f       	mov	r27, r26
    1dc0:	22 e0       	ldi	r18, 0x02	; 2
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	a2 0e       	add	r10, r18
    1dc6:	b3 1e       	adc	r11, r19
    1dc8:	01 2f       	mov	r16, r17
    1dca:	0f 76       	andi	r16, 0x6F	; 111
    1dcc:	b7 ff       	sbrs	r27, 7
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <vfprintf+0x244>
    1dd0:	b0 95       	com	r27
    1dd2:	a0 95       	com	r26
    1dd4:	90 95       	com	r25
    1dd6:	81 95       	neg	r24
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	af 4f       	sbci	r26, 0xFF	; 255
    1ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dde:	00 68       	ori	r16, 0x80	; 128
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	a2 01       	movw	r20, r4
    1de6:	2a e0       	ldi	r18, 0x0A	; 10
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	0e 94 57 10 	call	0x20ae	; 0x20ae <__ultoa_invert>
    1dee:	d8 2e       	mov	r13, r24
    1df0:	d4 18       	sub	r13, r4
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <vfprintf+0x2d6>
    1df4:	85 37       	cpi	r24, 0x75	; 117
    1df6:	21 f4       	brne	.+8      	; 0x1e00 <vfprintf+0x264>
    1df8:	1f 7e       	andi	r17, 0xEF	; 239
    1dfa:	2a e0       	ldi	r18, 0x0A	; 10
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	20 c0       	rjmp	.+64     	; 0x1e40 <vfprintf+0x2a4>
    1e00:	19 7f       	andi	r17, 0xF9	; 249
    1e02:	8f 36       	cpi	r24, 0x6F	; 111
    1e04:	a9 f0       	breq	.+42     	; 0x1e30 <vfprintf+0x294>
    1e06:	80 37       	cpi	r24, 0x70	; 112
    1e08:	20 f4       	brcc	.+8      	; 0x1e12 <vfprintf+0x276>
    1e0a:	88 35       	cpi	r24, 0x58	; 88
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <vfprintf+0x274>
    1e0e:	ae c0       	rjmp	.+348    	; 0x1f6c <vfprintf+0x3d0>
    1e10:	0b c0       	rjmp	.+22     	; 0x1e28 <vfprintf+0x28c>
    1e12:	80 37       	cpi	r24, 0x70	; 112
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <vfprintf+0x282>
    1e16:	88 37       	cpi	r24, 0x78	; 120
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <vfprintf+0x280>
    1e1a:	a8 c0       	rjmp	.+336    	; 0x1f6c <vfprintf+0x3d0>
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <vfprintf+0x284>
    1e1e:	10 61       	ori	r17, 0x10	; 16
    1e20:	14 ff       	sbrs	r17, 4
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <vfprintf+0x29a>
    1e24:	14 60       	ori	r17, 0x04	; 4
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <vfprintf+0x29a>
    1e28:	14 ff       	sbrs	r17, 4
    1e2a:	08 c0       	rjmp	.+16     	; 0x1e3c <vfprintf+0x2a0>
    1e2c:	16 60       	ori	r17, 0x06	; 6
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <vfprintf+0x2a0>
    1e30:	28 e0       	ldi	r18, 0x08	; 8
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	05 c0       	rjmp	.+10     	; 0x1e40 <vfprintf+0x2a4>
    1e36:	20 e1       	ldi	r18, 0x10	; 16
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <vfprintf+0x2a4>
    1e3c:	20 e1       	ldi	r18, 0x10	; 16
    1e3e:	32 e0       	ldi	r19, 0x02	; 2
    1e40:	f5 01       	movw	r30, r10
    1e42:	17 ff       	sbrs	r17, 7
    1e44:	07 c0       	rjmp	.+14     	; 0x1e54 <vfprintf+0x2b8>
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	44 e0       	ldi	r20, 0x04	; 4
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	06 c0       	rjmp	.+12     	; 0x1e60 <vfprintf+0x2c4>
    1e54:	60 81       	ld	r22, Z
    1e56:	71 81       	ldd	r23, Z+1	; 0x01
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	42 e0       	ldi	r20, 0x02	; 2
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	a4 0e       	add	r10, r20
    1e62:	b5 1e       	adc	r11, r21
    1e64:	a2 01       	movw	r20, r4
    1e66:	0e 94 57 10 	call	0x20ae	; 0x20ae <__ultoa_invert>
    1e6a:	d8 2e       	mov	r13, r24
    1e6c:	d4 18       	sub	r13, r4
    1e6e:	01 2f       	mov	r16, r17
    1e70:	0f 77       	andi	r16, 0x7F	; 127
    1e72:	06 ff       	sbrs	r16, 6
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <vfprintf+0x2ec>
    1e76:	0e 7f       	andi	r16, 0xFE	; 254
    1e78:	df 14       	cp	r13, r15
    1e7a:	30 f4       	brcc	.+12     	; 0x1e88 <vfprintf+0x2ec>
    1e7c:	04 ff       	sbrs	r16, 4
    1e7e:	06 c0       	rjmp	.+12     	; 0x1e8c <vfprintf+0x2f0>
    1e80:	02 fd       	sbrc	r16, 2
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <vfprintf+0x2f0>
    1e84:	0f 7e       	andi	r16, 0xEF	; 239
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <vfprintf+0x2f0>
    1e88:	1d 2d       	mov	r17, r13
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <vfprintf+0x2f2>
    1e8c:	1f 2d       	mov	r17, r15
    1e8e:	80 2f       	mov	r24, r16
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	04 ff       	sbrs	r16, 4
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <vfprintf+0x312>
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 0d       	add	r30, r13
    1e9a:	f1 1d       	adc	r31, r1
    1e9c:	20 81       	ld	r18, Z
    1e9e:	20 33       	cpi	r18, 0x30	; 48
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <vfprintf+0x30a>
    1ea2:	09 7e       	andi	r16, 0xE9	; 233
    1ea4:	09 c0       	rjmp	.+18     	; 0x1eb8 <vfprintf+0x31c>
    1ea6:	02 ff       	sbrs	r16, 2
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <vfprintf+0x31a>
    1eaa:	1e 5f       	subi	r17, 0xFE	; 254
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <vfprintf+0x31c>
    1eae:	86 78       	andi	r24, 0x86	; 134
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <vfprintf+0x31c>
    1eb6:	1f 5f       	subi	r17, 0xFF	; 255
    1eb8:	80 2e       	mov	r8, r16
    1eba:	99 24       	eor	r9, r9
    1ebc:	03 fd       	sbrc	r16, 3
    1ebe:	12 c0       	rjmp	.+36     	; 0x1ee4 <vfprintf+0x348>
    1ec0:	00 ff       	sbrs	r16, 0
    1ec2:	0d c0       	rjmp	.+26     	; 0x1ede <vfprintf+0x342>
    1ec4:	fd 2c       	mov	r15, r13
    1ec6:	1e 15       	cp	r17, r14
    1ec8:	50 f4       	brcc	.+20     	; 0x1ede <vfprintf+0x342>
    1eca:	fe 0c       	add	r15, r14
    1ecc:	f1 1a       	sub	r15, r17
    1ece:	1e 2d       	mov	r17, r14
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <vfprintf+0x342>
    1ed2:	80 e2       	ldi	r24, 0x20	; 32
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	b3 01       	movw	r22, r6
    1ed8:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1edc:	1f 5f       	subi	r17, 0xFF	; 255
    1ede:	1e 15       	cp	r17, r14
    1ee0:	c0 f3       	brcs	.-16     	; 0x1ed2 <vfprintf+0x336>
    1ee2:	04 c0       	rjmp	.+8      	; 0x1eec <vfprintf+0x350>
    1ee4:	1e 15       	cp	r17, r14
    1ee6:	10 f4       	brcc	.+4      	; 0x1eec <vfprintf+0x350>
    1ee8:	e1 1a       	sub	r14, r17
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <vfprintf+0x352>
    1eec:	ee 24       	eor	r14, r14
    1eee:	84 fe       	sbrs	r8, 4
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <vfprintf+0x374>
    1ef2:	80 e3       	ldi	r24, 0x30	; 48
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	b3 01       	movw	r22, r6
    1ef8:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1efc:	82 fe       	sbrs	r8, 2
    1efe:	1f c0       	rjmp	.+62     	; 0x1f3e <vfprintf+0x3a2>
    1f00:	81 fe       	sbrs	r8, 1
    1f02:	03 c0       	rjmp	.+6      	; 0x1f0a <vfprintf+0x36e>
    1f04:	88 e5       	ldi	r24, 0x58	; 88
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	10 c0       	rjmp	.+32     	; 0x1f2a <vfprintf+0x38e>
    1f0a:	88 e7       	ldi	r24, 0x78	; 120
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0d c0       	rjmp	.+26     	; 0x1f2a <vfprintf+0x38e>
    1f10:	c4 01       	movw	r24, r8
    1f12:	86 78       	andi	r24, 0x86	; 134
    1f14:	90 70       	andi	r25, 0x00	; 0
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	91 f0       	breq	.+36     	; 0x1f3e <vfprintf+0x3a2>
    1f1a:	81 fc       	sbrc	r8, 1
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <vfprintf+0x386>
    1f1e:	80 e2       	ldi	r24, 0x20	; 32
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <vfprintf+0x388>
    1f22:	8b e2       	ldi	r24, 0x2B	; 43
    1f24:	07 fd       	sbrc	r16, 7
    1f26:	8d e2       	ldi	r24, 0x2D	; 45
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	b3 01       	movw	r22, r6
    1f2c:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f30:	06 c0       	rjmp	.+12     	; 0x1f3e <vfprintf+0x3a2>
    1f32:	80 e3       	ldi	r24, 0x30	; 48
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	b3 01       	movw	r22, r6
    1f38:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f3c:	fa 94       	dec	r15
    1f3e:	df 14       	cp	r13, r15
    1f40:	c0 f3       	brcs	.-16     	; 0x1f32 <vfprintf+0x396>
    1f42:	da 94       	dec	r13
    1f44:	f2 01       	movw	r30, r4
    1f46:	ed 0d       	add	r30, r13
    1f48:	f1 1d       	adc	r31, r1
    1f4a:	80 81       	ld	r24, Z
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b3 01       	movw	r22, r6
    1f50:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f54:	dd 20       	and	r13, r13
    1f56:	a9 f7       	brne	.-22     	; 0x1f42 <vfprintf+0x3a6>
    1f58:	06 c0       	rjmp	.+12     	; 0x1f66 <vfprintf+0x3ca>
    1f5a:	80 e2       	ldi	r24, 0x20	; 32
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	b3 01       	movw	r22, r6
    1f60:	0e 94 2b 10 	call	0x2056	; 0x2056 <fputc>
    1f64:	ea 94       	dec	r14
    1f66:	ee 20       	and	r14, r14
    1f68:	c1 f7       	brne	.-16     	; 0x1f5a <vfprintf+0x3be>
    1f6a:	40 ce       	rjmp	.-896    	; 0x1bec <vfprintf+0x50>
    1f6c:	f3 01       	movw	r30, r6
    1f6e:	86 81       	ldd	r24, Z+6	; 0x06
    1f70:	97 81       	ldd	r25, Z+7	; 0x07
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <vfprintf+0x3dc>
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	2d 96       	adiw	r28, 0x0d	; 13
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	df 90       	pop	r13
    1f92:	cf 90       	pop	r12
    1f94:	bf 90       	pop	r11
    1f96:	af 90       	pop	r10
    1f98:	9f 90       	pop	r9
    1f9a:	8f 90       	pop	r8
    1f9c:	7f 90       	pop	r7
    1f9e:	6f 90       	pop	r6
    1fa0:	5f 90       	pop	r5
    1fa2:	4f 90       	pop	r4
    1fa4:	3f 90       	pop	r3
    1fa6:	2f 90       	pop	r2
    1fa8:	08 95       	ret

00001faa <strnlen_P>:
    1faa:	fc 01       	movw	r30, r24
    1fac:	05 90       	lpm	r0, Z+
    1fae:	61 50       	subi	r22, 0x01	; 1
    1fb0:	70 40       	sbci	r23, 0x00	; 0
    1fb2:	01 10       	cpse	r0, r1
    1fb4:	d8 f7       	brcc	.-10     	; 0x1fac <strnlen_P+0x2>
    1fb6:	80 95       	com	r24
    1fb8:	90 95       	com	r25
    1fba:	8e 0f       	add	r24, r30
    1fbc:	9f 1f       	adc	r25, r31
    1fbe:	08 95       	ret

00001fc0 <strnlen>:
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	61 50       	subi	r22, 0x01	; 1
    1fc4:	70 40       	sbci	r23, 0x00	; 0
    1fc6:	01 90       	ld	r0, Z+
    1fc8:	01 10       	cpse	r0, r1
    1fca:	d8 f7       	brcc	.-10     	; 0x1fc2 <strnlen+0x2>
    1fcc:	80 95       	com	r24
    1fce:	90 95       	com	r25
    1fd0:	8e 0f       	add	r24, r30
    1fd2:	9f 1f       	adc	r25, r31
    1fd4:	08 95       	ret

00001fd6 <fgetc>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	ec 01       	movw	r28, r24
    1fdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fde:	20 ff       	sbrs	r18, 0
    1fe0:	35 c0       	rjmp	.+106    	; 0x204c <fgetc+0x76>
    1fe2:	26 ff       	sbrs	r18, 6
    1fe4:	09 c0       	rjmp	.+18     	; 0x1ff8 <fgetc+0x22>
    1fe6:	2f 7b       	andi	r18, 0xBF	; 191
    1fe8:	2b 83       	std	Y+3, r18	; 0x03
    1fea:	8e 81       	ldd	r24, Y+6	; 0x06
    1fec:	9f 81       	ldd	r25, Y+7	; 0x07
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	9f 83       	std	Y+7, r25	; 0x07
    1ff2:	8e 83       	std	Y+6, r24	; 0x06
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 c0       	rjmp	.+80     	; 0x2048 <fgetc+0x72>
    1ff8:	22 ff       	sbrs	r18, 2
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <fgetc+0x44>
    1ffc:	e8 81       	ld	r30, Y
    1ffe:	f9 81       	ldd	r31, Y+1	; 0x01
    2000:	80 81       	ld	r24, Z
    2002:	99 27       	eor	r25, r25
    2004:	87 fd       	sbrc	r24, 7
    2006:	90 95       	com	r25
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	19 f4       	brne	.+6      	; 0x2012 <fgetc+0x3c>
    200c:	20 62       	ori	r18, 0x20	; 32
    200e:	2b 83       	std	Y+3, r18	; 0x03
    2010:	1d c0       	rjmp	.+58     	; 0x204c <fgetc+0x76>
    2012:	31 96       	adiw	r30, 0x01	; 1
    2014:	f9 83       	std	Y+1, r31	; 0x01
    2016:	e8 83       	st	Y, r30
    2018:	11 c0       	rjmp	.+34     	; 0x203c <fgetc+0x66>
    201a:	ea 85       	ldd	r30, Y+10	; 0x0a
    201c:	fb 85       	ldd	r31, Y+11	; 0x0b
    201e:	ce 01       	movw	r24, r28
    2020:	19 95       	eicall
    2022:	97 ff       	sbrs	r25, 7
    2024:	0b c0       	rjmp	.+22     	; 0x203c <fgetc+0x66>
    2026:	2b 81       	ldd	r18, Y+3	; 0x03
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	8f 3f       	cpi	r24, 0xFF	; 255
    202c:	93 07       	cpc	r25, r19
    202e:	11 f4       	brne	.+4      	; 0x2034 <fgetc+0x5e>
    2030:	80 e1       	ldi	r24, 0x10	; 16
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <fgetc+0x60>
    2034:	80 e2       	ldi	r24, 0x20	; 32
    2036:	82 2b       	or	r24, r18
    2038:	8b 83       	std	Y+3, r24	; 0x03
    203a:	08 c0       	rjmp	.+16     	; 0x204c <fgetc+0x76>
    203c:	2e 81       	ldd	r18, Y+6	; 0x06
    203e:	3f 81       	ldd	r19, Y+7	; 0x07
    2040:	2f 5f       	subi	r18, 0xFF	; 255
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	3f 83       	std	Y+7, r19	; 0x07
    2046:	2e 83       	std	Y+6, r18	; 0x06
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <fgetc+0x7a>
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <fputc>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	8c 01       	movw	r16, r24
    2060:	eb 01       	movw	r28, r22
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	81 ff       	sbrs	r24, 1
    2066:	1b c0       	rjmp	.+54     	; 0x209e <fputc+0x48>
    2068:	82 ff       	sbrs	r24, 2
    206a:	0d c0       	rjmp	.+26     	; 0x2086 <fputc+0x30>
    206c:	2e 81       	ldd	r18, Y+6	; 0x06
    206e:	3f 81       	ldd	r19, Y+7	; 0x07
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	28 17       	cp	r18, r24
    2076:	39 07       	cpc	r19, r25
    2078:	64 f4       	brge	.+24     	; 0x2092 <fputc+0x3c>
    207a:	e8 81       	ld	r30, Y
    207c:	f9 81       	ldd	r31, Y+1	; 0x01
    207e:	01 93       	st	Z+, r16
    2080:	f9 83       	std	Y+1, r31	; 0x01
    2082:	e8 83       	st	Y, r30
    2084:	06 c0       	rjmp	.+12     	; 0x2092 <fputc+0x3c>
    2086:	e8 85       	ldd	r30, Y+8	; 0x08
    2088:	f9 85       	ldd	r31, Y+9	; 0x09
    208a:	80 2f       	mov	r24, r16
    208c:	19 95       	eicall
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	31 f4       	brne	.+12     	; 0x209e <fputc+0x48>
    2092:	8e 81       	ldd	r24, Y+6	; 0x06
    2094:	9f 81       	ldd	r25, Y+7	; 0x07
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	9f 83       	std	Y+7, r25	; 0x07
    209a:	8e 83       	std	Y+6, r24	; 0x06
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <fputc+0x4c>
    209e:	0f ef       	ldi	r16, 0xFF	; 255
    20a0:	1f ef       	ldi	r17, 0xFF	; 255
    20a2:	c8 01       	movw	r24, r16
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	08 95       	ret

000020ae <__ultoa_invert>:
    20ae:	fa 01       	movw	r30, r20
    20b0:	aa 27       	eor	r26, r26
    20b2:	28 30       	cpi	r18, 0x08	; 8
    20b4:	51 f1       	breq	.+84     	; 0x210a <__ultoa_invert+0x5c>
    20b6:	20 31       	cpi	r18, 0x10	; 16
    20b8:	81 f1       	breq	.+96     	; 0x211a <__ultoa_invert+0x6c>
    20ba:	e8 94       	clt
    20bc:	6f 93       	push	r22
    20be:	6e 7f       	andi	r22, 0xFE	; 254
    20c0:	6e 5f       	subi	r22, 0xFE	; 254
    20c2:	7f 4f       	sbci	r23, 0xFF	; 255
    20c4:	8f 4f       	sbci	r24, 0xFF	; 255
    20c6:	9f 4f       	sbci	r25, 0xFF	; 255
    20c8:	af 4f       	sbci	r26, 0xFF	; 255
    20ca:	b1 e0       	ldi	r27, 0x01	; 1
    20cc:	3e d0       	rcall	.+124    	; 0x214a <__ultoa_invert+0x9c>
    20ce:	b4 e0       	ldi	r27, 0x04	; 4
    20d0:	3c d0       	rcall	.+120    	; 0x214a <__ultoa_invert+0x9c>
    20d2:	67 0f       	add	r22, r23
    20d4:	78 1f       	adc	r23, r24
    20d6:	89 1f       	adc	r24, r25
    20d8:	9a 1f       	adc	r25, r26
    20da:	a1 1d       	adc	r26, r1
    20dc:	68 0f       	add	r22, r24
    20de:	79 1f       	adc	r23, r25
    20e0:	8a 1f       	adc	r24, r26
    20e2:	91 1d       	adc	r25, r1
    20e4:	a1 1d       	adc	r26, r1
    20e6:	6a 0f       	add	r22, r26
    20e8:	71 1d       	adc	r23, r1
    20ea:	81 1d       	adc	r24, r1
    20ec:	91 1d       	adc	r25, r1
    20ee:	a1 1d       	adc	r26, r1
    20f0:	20 d0       	rcall	.+64     	; 0x2132 <__ultoa_invert+0x84>
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <__ultoa_invert+0x48>
    20f4:	68 94       	set
    20f6:	3f 91       	pop	r19
    20f8:	2a e0       	ldi	r18, 0x0A	; 10
    20fa:	26 9f       	mul	r18, r22
    20fc:	11 24       	eor	r1, r1
    20fe:	30 19       	sub	r19, r0
    2100:	30 5d       	subi	r19, 0xD0	; 208
    2102:	31 93       	st	Z+, r19
    2104:	de f6       	brtc	.-74     	; 0x20bc <__ultoa_invert+0xe>
    2106:	cf 01       	movw	r24, r30
    2108:	08 95       	ret
    210a:	46 2f       	mov	r20, r22
    210c:	47 70       	andi	r20, 0x07	; 7
    210e:	40 5d       	subi	r20, 0xD0	; 208
    2110:	41 93       	st	Z+, r20
    2112:	b3 e0       	ldi	r27, 0x03	; 3
    2114:	0f d0       	rcall	.+30     	; 0x2134 <__ultoa_invert+0x86>
    2116:	c9 f7       	brne	.-14     	; 0x210a <__ultoa_invert+0x5c>
    2118:	f6 cf       	rjmp	.-20     	; 0x2106 <__ultoa_invert+0x58>
    211a:	46 2f       	mov	r20, r22
    211c:	4f 70       	andi	r20, 0x0F	; 15
    211e:	40 5d       	subi	r20, 0xD0	; 208
    2120:	4a 33       	cpi	r20, 0x3A	; 58
    2122:	18 f0       	brcs	.+6      	; 0x212a <__ultoa_invert+0x7c>
    2124:	49 5d       	subi	r20, 0xD9	; 217
    2126:	31 fd       	sbrc	r19, 1
    2128:	40 52       	subi	r20, 0x20	; 32
    212a:	41 93       	st	Z+, r20
    212c:	02 d0       	rcall	.+4      	; 0x2132 <__ultoa_invert+0x84>
    212e:	a9 f7       	brne	.-22     	; 0x211a <__ultoa_invert+0x6c>
    2130:	ea cf       	rjmp	.-44     	; 0x2106 <__ultoa_invert+0x58>
    2132:	b4 e0       	ldi	r27, 0x04	; 4
    2134:	a6 95       	lsr	r26
    2136:	97 95       	ror	r25
    2138:	87 95       	ror	r24
    213a:	77 95       	ror	r23
    213c:	67 95       	ror	r22
    213e:	ba 95       	dec	r27
    2140:	c9 f7       	brne	.-14     	; 0x2134 <__ultoa_invert+0x86>
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	61 05       	cpc	r22, r1
    2146:	71 05       	cpc	r23, r1
    2148:	08 95       	ret
    214a:	9b 01       	movw	r18, r22
    214c:	ac 01       	movw	r20, r24
    214e:	0a 2e       	mov	r0, r26
    2150:	06 94       	lsr	r0
    2152:	57 95       	ror	r21
    2154:	47 95       	ror	r20
    2156:	37 95       	ror	r19
    2158:	27 95       	ror	r18
    215a:	ba 95       	dec	r27
    215c:	c9 f7       	brne	.-14     	; 0x2150 <__ultoa_invert+0xa2>
    215e:	62 0f       	add	r22, r18
    2160:	73 1f       	adc	r23, r19
    2162:	84 1f       	adc	r24, r20
    2164:	95 1f       	adc	r25, r21
    2166:	a0 1d       	adc	r26, r0
    2168:	08 95       	ret

0000216a <_exit>:
    216a:	f8 94       	cli

0000216c <__stop_program>:
    216c:	ff cf       	rjmp	.-2      	; 0x216c <__stop_program>
