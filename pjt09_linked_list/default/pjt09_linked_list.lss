
pjt09_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800200  0000126e  00001302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000126e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  0080028e  0080028e  00001390  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000288  00000000  00000000  000027e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002204  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104f  00000000  00000000  00004c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001398  00000000  00000000  00005cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e4  00000000  00000000  00007054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e8  00000000  00000000  00007638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000168f  00000000  00000000  00007d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000093af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e6       	ldi	r30, 0x6E	; 110
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 38       	cpi	r26, 0x8E	; 142
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	ae e8       	ldi	r26, 0x8E	; 142
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a6 32       	cpi	r26, 0x26	; 38
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 c8 03 	call	0x790	; 0x790 <main>
     124:	0c 94 35 09 	jmp	0x126a	; 0x126a <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <get_node>:

struct node *get_node()
{
	struct node *cp;	// current pointer

	cp = (struct node *)malloc(sizeof(struct node));
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 49 04 	call	0x892	; 0x892 <malloc>
	return cp;
}
     134:	08 95       	ret

00000136 <free_node>:

void free_node(struct node *np)
{
	free(np);
     136:	0e 94 df 04 	call	0x9be	; 0x9be <free>
}
     13a:	08 95       	ret

0000013c <insert_node_head>:

void insert_node_head(struct node *np)
{
     13c:	fc 01       	movw	r30, r24
	if (!Head) {
     13e:	80 91 8e 02 	lds	r24, 0x028E
     142:	90 91 8f 02 	lds	r25, 0x028F
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	39 f4       	brne	.+14     	; 0x158 <insert_node_head+0x1c>
		Head = np;
     14a:	f0 93 8f 02 	sts	0x028F, r31
     14e:	e0 93 8e 02 	sts	0x028E, r30
		np->link = NULL;
     152:	13 82       	std	Z+3, r1	; 0x03
     154:	12 82       	std	Z+2, r1	; 0x02
     156:	08 95       	ret
	}
	else {
		np->link = Head;
     158:	93 83       	std	Z+3, r25	; 0x03
     15a:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     15c:	f0 93 8f 02 	sts	0x028F, r31
     160:	e0 93 8e 02 	sts	0x028E, r30
     164:	08 95       	ret

00000166 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if (!Head)
     166:	e0 91 8e 02 	lds	r30, 0x028E
     16a:	f0 91 8f 02 	lds	r31, 0x028F
     16e:	30 97       	sbiw	r30, 0x00	; 0
     170:	31 f4       	brne	.+12     	; 0x17e <insert_node_tail+0x18>
		Head = np;
     172:	90 93 8f 02 	sts	0x028F, r25
     176:	80 93 8e 02 	sts	0x028E, r24
     17a:	08 c0       	rjmp	.+16     	; 0x18c <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     17c:	f9 01       	movw	r30, r18
     17e:	22 81       	ldd	r18, Z+2	; 0x02
     180:	33 81       	ldd	r19, Z+3	; 0x03
     182:	21 15       	cp	r18, r1
     184:	31 05       	cpc	r19, r1
     186:	d1 f7       	brne	.-12     	; 0x17c <insert_node_tail+0x16>
		cp->link = np;
     188:	93 83       	std	Z+3, r25	; 0x03
     18a:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     18c:	fc 01       	movw	r30, r24
     18e:	13 82       	std	Z+3, r1	; 0x03
     190:	12 82       	std	Z+2, r1	; 0x02
}
     192:	08 95       	ret

00000194 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
     19a:	20 91 8e 02 	lds	r18, 0x028E
     19e:	30 91 8f 02 	lds	r19, 0x028F
     1a2:	21 15       	cp	r18, r1
     1a4:	31 05       	cpc	r19, r1
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     1a8:	40 81       	ld	r20, Z
     1aa:	51 81       	ldd	r21, Z+1	; 0x01
     1ac:	d9 01       	movw	r26, r18
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
		Head = np;
     1b4:	90 93 8f 02 	sts	0x028F, r25
     1b8:	80 93 8e 02 	sts	0x028E, r24
		np->link = NULL;
     1bc:	13 82       	std	Z+3, r1	; 0x03
     1be:	12 82       	std	Z+2, r1	; 0x02
     1c0:	1d c0       	rjmp	.+58     	; 0x1fc <insert_node_ascn+0x68>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
												pp = cp, cp = cp->link);
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	8d 91       	ld	r24, X+
     1c6:	9c 91       	ld	r25, X
     1c8:	13 97       	sbiw	r26, 0x03	; 3
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     1ca:	ed 01       	movw	r28, r26
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	39 f0       	breq	.+14     	; 0x1de <insert_node_ascn+0x4a>
												pp = cp, cp = cp->link);
     1d0:	dc 01       	movw	r26, r24
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data < np->data;
     1d2:	8d 91       	ld	r24, X+
     1d4:	9c 91       	ld	r25, X
     1d6:	11 97       	sbiw	r26, 0x01	; 1
     1d8:	84 17       	cp	r24, r20
     1da:	95 07       	cpc	r25, r21
     1dc:	94 f3       	brlt	.-28     	; 0x1c2 <insert_node_ascn+0x2e>
												pp = cp, cp = cp->link);
		
		if (pp == NULL) {
     1de:	20 97       	sbiw	r28, 0x00	; 0
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <insert_node_ascn+0x5c>
			np->link = Head;
     1e2:	33 83       	std	Z+3, r19	; 0x03
     1e4:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     1e6:	f0 93 8f 02 	sts	0x028F, r31
     1ea:	e0 93 8e 02 	sts	0x028E, r30
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <insert_node_ascn+0x68>
		}
		else {
			np->link = pp->link;
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	9b 81       	ldd	r25, Y+3	; 0x03
     1f4:	93 83       	std	Z+3, r25	; 0x03
     1f6:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     1f8:	fb 83       	std	Y+3, r31	; 0x03
     1fa:	ea 83       	std	Y+2, r30	; 0x02
		}

	}
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <insert_node_d>:

void insert_node_d(struct node *np)
{
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	fc 01       	movw	r30, r24
		struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
     208:	20 91 8e 02 	lds	r18, 0x028E
     20c:	30 91 8f 02 	lds	r19, 0x028F
     210:	21 15       	cp	r18, r1
     212:	31 05       	cpc	r19, r1
     214:	31 f0       	breq	.+12     	; 0x222 <insert_node_d+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
     216:	40 81       	ld	r20, Z
     218:	51 81       	ldd	r21, Z+1	; 0x01
     21a:	d9 01       	movw	r26, r18
     21c:	c0 e0       	ldi	r28, 0x00	; 0
     21e:	d0 e0       	ldi	r29, 0x00	; 0
     220:	0f c0       	rjmp	.+30     	; 0x240 <insert_node_d+0x3e>
void insert_node_d(struct node *np)
{
		struct node *cp, *pp;	// pp = previous pointer

	if (!Head) {
		Head = np;
     222:	90 93 8f 02 	sts	0x028F, r25
     226:	80 93 8e 02 	sts	0x028E, r24
		np->link = NULL;
     22a:	13 82       	std	Z+3, r1	; 0x03
     22c:	12 82       	std	Z+2, r1	; 0x02
     22e:	1d c0       	rjmp	.+58     	; 0x26a <insert_node_d+0x68>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
												pp = cp, cp = cp->link);
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	13 97       	sbiw	r26, 0x03	; 3
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
     238:	ed 01       	movw	r28, r26
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	39 f0       	breq	.+14     	; 0x24c <insert_node_d+0x4a>
												pp = cp, cp = cp->link);
     23e:	dc 01       	movw	r26, r24
	if (!Head) {
		Head = np;
		np->link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp->data > np->data;
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	11 97       	sbiw	r26, 0x01	; 1
     246:	48 17       	cp	r20, r24
     248:	59 07       	cpc	r21, r25
     24a:	94 f3       	brlt	.-28     	; 0x230 <insert_node_d+0x2e>
												pp = cp, cp = cp->link);
		
		if (pp == NULL) {
     24c:	20 97       	sbiw	r28, 0x00	; 0
     24e:	39 f4       	brne	.+14     	; 0x25e <insert_node_d+0x5c>
			np->link = Head;
     250:	33 83       	std	Z+3, r19	; 0x03
     252:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     254:	f0 93 8f 02 	sts	0x028F, r31
     258:	e0 93 8e 02 	sts	0x028E, r30
     25c:	06 c0       	rjmp	.+12     	; 0x26a <insert_node_d+0x68>
		}
		else {
			np->link = pp->link;
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	9b 81       	ldd	r25, Y+3	; 0x03
     262:	93 83       	std	Z+3, r25	; 0x03
     264:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     266:	fb 83       	std	Y+3, r31	; 0x03
     268:	ea 83       	std	Y+2, r30	; 0x02
		}

	}
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <tour_list>:
void tour_list()
{
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 19 06 	call	0xc32	; 0xc32 <putchar>
	for (cp = Head; cp != NULL; cp = cp->link)
     280:	c0 91 8e 02 	lds	r28, 0x028E
     284:	d0 91 8f 02 	lds	r29, 0x028F
		printf("-->%c ", cp->data);
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     28c:	13 c0       	rjmp	.+38     	; 0x2b4 <tour_list+0x44>
		printf("-->%c ", cp->data);
     28e:	00 d0       	rcall	.+0      	; 0x290 <tour_list+0x20>
     290:	0f 92       	push	r0
     292:	ed b7       	in	r30, 0x3d	; 61
     294:	fe b7       	in	r31, 0x3e	; 62
     296:	12 83       	std	Z+2, r17	; 0x02
     298:	01 83       	std	Z+1, r16	; 0x01
     29a:	88 81       	ld	r24, Y
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	94 83       	std	Z+4, r25	; 0x04
     2a0:	83 83       	std	Z+3, r24	; 0x03
     2a2:	0e 94 07 06 	call	0xc0e	; 0xc0e <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp = Head; cp != NULL; cp = cp->link)
     2a6:	0a 80       	ldd	r0, Y+2	; 0x02
     2a8:	db 81       	ldd	r29, Y+3	; 0x03
     2aa:	c0 2d       	mov	r28, r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	20 97       	sbiw	r28, 0x00	; 0
     2b6:	59 f7       	brne	.-42     	; 0x28e <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     2b8:	8a e0       	ldi	r24, 0x0A	; 10
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 19 06 	call	0xc32	; 0xc32 <putchar>
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <free_list>:

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <free_list+0x14>
		cp = Head;
		Head = cp->link;
     2cc:	fc 01       	movw	r30, r24
     2ce:	22 81       	ldd	r18, Z+2	; 0x02
     2d0:	33 81       	ldd	r19, Z+3	; 0x03
     2d2:	30 93 8f 02 	sts	0x028F, r19
     2d6:	20 93 8e 02 	sts	0x028E, r18
	return cp;
}

void free_node(struct node *np)
{
	free(np);
     2da:	0e 94 df 04 	call	0x9be	; 0x9be <free>

void free_list()
{
	struct node *cp;

	for ( ; Head != NULL; ) {
     2de:	80 91 8e 02 	lds	r24, 0x028E
     2e2:	90 91 8f 02 	lds	r25, 0x028F
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	89 f7       	brne	.-30     	; 0x2cc <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     2ea:	08 95       	ret

000002ec <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init(void) {
	DDRL = PORTL = 0xff;
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	80 93 0b 01 	sts	0x010B, r24
     2f2:	80 93 0a 01 	sts	0x010A, r24
}
     2f6:	08 95       	ret

000002f8 <led_on_all>:

void led_on_all(void) {
	Leds = PORTL = 0x00;
     2f8:	10 92 0b 01 	sts	0x010B, r1
     2fc:	10 92 90 02 	sts	0x0290, r1
}
     300:	08 95       	ret

00000302 <led_off_all>:

void led_off_all(void) {
	Leds = PORTL = 0xff;
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	80 93 0b 01 	sts	0x010B, r24
     308:	80 93 90 02 	sts	0x0290, r24
}
     30c:	08 95       	ret

0000030e <led_on>:

void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <led_on+0xa>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	8a 95       	dec	r24
     31a:	e2 f7       	brpl	.-8      	; 0x314 <led_on+0x6>
     31c:	20 95       	com	r18
     31e:	80 91 90 02 	lds	r24, 0x0290
     322:	28 23       	and	r18, r24
     324:	20 93 90 02 	sts	0x0290, r18
	PORTL = Leds;
     328:	20 93 0b 01 	sts	0x010B, r18
}
     32c:	08 95       	ret

0000032e <led_off>:

void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     32e:	21 e0       	ldi	r18, 0x01	; 1
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	02 c0       	rjmp	.+4      	; 0x338 <led_off+0xa>
     334:	22 0f       	add	r18, r18
     336:	33 1f       	adc	r19, r19
     338:	8a 95       	dec	r24
     33a:	e2 f7       	brpl	.-8      	; 0x334 <led_off+0x6>
     33c:	80 91 90 02 	lds	r24, 0x0290
     340:	82 2b       	or	r24, r18
     342:	80 93 90 02 	sts	0x0290, r24
	PORTL = Leds;
     346:	80 93 0b 01 	sts	0x010B, r24
}
     34a:	08 95       	ret

0000034c <led_set>:

void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     34c:	80 95       	com	r24
     34e:	80 93 90 02 	sts	0x0290, r24
	PORTL = Leds;
     352:	80 93 0b 01 	sts	0x010B, r24
}
     356:	08 95       	ret

00000358 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     358:	f8 94       	cli
		ch = qi_delete();
     35a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <qi_delete>
		sei();
     35e:	78 94       	sei
	} while (ch == 0);
     360:	88 23       	and	r24, r24
     362:	d1 f3       	breq	.-12     	; 0x358 <uart_getchar>

	if (ch == E0T) return -1;
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	11 f0       	breq	.+4      	; 0x36c <uart_getchar+0x14>
	else 		   return ch;
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	9f ef       	ldi	r25, 0xFF	; 255
	else 		   return ch;
}
     370:	08 95       	ret

00000372 <uart_putchar>:
	sbi(UCSR0B, RXEN0);				// RX enable
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
}

int uart_putchar(char ch, FILE *stream)
{
     372:	cf 93       	push	r28
     374:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     376:	8a 30       	cpi	r24, 0x0A	; 10
     378:	19 f4       	brne	.+6      	; 0x380 <uart_putchar+0xe>
     37a:	8d e0       	ldi	r24, 0x0D	; 13
     37c:	0e 94 b9 01 	call	0x372	; 0x372 <uart_putchar>
	cli();
     380:	f8 94       	cli
	if(!uart_busy) {
     382:	80 91 93 02 	lds	r24, 0x0293
     386:	88 23       	and	r24, r24
     388:	59 f4       	brne	.+22     	; 0x3a0 <uart_putchar+0x2e>
		UDR0 = ch;
     38a:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 93 02 	sts	0x0293, r24
     394:	0a c0       	rjmp	.+20     	; 0x3aa <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     396:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     398:	86 ef       	ldi	r24, 0xF6	; 246
     39a:	8a 95       	dec	r24
     39c:	f1 f7       	brne	.-4      	; 0x39a <uart_putchar+0x28>
			_delay_us(100);
			cli();
     39e:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     3a0:	8c 2f       	mov	r24, r28
     3a2:	0e 94 89 03 	call	0x712	; 0x712 <qo_insert>
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	b1 f3       	breq	.-20     	; 0x396 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     3aa:	78 94       	sei
	return 1;
}
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <uart_init>:
FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     3b4:	83 e4       	ldi	r24, 0x43	; 67
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	90 93 21 03 	sts	0x0321, r25
     3bc:	80 93 20 03 	sts	0x0320, r24
     3c0:	81 e5       	ldi	r24, 0x51	; 81
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	90 93 23 03 	sts	0x0323, r25
     3c8:	80 93 22 03 	sts	0x0322, r24
	q_init();
     3cc:	0e 94 39 03 	call	0x672	; 0x672 <q_init>
	uart_busy = 0;
     3d0:	10 92 93 02 	sts	0x0293, r1

	UBRR0H = 0x00; UBRR0L = 0x03;	// 115.2Kbps
     3d4:	10 92 c5 00 	sts	0x00C5, r1
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0B, TXEN0);				// TX enable
     3de:	e1 ec       	ldi	r30, 0xC1	; 193
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	88 60       	ori	r24, 0x08	; 8
     3e6:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);			// TX complete interrupt
     3e8:	80 81       	ld	r24, Z
     3ea:	80 64       	ori	r24, 0x40	; 64
     3ec:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);				// RX enable
     3ee:	80 81       	ld	r24, Z
     3f0:	80 61       	ori	r24, 0x10	; 16
     3f2:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);			// RX complete interrupt
     3f4:	80 81       	ld	r24, Z
     3f6:	80 68       	ori	r24, 0x80	; 128
     3f8:	80 83       	st	Z, r24
}
     3fa:	08 95       	ret

000003fc <uart_echo>:
	if (ch == E0T) return -1;
	else 		   return ch;
}

void uart_echo(char ch)
{
     3fc:	cf 93       	push	r28
     3fe:	c8 2f       	mov	r28, r24
	if (ch == '\n')	uart_echo( '\r' );
     400:	8a 30       	cpi	r24, 0x0A	; 10
     402:	19 f4       	brne	.+6      	; 0x40a <uart_echo+0xe>
     404:	8d e0       	ldi	r24, 0x0D	; 13
     406:	0e 94 fe 01 	call	0x3fc	; 0x3fc <uart_echo>
	if (!uart_busy) {
     40a:	80 91 93 02 	lds	r24, 0x0293
     40e:	88 23       	and	r24, r24
     410:	31 f4       	brne	.+12     	; 0x41e <uart_echo+0x22>
		UDR0 = ch;
     412:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 93 02 	sts	0x0293, r24
     41c:	03 c0       	rjmp	.+6      	; 0x424 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     41e:	8c 2f       	mov	r24, r28
     420:	0e 94 89 03 	call	0x712	; 0x712 <qo_insert>

}
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <__vector_27>:

////////////////////////////////////////////
ISR(USART0_TX_vect)
{
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	0b b6       	in	r0, 0x3b	; 59
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1
     436:	2f 93       	push	r18
     438:	3f 93       	push	r19
     43a:	4f 93       	push	r20
     43c:	5f 93       	push	r21
     43e:	6f 93       	push	r22
     440:	7f 93       	push	r23
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
	char ch;

	if ((ch = qo_delete()) == 0)
     44e:	0e 94 ab 03 	call	0x756	; 0x756 <qo_delete>
     452:	88 23       	and	r24, r24
     454:	19 f4       	brne	.+6      	; 0x45c <__vector_27+0x34>
		uart_busy = 0;
     456:	10 92 93 02 	sts	0x0293, r1
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__vector_27+0x38>
	else
		UDR0 = ch;
     45c:	80 93 c6 00 	sts	0x00C6, r24
}
     460:	ff 91       	pop	r31
     462:	ef 91       	pop	r30
     464:	bf 91       	pop	r27
     466:	af 91       	pop	r26
     468:	9f 91       	pop	r25
     46a:	8f 91       	pop	r24
     46c:	7f 91       	pop	r23
     46e:	6f 91       	pop	r22
     470:	5f 91       	pop	r21
     472:	4f 91       	pop	r20
     474:	3f 91       	pop	r19
     476:	2f 91       	pop	r18
     478:	0f 90       	pop	r0
     47a:	0b be       	out	0x3b, r0	; 59
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_25>:

ISR(USART0_RX_vect)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	0b b6       	in	r0, 0x3b	; 59
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	2f 93       	push	r18
     496:	3f 93       	push	r19
     498:	4f 93       	push	r20
     49a:	5f 93       	push	r21
     49c:	6f 93       	push	r22
     49e:	7f 93       	push	r23
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
     4a4:	af 93       	push	r26
     4a6:	bf 93       	push	r27
     4a8:	cf 93       	push	r28
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
	char ch;
	ch = UDR0;
     4ae:	c0 91 c6 00 	lds	r28, 0x00C6
	if (ch != EOT) {
     4b2:	c4 30       	cpi	r28, 0x04	; 4
     4b4:	31 f0       	breq	.+12     	; 0x4c2 <__vector_25+0x3c>
		if (ch == '\r') ch = '\n';
     4b6:	cd 30       	cpi	r28, 0x0D	; 13
     4b8:	09 f4       	brne	.+2      	; 0x4bc <__vector_25+0x36>
     4ba:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     4bc:	8c 2f       	mov	r24, r28
     4be:	0e 94 fe 01 	call	0x3fc	; 0x3fc <uart_echo>
	}
	qi_insert(ch);
     4c2:	8c 2f       	mov	r24, r28
     4c4:	0e 94 4a 03 	call	0x694	; 0x694 <qi_insert>
}
     4c8:	ff 91       	pop	r31
     4ca:	ef 91       	pop	r30
     4cc:	cf 91       	pop	r28
     4ce:	bf 91       	pop	r27
     4d0:	af 91       	pop	r26
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	7f 91       	pop	r23
     4d8:	6f 91       	pop	r22
     4da:	5f 91       	pop	r21
     4dc:	4f 91       	pop	r20
     4de:	3f 91       	pop	r19
     4e0:	2f 91       	pop	r18
     4e2:	0f 90       	pop	r0
     4e4:	0b be       	out	0x3b, r0	; 59
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include "linked_list.h"

int is_prime(int n)
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	fc 01       	movw	r30, r24
	int i;
	for (i = 2; i <= n/2; i++)
     4f6:	62 e0       	ldi	r22, 0x02	; 2
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
     4fe:	eb 01       	movw	r28, r22
     500:	22 e0       	ldi	r18, 0x02	; 2
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	08 c0       	rjmp	.+16     	; 0x516 <is_prime+0x26>
		if((n % i) == 0)
     506:	cf 01       	movw	r24, r30
     508:	b9 01       	movw	r22, r18
     50a:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
     50e:	00 97       	sbiw	r24, 0x00	; 0
     510:	41 f0       	breq	.+16     	; 0x522 <is_prime+0x32>
#include "linked_list.h"

int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	c2 17       	cp	r28, r18
     518:	d3 07       	cpc	r29, r19
     51a:	ac f7       	brge	.-22     	; 0x506 <is_prime+0x16>
		if((n % i) == 0)
			return 0;
	return 1;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <is_prime+0x36>
int is_prime(int n)
{
	int i;
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return 0;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <app_prime>:

void app_prime(char *ap)
{
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	21 f0       	breq	.+8      	; 0x548 <app_prime+0x1c>
     540:	0e 94 78 05 	call	0xaf0	; 0xaf0 <atoi>
     544:	7c 01       	movw	r14, r24
     546:	04 c0       	rjmp	.+8      	; 0x550 <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     548:	90 ed       	ldi	r25, 0xD0	; 208
     54a:	e9 2e       	mov	r14, r25
     54c:	97 e0       	ldi	r25, 0x07	; 7
     54e:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     550:	c2 e0       	ldi	r28, 0x02	; 2
     552:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     554:	00 e0       	ldi	r16, 0x00	; 0
     556:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
     558:	8f e5       	ldi	r24, 0x5F	; 95
     55a:	c8 2e       	mov	r12, r24
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     560:	16 c0       	rjmp	.+44     	; 0x58e <app_prime+0x62>
		if (is_prime(n)) {
     562:	ce 01       	movw	r24, r28
     564:	0e 94 78 02 	call	0x4f0	; 0x4f0 <is_prime>
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	81 f0       	breq	.+32     	; 0x58c <app_prime+0x60>
			count++;
     56c:	0f 5f       	subi	r16, 0xFF	; 255
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n", n);
     570:	00 d0       	rcall	.+0      	; 0x572 <app_prime+0x46>
     572:	0f 92       	push	r0
     574:	ed b7       	in	r30, 0x3d	; 61
     576:	fe b7       	in	r31, 0x3e	; 62
     578:	d2 82       	std	Z+2, r13	; 0x02
     57a:	c1 82       	std	Z+1, r12	; 0x01
     57c:	d4 83       	std	Z+4, r29	; 0x04
     57e:	c3 83       	std	Z+3, r28	; 0x03
     580:	0e 94 07 06 	call	0xc0e	; 0xc0e <printf>
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for (n = 2; n <= t; n++) {
     58c:	21 96       	adiw	r28, 0x01	; 1
     58e:	ec 16       	cp	r14, r28
     590:	fd 06       	cpc	r15, r29
     592:	3c f7       	brge	.-50     	; 0x562 <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n", n);
		}
	}
	printf("count=%d\n", count);
     594:	00 d0       	rcall	.+0      	; 0x596 <app_prime+0x6a>
     596:	0f 92       	push	r0
     598:	89 e7       	ldi	r24, 0x79	; 121
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	ed b7       	in	r30, 0x3d	; 61
     59e:	fe b7       	in	r31, 0x3e	; 62
     5a0:	92 83       	std	Z+2, r25	; 0x02
     5a2:	81 83       	std	Z+1, r24	; 0x01
     5a4:	14 83       	std	Z+4, r17	; 0x04
     5a6:	03 83       	std	Z+3, r16	; 0x03
     5a8:	0e 94 07 06 	call	0xc0e	; 0xc0e <printf>
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	08 95       	ret

000005c6 <app_list>:

void app_list(char *ap)
{
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	28 97       	sbiw	r28, 0x08	; 8
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	19 f0       	breq	.+6      	; 0x5ea <app_list+0x24>
     5e4:	fc 01       	movw	r30, r24
     5e6:	10 81       	ld	r17, Z
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <app_list+0x26>
	printf("count=%d\n", count);
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     5ea:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;	// how = ap[0]

	while(1) {
		printf( ">  ");
     5ec:	23 e8       	ldi	r18, 0x83	; 131
     5ee:	e2 2e       	mov	r14, r18
     5f0:	22 e0       	ldi	r18, 0x02	; 2
     5f2:	f2 2e       	mov	r15, r18
     5f4:	0f 92       	push	r0
     5f6:	0f 92       	push	r0
     5f8:	ed b7       	in	r30, 0x3d	; 61
     5fa:	fe b7       	in	r31, 0x3e	; 62
     5fc:	f2 82       	std	Z+2, r15	; 0x02
     5fe:	e1 82       	std	Z+1, r14	; 0x01
     600:	0e 94 07 06 	call	0xc0e	; 0xc0e <printf>
		if (fgets(buf, 8, stdin) == NULL)
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	40 91 20 03 	lds	r20, 0x0320
     60c:	50 91 21 03 	lds	r21, 0x0321
     610:	ce 01       	movw	r24, r28
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	68 e0       	ldi	r22, 0x08	; 8
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	0e 94 d3 05 	call	0xba6	; 0xba6 <fgets>
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	c9 f0       	breq	.+50     	; 0x652 <app_list+0x8c>
			break;
		np = get_node();
     620:	0e 94 96 00 	call	0x12c	; 0x12c <get_node>
		np->data = buf[0];
     624:	29 81       	ldd	r18, Y+1	; 0x01
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     62c:	18 36       	cpi	r17, 0x68	; 104
     62e:	29 f0       	breq	.+10     	; 0x63a <app_list+0x74>
     630:	14 37       	cpi	r17, 0x74	; 116
     632:	31 f0       	breq	.+12     	; 0x640 <app_list+0x7a>
     634:	14 36       	cpi	r17, 0x64	; 100
     636:	51 f4       	brne	.+20     	; 0x64c <app_list+0x86>
     638:	06 c0       	rjmp	.+12     	; 0x646 <app_list+0x80>
			case 'h'	: insert_node_head(np); break;
     63a:	0e 94 9e 00 	call	0x13c	; 0x13c <insert_node_head>
     63e:	da cf       	rjmp	.-76     	; 0x5f4 <app_list+0x2e>
			case 't'	: insert_node_tail(np); break;
     640:	0e 94 b3 00 	call	0x166	; 0x166 <insert_node_tail>
     644:	d7 cf       	rjmp	.-82     	; 0x5f4 <app_list+0x2e>
			case 'd'	: insert_node_d(np);	break;
     646:	0e 94 01 01 	call	0x202	; 0x202 <insert_node_d>
     64a:	d4 cf       	rjmp	.-88     	; 0x5f4 <app_list+0x2e>
			default 	: insert_node_ascn(np);
     64c:	0e 94 ca 00 	call	0x194	; 0x194 <insert_node_ascn>
     650:	d1 cf       	rjmp	.-94     	; 0x5f4 <app_list+0x2e>
		}
	}

	tour_list();
     652:	0e 94 38 01 	call	0x270	; 0x270 <tour_list>
	free_list();
     656:	0e 94 65 01 	call	0x2ca	; 0x2ca <free_list>
}
     65a:	28 96       	adiw	r28, 0x08	; 8
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	08 95       	ret

00000672 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     672:	10 92 d9 02 	sts	0x02D9, r1
     676:	10 92 d8 02 	sts	0x02D8, r1
     67a:	10 92 d7 02 	sts	0x02D7, r1
     67e:	10 92 d6 02 	sts	0x02D6, r1
     682:	10 92 db 02 	sts	0x02DB, r1
     686:	10 92 da 02 	sts	0x02DA, r1
     68a:	10 92 95 02 	sts	0x0295, r1
     68e:	10 92 94 02 	sts	0x0294, r1
}
     692:	08 95       	ret

00000694 <qi_insert>:

int qi_insert(char ch)
{
     694:	48 2f       	mov	r20, r24
	if ((ri + 1) % QI_SIZE == fi)
     696:	20 91 da 02 	lds	r18, 0x02DA
     69a:	30 91 db 02 	lds	r19, 0x02DB
     69e:	2f 5f       	subi	r18, 0xFF	; 255
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	c9 01       	movw	r24, r18
     6a4:	60 e4       	ldi	r22, 0x40	; 64
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
     6ac:	9c 01       	movw	r18, r24
     6ae:	80 91 94 02 	lds	r24, 0x0294
     6b2:	90 91 95 02 	lds	r25, 0x0295
     6b6:	28 17       	cp	r18, r24
     6b8:	39 07       	cpc	r19, r25
     6ba:	59 f0       	breq	.+22     	; 0x6d2 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     6bc:	30 93 db 02 	sts	0x02DB, r19
     6c0:	20 93 da 02 	sts	0x02DA, r18
	qi[ri] = ch;
     6c4:	24 52       	subi	r18, 0x24	; 36
     6c6:	3d 4f       	sbci	r19, 0xFD	; 253
     6c8:	f9 01       	movw	r30, r18
     6ca:	40 83       	st	Z, r20
	return 1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri + 1) % QI_SIZE == fi)
		return 0;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     6d6:	08 95       	ret

000006d8 <qi_delete>:

int qi_delete()
{
	if (ri == fi)
     6d8:	80 91 94 02 	lds	r24, 0x0294
     6dc:	90 91 95 02 	lds	r25, 0x0295
     6e0:	20 91 da 02 	lds	r18, 0x02DA
     6e4:	30 91 db 02 	lds	r19, 0x02DB
     6e8:	28 17       	cp	r18, r24
     6ea:	39 07       	cpc	r19, r25
     6ec:	79 f0       	breq	.+30     	; 0x70c <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	60 e4       	ldi	r22, 0x40	; 64
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
     6f8:	90 93 95 02 	sts	0x0295, r25
     6fc:	80 93 94 02 	sts	0x0294, r24
	return qi[fi];
     700:	84 52       	subi	r24, 0x24	; 36
     702:	9d 4f       	sbci	r25, 0xFD	; 253
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	08 95       	ret
}

int qi_delete()
{
	if (ri == fi)
		return 0;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return qi[fi];
}
     710:	08 95       	ret

00000712 <qo_insert>:

int qo_insert(char ch)
{
     712:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     714:	20 91 d8 02 	lds	r18, 0x02D8
     718:	30 91 d9 02 	lds	r19, 0x02D9
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	c9 01       	movw	r24, r18
     722:	60 e4       	ldi	r22, 0x40	; 64
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
     72a:	9c 01       	movw	r18, r24
     72c:	80 91 d6 02 	lds	r24, 0x02D6
     730:	90 91 d7 02 	lds	r25, 0x02D7
     734:	28 17       	cp	r18, r24
     736:	39 07       	cpc	r19, r25
     738:	59 f0       	breq	.+22     	; 0x750 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     73a:	30 93 d9 02 	sts	0x02D9, r19
     73e:	20 93 d8 02 	sts	0x02D8, r18
	qo[ro] = ch;
     742:	2a 56       	subi	r18, 0x6A	; 106
     744:	3d 4f       	sbci	r19, 0xFD	; 253
     746:	f9 01       	movw	r30, r18
     748:	40 83       	st	Z, r20
	return 1;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return 0;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     754:	08 95       	ret

00000756 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     756:	80 91 d6 02 	lds	r24, 0x02D6
     75a:	90 91 d7 02 	lds	r25, 0x02D7
     75e:	20 91 d8 02 	lds	r18, 0x02D8
     762:	30 91 d9 02 	lds	r19, 0x02D9
     766:	28 17       	cp	r18, r24
     768:	39 07       	cpc	r19, r25
     76a:	79 f0       	breq	.+30     	; 0x78a <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     76c:	01 96       	adiw	r24, 0x01	; 1
     76e:	60 e4       	ldi	r22, 0x40	; 64
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
     776:	90 93 d7 02 	sts	0x02D7, r25
     77a:	80 93 d6 02 	sts	0x02D6, r24
	return qo[fo];
     77e:	8a 56       	subi	r24, 0x6A	; 106
     780:	9d 4f       	sbci	r25, 0xFD	; 253
     782:	fc 01       	movw	r30, r24
     784:	80 81       	ld	r24, Z
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return qo[fo];
}
     78e:	08 95       	ret

00000790 <main>:
#include "uart.h"
#include "linked_list.h"
#include "app.h"

int main()
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	c0 58       	subi	r28, 0x80	; 128
     79a:	d0 40       	sbci	r29, 0x00	; 0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;
	// int n = 0;

	uart_init();
     7a6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <uart_init>
	led_init();
     7aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <led_init>
	
	sei();
     7ae:	78 94       	sei

	while(1) {
		printf("$ ");
     7b0:	87 e0       	ldi	r24, 0x07	; 7
     7b2:	c8 2e       	mov	r12, r24
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	d8 2e       	mov	r13, r24
     7b8:	0f 92       	push	r0
     7ba:	0f 92       	push	r0
     7bc:	ed b7       	in	r30, 0x3d	; 61
     7be:	fe b7       	in	r31, 0x3e	; 62
     7c0:	d2 82       	std	Z+2, r13	; 0x02
     7c2:	c1 82       	std	Z+1, r12	; 0x01
     7c4:	0e 94 07 06 	call	0xc0e	; 0xc0e <printf>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL)
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	40 91 20 03 	lds	r20, 0x0320
     7d0:	50 91 21 03 	lds	r21, 0x0321
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	60 e8       	ldi	r22, 0x80	; 128
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	0e 94 d3 05 	call	0xba6	; 0xba6 <fgets>
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	59 f1       	breq	.+86     	; 0x83a <main+0xaa>
			break;
		if ((cp = strtok(cmd,  "\n\r\t  ")) == NULL) continue;
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	6a e0       	ldi	r22, 0x0A	; 10
     7ea:	72 e0       	ldi	r23, 0x02	; 2
     7ec:	0e 94 96 05 	call	0xb2c	; 0xb2c <strtok>
     7f0:	8c 01       	movw	r16, r24
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	09 f3       	breq	.-62     	; 0x7b8 <main+0x28>
		ap = strtok(NULL, "\n\r\t  ");
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	6a e0       	ldi	r22, 0x0A	; 10
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	0e 94 96 05 	call	0xb2c	; 0xb2c <strtok>
     802:	7c 01       	movw	r14, r24
		if 		(!strcmp(cp,    "prime")) app_prime(ap);
     804:	c8 01       	movw	r24, r16
     806:	60 e1       	ldi	r22, 0x10	; 16
     808:	72 e0       	ldi	r23, 0x02	; 2
     80a:	0e 94 9b 05 	call	0xb36	; 0xb36 <strcmp>
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	21 f4       	brne	.+8      	; 0x81a <main+0x8a>
     812:	c7 01       	movw	r24, r14
     814:	0e 94 96 02 	call	0x52c	; 0x52c <app_prime>
     818:	cf cf       	rjmp	.-98     	; 0x7b8 <main+0x28>
		else if (!strcmp(cp,    "list"))  app_list(ap);
     81a:	c8 01       	movw	r24, r16
     81c:	66 e1       	ldi	r22, 0x16	; 22
     81e:	72 e0       	ldi	r23, 0x02	; 2
     820:	0e 94 9b 05 	call	0xb36	; 0xb36 <strcmp>
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	21 f4       	brne	.+8      	; 0x830 <main+0xa0>
     828:	c7 01       	movw	r24, r14
     82a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <app_list>
     82e:	c4 cf       	rjmp	.-120    	; 0x7b8 <main+0x28>
		else						   printf("Unknown command...\n");
     830:	8b e1       	ldi	r24, 0x1B	; 27
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 20 06 	call	0xc40	; 0xc40 <puts>
     838:	bf cf       	rjmp	.-130    	; 0x7b8 <main+0x28>
	}
	printf("logout, good bye !!!\n");
     83a:	8e e2       	ldi	r24, 0x2E	; 46
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	0e 94 20 06 	call	0xc40	; 0xc40 <puts>
     842:	ff cf       	rjmp	.-2      	; 0x842 <main+0xb2>

00000844 <__divmodhi4>:
     844:	97 fb       	bst	r25, 7
     846:	09 2e       	mov	r0, r25
     848:	07 26       	eor	r0, r23
     84a:	0a d0       	rcall	.+20     	; 0x860 <__divmodhi4_neg1>
     84c:	77 fd       	sbrc	r23, 7
     84e:	04 d0       	rcall	.+8      	; 0x858 <__divmodhi4_neg2>
     850:	0c d0       	rcall	.+24     	; 0x86a <__udivmodhi4>
     852:	06 d0       	rcall	.+12     	; 0x860 <__divmodhi4_neg1>
     854:	00 20       	and	r0, r0
     856:	1a f4       	brpl	.+6      	; 0x85e <__divmodhi4_exit>

00000858 <__divmodhi4_neg2>:
     858:	70 95       	com	r23
     85a:	61 95       	neg	r22
     85c:	7f 4f       	sbci	r23, 0xFF	; 255

0000085e <__divmodhi4_exit>:
     85e:	08 95       	ret

00000860 <__divmodhi4_neg1>:
     860:	f6 f7       	brtc	.-4      	; 0x85e <__divmodhi4_exit>
     862:	90 95       	com	r25
     864:	81 95       	neg	r24
     866:	9f 4f       	sbci	r25, 0xFF	; 255
     868:	08 95       	ret

0000086a <__udivmodhi4>:
     86a:	aa 1b       	sub	r26, r26
     86c:	bb 1b       	sub	r27, r27
     86e:	51 e1       	ldi	r21, 0x11	; 17
     870:	07 c0       	rjmp	.+14     	; 0x880 <__udivmodhi4_ep>

00000872 <__udivmodhi4_loop>:
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	a6 17       	cp	r26, r22
     878:	b7 07       	cpc	r27, r23
     87a:	10 f0       	brcs	.+4      	; 0x880 <__udivmodhi4_ep>
     87c:	a6 1b       	sub	r26, r22
     87e:	b7 0b       	sbc	r27, r23

00000880 <__udivmodhi4_ep>:
     880:	88 1f       	adc	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	5a 95       	dec	r21
     886:	a9 f7       	brne	.-22     	; 0x872 <__udivmodhi4_loop>
     888:	80 95       	com	r24
     88a:	90 95       	com	r25
     88c:	bc 01       	movw	r22, r24
     88e:	cd 01       	movw	r24, r26
     890:	08 95       	ret

00000892 <malloc>:
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ac 01       	movw	r20, r24
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	91 05       	cpc	r25, r1
     89c:	10 f4       	brcc	.+4      	; 0x8a2 <malloc+0x10>
     89e:	42 e0       	ldi	r20, 0x02	; 2
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	e0 91 1e 03 	lds	r30, 0x031E
     8a6:	f0 91 1f 03 	lds	r31, 0x031F
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	a0 e0       	ldi	r26, 0x00	; 0
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	24 c0       	rjmp	.+72     	; 0x8fc <malloc+0x6a>
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	84 17       	cp	r24, r20
     8ba:	95 07       	cpc	r25, r21
     8bc:	d0 f0       	brcs	.+52     	; 0x8f2 <malloc+0x60>
     8be:	84 17       	cp	r24, r20
     8c0:	95 07       	cpc	r25, r21
     8c2:	71 f4       	brne	.+28     	; 0x8e0 <malloc+0x4e>
     8c4:	82 81       	ldd	r24, Z+2	; 0x02
     8c6:	93 81       	ldd	r25, Z+3	; 0x03
     8c8:	10 97       	sbiw	r26, 0x00	; 0
     8ca:	29 f0       	breq	.+10     	; 0x8d6 <malloc+0x44>
     8cc:	13 96       	adiw	r26, 0x03	; 3
     8ce:	9c 93       	st	X, r25
     8d0:	8e 93       	st	-X, r24
     8d2:	12 97       	sbiw	r26, 0x02	; 2
     8d4:	2c c0       	rjmp	.+88     	; 0x92e <malloc+0x9c>
     8d6:	90 93 1f 03 	sts	0x031F, r25
     8da:	80 93 1e 03 	sts	0x031E, r24
     8de:	27 c0       	rjmp	.+78     	; 0x92e <malloc+0x9c>
     8e0:	21 15       	cp	r18, r1
     8e2:	31 05       	cpc	r19, r1
     8e4:	19 f0       	breq	.+6      	; 0x8ec <malloc+0x5a>
     8e6:	82 17       	cp	r24, r18
     8e8:	93 07       	cpc	r25, r19
     8ea:	18 f4       	brcc	.+6      	; 0x8f2 <malloc+0x60>
     8ec:	9c 01       	movw	r18, r24
     8ee:	bd 01       	movw	r22, r26
     8f0:	ef 01       	movw	r28, r30
     8f2:	92 81       	ldd	r25, Z+2	; 0x02
     8f4:	83 81       	ldd	r24, Z+3	; 0x03
     8f6:	df 01       	movw	r26, r30
     8f8:	e9 2f       	mov	r30, r25
     8fa:	f8 2f       	mov	r31, r24
     8fc:	30 97       	sbiw	r30, 0x00	; 0
     8fe:	d1 f6       	brne	.-76     	; 0x8b4 <malloc+0x22>
     900:	21 15       	cp	r18, r1
     902:	31 05       	cpc	r19, r1
     904:	f9 f0       	breq	.+62     	; 0x944 <malloc+0xb2>
     906:	c9 01       	movw	r24, r18
     908:	84 1b       	sub	r24, r20
     90a:	95 0b       	sbc	r25, r21
     90c:	84 30       	cpi	r24, 0x04	; 4
     90e:	91 05       	cpc	r25, r1
     910:	80 f4       	brcc	.+32     	; 0x932 <malloc+0xa0>
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	9b 81       	ldd	r25, Y+3	; 0x03
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	21 f0       	breq	.+8      	; 0x924 <malloc+0x92>
     91c:	fb 01       	movw	r30, r22
     91e:	93 83       	std	Z+3, r25	; 0x03
     920:	82 83       	std	Z+2, r24	; 0x02
     922:	04 c0       	rjmp	.+8      	; 0x92c <malloc+0x9a>
     924:	90 93 1f 03 	sts	0x031F, r25
     928:	80 93 1e 03 	sts	0x031E, r24
     92c:	fe 01       	movw	r30, r28
     92e:	32 96       	adiw	r30, 0x02	; 2
     930:	42 c0       	rjmp	.+132    	; 0x9b6 <malloc+0x124>
     932:	fe 01       	movw	r30, r28
     934:	e8 0f       	add	r30, r24
     936:	f9 1f       	adc	r31, r25
     938:	41 93       	st	Z+, r20
     93a:	51 93       	st	Z+, r21
     93c:	02 97       	sbiw	r24, 0x02	; 2
     93e:	99 83       	std	Y+1, r25	; 0x01
     940:	88 83       	st	Y, r24
     942:	39 c0       	rjmp	.+114    	; 0x9b6 <malloc+0x124>
     944:	80 91 1c 03 	lds	r24, 0x031C
     948:	90 91 1d 03 	lds	r25, 0x031D
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	41 f4       	brne	.+16     	; 0x960 <malloc+0xce>
     950:	80 91 89 02 	lds	r24, 0x0289
     954:	90 91 8a 02 	lds	r25, 0x028A
     958:	90 93 1d 03 	sts	0x031D, r25
     95c:	80 93 1c 03 	sts	0x031C, r24
     960:	20 91 87 02 	lds	r18, 0x0287
     964:	30 91 88 02 	lds	r19, 0x0288
     968:	21 15       	cp	r18, r1
     96a:	31 05       	cpc	r19, r1
     96c:	41 f4       	brne	.+16     	; 0x97e <malloc+0xec>
     96e:	2d b7       	in	r18, 0x3d	; 61
     970:	3e b7       	in	r19, 0x3e	; 62
     972:	80 91 8b 02 	lds	r24, 0x028B
     976:	90 91 8c 02 	lds	r25, 0x028C
     97a:	28 1b       	sub	r18, r24
     97c:	39 0b       	sbc	r19, r25
     97e:	e0 91 1c 03 	lds	r30, 0x031C
     982:	f0 91 1d 03 	lds	r31, 0x031D
     986:	e2 17       	cp	r30, r18
     988:	f3 07       	cpc	r31, r19
     98a:	98 f4       	brcc	.+38     	; 0x9b2 <malloc+0x120>
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	24 17       	cp	r18, r20
     992:	35 07       	cpc	r19, r21
     994:	70 f0       	brcs	.+28     	; 0x9b2 <malloc+0x120>
     996:	ca 01       	movw	r24, r20
     998:	02 96       	adiw	r24, 0x02	; 2
     99a:	28 17       	cp	r18, r24
     99c:	39 07       	cpc	r19, r25
     99e:	48 f0       	brcs	.+18     	; 0x9b2 <malloc+0x120>
     9a0:	8e 0f       	add	r24, r30
     9a2:	9f 1f       	adc	r25, r31
     9a4:	90 93 1d 03 	sts	0x031D, r25
     9a8:	80 93 1c 03 	sts	0x031C, r24
     9ac:	41 93       	st	Z+, r20
     9ae:	51 93       	st	Z+, r21
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <malloc+0x124>
     9b2:	e0 e0       	ldi	r30, 0x00	; 0
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	cf 01       	movw	r24, r30
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <free>:
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	9c 01       	movw	r18, r24
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	09 f4       	brne	.+2      	; 0x9ce <free+0x10>
     9cc:	8c c0       	rjmp	.+280    	; 0xae6 <free+0x128>
     9ce:	dc 01       	movw	r26, r24
     9d0:	12 97       	sbiw	r26, 0x02	; 2
     9d2:	13 96       	adiw	r26, 0x03	; 3
     9d4:	1c 92       	st	X, r1
     9d6:	1e 92       	st	-X, r1
     9d8:	12 97       	sbiw	r26, 0x02	; 2
     9da:	60 91 1e 03 	lds	r22, 0x031E
     9de:	70 91 1f 03 	lds	r23, 0x031F
     9e2:	61 15       	cp	r22, r1
     9e4:	71 05       	cpc	r23, r1
     9e6:	89 f4       	brne	.+34     	; 0xa0a <free+0x4c>
     9e8:	8d 91       	ld	r24, X+
     9ea:	9c 91       	ld	r25, X
     9ec:	11 97       	sbiw	r26, 0x01	; 1
     9ee:	82 0f       	add	r24, r18
     9f0:	93 1f       	adc	r25, r19
     9f2:	20 91 1c 03 	lds	r18, 0x031C
     9f6:	30 91 1d 03 	lds	r19, 0x031D
     9fa:	28 17       	cp	r18, r24
     9fc:	39 07       	cpc	r19, r25
     9fe:	69 f5       	brne	.+90     	; 0xa5a <free+0x9c>
     a00:	b0 93 1d 03 	sts	0x031D, r27
     a04:	a0 93 1c 03 	sts	0x031C, r26
     a08:	6e c0       	rjmp	.+220    	; 0xae6 <free+0x128>
     a0a:	fb 01       	movw	r30, r22
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <free+0x56>
     a12:	fc 01       	movw	r30, r24
     a14:	ea 17       	cp	r30, r26
     a16:	fb 07       	cpc	r31, r27
     a18:	30 f4       	brcc	.+12     	; 0xa26 <free+0x68>
     a1a:	82 81       	ldd	r24, Z+2	; 0x02
     a1c:	93 81       	ldd	r25, Z+3	; 0x03
     a1e:	af 01       	movw	r20, r30
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	b9 f7       	brne	.-18     	; 0xa12 <free+0x54>
     a24:	1f c0       	rjmp	.+62     	; 0xa64 <free+0xa6>
     a26:	e9 01       	movw	r28, r18
     a28:	22 97       	sbiw	r28, 0x02	; 2
     a2a:	fb 83       	std	Y+3, r31	; 0x03
     a2c:	ea 83       	std	Y+2, r30	; 0x02
     a2e:	08 81       	ld	r16, Y
     a30:	19 81       	ldd	r17, Y+1	; 0x01
     a32:	c9 01       	movw	r24, r18
     a34:	80 0f       	add	r24, r16
     a36:	91 1f       	adc	r25, r17
     a38:	8e 17       	cp	r24, r30
     a3a:	9f 07       	cpc	r25, r31
     a3c:	59 f4       	brne	.+22     	; 0xa54 <free+0x96>
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	80 0f       	add	r24, r16
     a44:	91 1f       	adc	r25, r17
     a46:	02 96       	adiw	r24, 0x02	; 2
     a48:	99 83       	std	Y+1, r25	; 0x01
     a4a:	88 83       	st	Y, r24
     a4c:	82 81       	ldd	r24, Z+2	; 0x02
     a4e:	93 81       	ldd	r25, Z+3	; 0x03
     a50:	9b 83       	std	Y+3, r25	; 0x03
     a52:	8a 83       	std	Y+2, r24	; 0x02
     a54:	41 15       	cp	r20, r1
     a56:	51 05       	cpc	r21, r1
     a58:	29 f4       	brne	.+10     	; 0xa64 <free+0xa6>
     a5a:	b0 93 1f 03 	sts	0x031F, r27
     a5e:	a0 93 1e 03 	sts	0x031E, r26
     a62:	41 c0       	rjmp	.+130    	; 0xae6 <free+0x128>
     a64:	fa 01       	movw	r30, r20
     a66:	b3 83       	std	Z+3, r27	; 0x03
     a68:	a2 83       	std	Z+2, r26	; 0x02
     a6a:	c1 91       	ld	r28, Z+
     a6c:	d1 91       	ld	r29, Z+
     a6e:	ec 0f       	add	r30, r28
     a70:	fd 1f       	adc	r31, r29
     a72:	ae 17       	cp	r26, r30
     a74:	bf 07       	cpc	r27, r31
     a76:	81 f4       	brne	.+32     	; 0xa98 <free+0xda>
     a78:	f9 01       	movw	r30, r18
     a7a:	92 91       	ld	r25, -Z
     a7c:	82 91       	ld	r24, -Z
     a7e:	8c 0f       	add	r24, r28
     a80:	9d 1f       	adc	r25, r29
     a82:	02 96       	adiw	r24, 0x02	; 2
     a84:	da 01       	movw	r26, r20
     a86:	11 96       	adiw	r26, 0x01	; 1
     a88:	9c 93       	st	X, r25
     a8a:	8e 93       	st	-X, r24
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	13 96       	adiw	r26, 0x03	; 3
     a92:	9c 93       	st	X, r25
     a94:	8e 93       	st	-X, r24
     a96:	12 97       	sbiw	r26, 0x02	; 2
     a98:	e0 e0       	ldi	r30, 0x00	; 0
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <free+0xe4>
     a9e:	fb 01       	movw	r30, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	db 01       	movw	r26, r22
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	8d 91       	ld	r24, X+
     aa8:	9c 91       	ld	r25, X
     aaa:	13 97       	sbiw	r26, 0x03	; 3
     aac:	00 97       	sbiw	r24, 0x00	; 0
     aae:	b9 f7       	brne	.-18     	; 0xa9e <free+0xe0>
     ab0:	cb 01       	movw	r24, r22
     ab2:	02 96       	adiw	r24, 0x02	; 2
     ab4:	2d 91       	ld	r18, X+
     ab6:	3c 91       	ld	r19, X
     ab8:	11 97       	sbiw	r26, 0x01	; 1
     aba:	82 0f       	add	r24, r18
     abc:	93 1f       	adc	r25, r19
     abe:	20 91 1c 03 	lds	r18, 0x031C
     ac2:	30 91 1d 03 	lds	r19, 0x031D
     ac6:	28 17       	cp	r18, r24
     ac8:	39 07       	cpc	r19, r25
     aca:	69 f4       	brne	.+26     	; 0xae6 <free+0x128>
     acc:	30 97       	sbiw	r30, 0x00	; 0
     ace:	29 f4       	brne	.+10     	; 0xada <free+0x11c>
     ad0:	10 92 1f 03 	sts	0x031F, r1
     ad4:	10 92 1e 03 	sts	0x031E, r1
     ad8:	02 c0       	rjmp	.+4      	; 0xade <free+0x120>
     ada:	13 82       	std	Z+3, r1	; 0x03
     adc:	12 82       	std	Z+2, r1	; 0x02
     ade:	70 93 1d 03 	sts	0x031D, r23
     ae2:	60 93 1c 03 	sts	0x031C, r22
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <atoi>:
     af0:	fc 01       	movw	r30, r24
     af2:	88 27       	eor	r24, r24
     af4:	99 27       	eor	r25, r25
     af6:	e8 94       	clt
     af8:	21 91       	ld	r18, Z+
     afa:	20 32       	cpi	r18, 0x20	; 32
     afc:	e9 f3       	breq	.-6      	; 0xaf8 <atoi+0x8>
     afe:	29 30       	cpi	r18, 0x09	; 9
     b00:	10 f0       	brcs	.+4      	; 0xb06 <atoi+0x16>
     b02:	2e 30       	cpi	r18, 0x0E	; 14
     b04:	c8 f3       	brcs	.-14     	; 0xaf8 <atoi+0x8>
     b06:	2b 32       	cpi	r18, 0x2B	; 43
     b08:	41 f0       	breq	.+16     	; 0xb1a <atoi+0x2a>
     b0a:	2d 32       	cpi	r18, 0x2D	; 45
     b0c:	39 f4       	brne	.+14     	; 0xb1c <atoi+0x2c>
     b0e:	68 94       	set
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <atoi+0x2a>
     b12:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulhi_const_10>
     b16:	82 0f       	add	r24, r18
     b18:	91 1d       	adc	r25, r1
     b1a:	21 91       	ld	r18, Z+
     b1c:	20 53       	subi	r18, 0x30	; 48
     b1e:	2a 30       	cpi	r18, 0x0A	; 10
     b20:	c0 f3       	brcs	.-16     	; 0xb12 <atoi+0x22>
     b22:	1e f4       	brtc	.+6      	; 0xb2a <atoi+0x3a>
     b24:	90 95       	com	r25
     b26:	81 95       	neg	r24
     b28:	9f 4f       	sbci	r25, 0xFF	; 255
     b2a:	08 95       	ret

00000b2c <strtok>:
     b2c:	41 e9       	ldi	r20, 0x91	; 145
     b2e:	52 e0       	ldi	r21, 0x02	; 2
     b30:	0e 94 a4 05 	call	0xb48	; 0xb48 <strtok_r>
     b34:	08 95       	ret

00000b36 <strcmp>:
     b36:	fb 01       	movw	r30, r22
     b38:	dc 01       	movw	r26, r24
     b3a:	8d 91       	ld	r24, X+
     b3c:	01 90       	ld	r0, Z+
     b3e:	80 19       	sub	r24, r0
     b40:	01 10       	cpse	r0, r1
     b42:	d9 f3       	breq	.-10     	; 0xb3a <strcmp+0x4>
     b44:	99 0b       	sbc	r25, r25
     b46:	08 95       	ret

00000b48 <strtok_r>:
     b48:	fa 01       	movw	r30, r20
     b4a:	a1 91       	ld	r26, Z+
     b4c:	b0 81       	ld	r27, Z
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	19 f4       	brne	.+6      	; 0xb58 <strtok_r+0x10>
     b52:	10 97       	sbiw	r26, 0x00	; 0
     b54:	e1 f0       	breq	.+56     	; 0xb8e <strtok_r+0x46>
     b56:	cd 01       	movw	r24, r26
     b58:	dc 01       	movw	r26, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	0d 90       	ld	r0, X+
     b5e:	00 20       	and	r0, r0
     b60:	11 f4       	brne	.+4      	; 0xb66 <strtok_r+0x1e>
     b62:	c0 01       	movw	r24, r0
     b64:	13 c0       	rjmp	.+38     	; 0xb8c <strtok_r+0x44>
     b66:	fb 01       	movw	r30, r22
     b68:	21 91       	ld	r18, Z+
     b6a:	22 23       	and	r18, r18
     b6c:	19 f0       	breq	.+6      	; 0xb74 <strtok_r+0x2c>
     b6e:	20 15       	cp	r18, r0
     b70:	d9 f7       	brne	.-10     	; 0xb68 <strtok_r+0x20>
     b72:	f3 cf       	rjmp	.-26     	; 0xb5a <strtok_r+0x12>
     b74:	fb 01       	movw	r30, r22
     b76:	21 91       	ld	r18, Z+
     b78:	20 15       	cp	r18, r0
     b7a:	19 f4       	brne	.+6      	; 0xb82 <strtok_r+0x3a>
     b7c:	1e 92       	st	-X, r1
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <strtok_r+0x46>
     b82:	22 23       	and	r18, r18
     b84:	c1 f7       	brne	.-16     	; 0xb76 <strtok_r+0x2e>
     b86:	0d 90       	ld	r0, X+
     b88:	00 20       	and	r0, r0
     b8a:	a1 f7       	brne	.-24     	; 0xb74 <strtok_r+0x2c>
     b8c:	d0 01       	movw	r26, r0
     b8e:	fa 01       	movw	r30, r20
     b90:	a1 93       	st	Z+, r26
     b92:	b0 83       	st	Z, r27
     b94:	08 95       	ret

00000b96 <__mulhi_const_10>:
     b96:	7a e0       	ldi	r23, 0x0A	; 10
     b98:	97 9f       	mul	r25, r23
     b9a:	90 2d       	mov	r25, r0
     b9c:	87 9f       	mul	r24, r23
     b9e:	80 2d       	mov	r24, r0
     ba0:	91 0d       	add	r25, r1
     ba2:	11 24       	eor	r1, r1
     ba4:	08 95       	ret

00000ba6 <fgets>:
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	8c 01       	movw	r16, r24
     bb8:	6a 01       	movw	r12, r20
     bba:	fa 01       	movw	r30, r20
     bbc:	83 81       	ldd	r24, Z+3	; 0x03
     bbe:	80 ff       	sbrs	r24, 0
     bc0:	1a c0       	rjmp	.+52     	; 0xbf6 <fgets+0x50>
     bc2:	16 16       	cp	r1, r22
     bc4:	17 06       	cpc	r1, r23
     bc6:	bc f4       	brge	.+46     	; 0xbf6 <fgets+0x50>
     bc8:	7b 01       	movw	r14, r22
     bca:	e8 01       	movw	r28, r16
     bcc:	0e c0       	rjmp	.+28     	; 0xbea <fgets+0x44>
     bce:	c6 01       	movw	r24, r12
     bd0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fgetc>
     bd4:	ff ef       	ldi	r31, 0xFF	; 255
     bd6:	8f 3f       	cpi	r24, 0xFF	; 255
     bd8:	9f 07       	cpc	r25, r31
     bda:	69 f0       	breq	.+26     	; 0xbf6 <fgets+0x50>
     bdc:	89 93       	st	Y+, r24
     bde:	08 94       	sec
     be0:	e1 08       	sbc	r14, r1
     be2:	f1 08       	sbc	r15, r1
     be4:	8a 30       	cpi	r24, 0x0A	; 10
     be6:	91 05       	cpc	r25, r1
     be8:	21 f0       	breq	.+8      	; 0xbf2 <fgets+0x4c>
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	e2 16       	cp	r14, r18
     bee:	f1 04       	cpc	r15, r1
     bf0:	71 f7       	brne	.-36     	; 0xbce <fgets+0x28>
     bf2:	18 82       	st	Y, r1
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <fgets+0x54>
     bf6:	00 e0       	ldi	r16, 0x00	; 0
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	c8 01       	movw	r24, r16
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	08 95       	ret

00000c0e <printf>:
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	fe 01       	movw	r30, r28
     c18:	36 96       	adiw	r30, 0x06	; 6
     c1a:	61 91       	ld	r22, Z+
     c1c:	71 91       	ld	r23, Z+
     c1e:	80 91 22 03 	lds	r24, 0x0322
     c22:	90 91 23 03 	lds	r25, 0x0323
     c26:	af 01       	movw	r20, r30
     c28:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vfprintf>
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <putchar>:
     c32:	60 91 22 03 	lds	r22, 0x0322
     c36:	70 91 23 03 	lds	r23, 0x0323
     c3a:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     c3e:	08 95       	ret

00000c40 <puts>:
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	8c 01       	movw	r16, r24
     c4a:	e0 91 22 03 	lds	r30, 0x0322
     c4e:	f0 91 23 03 	lds	r31, 0x0323
     c52:	83 81       	ldd	r24, Z+3	; 0x03
     c54:	81 ff       	sbrs	r24, 1
     c56:	1a c0       	rjmp	.+52     	; 0xc8c <puts+0x4c>
     c58:	c0 e0       	ldi	r28, 0x00	; 0
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <puts+0x28>
     c5e:	19 95       	eicall
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	11 f0       	breq	.+4      	; 0xc68 <puts+0x28>
     c64:	cf ef       	ldi	r28, 0xFF	; 255
     c66:	df ef       	ldi	r29, 0xFF	; 255
     c68:	f8 01       	movw	r30, r16
     c6a:	81 91       	ld	r24, Z+
     c6c:	8f 01       	movw	r16, r30
     c6e:	60 91 22 03 	lds	r22, 0x0322
     c72:	70 91 23 03 	lds	r23, 0x0323
     c76:	db 01       	movw	r26, r22
     c78:	18 96       	adiw	r26, 0x08	; 8
     c7a:	ed 91       	ld	r30, X+
     c7c:	fc 91       	ld	r31, X
     c7e:	19 97       	sbiw	r26, 0x09	; 9
     c80:	88 23       	and	r24, r24
     c82:	69 f7       	brne	.-38     	; 0xc5e <puts+0x1e>
     c84:	8a e0       	ldi	r24, 0x0A	; 10
     c86:	19 95       	eicall
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	11 f0       	breq	.+4      	; 0xc90 <puts+0x50>
     c8c:	cf ef       	ldi	r28, 0xFF	; 255
     c8e:	df ef       	ldi	r29, 0xFF	; 255
     c90:	ce 01       	movw	r24, r28
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <vfprintf>:
     c9c:	2f 92       	push	r2
     c9e:	3f 92       	push	r3
     ca0:	4f 92       	push	r4
     ca2:	5f 92       	push	r5
     ca4:	6f 92       	push	r6
     ca6:	7f 92       	push	r7
     ca8:	8f 92       	push	r8
     caa:	9f 92       	push	r9
     cac:	af 92       	push	r10
     cae:	bf 92       	push	r11
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	2d 97       	sbiw	r28, 0x0d	; 13
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	3c 01       	movw	r6, r24
     cd2:	7d 87       	std	Y+13, r23	; 0x0d
     cd4:	6c 87       	std	Y+12, r22	; 0x0c
     cd6:	5a 01       	movw	r10, r20
     cd8:	fc 01       	movw	r30, r24
     cda:	17 82       	std	Z+7, r1	; 0x07
     cdc:	16 82       	std	Z+6, r1	; 0x06
     cde:	83 81       	ldd	r24, Z+3	; 0x03
     ce0:	81 ff       	sbrs	r24, 1
     ce2:	c8 c1       	rjmp	.+912    	; 0x1074 <vfprintf+0x3d8>
     ce4:	2e 01       	movw	r4, r28
     ce6:	08 94       	sec
     ce8:	41 1c       	adc	r4, r1
     cea:	51 1c       	adc	r5, r1
     cec:	f3 01       	movw	r30, r6
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	ec 85       	ldd	r30, Y+12	; 0x0c
     cf2:	fd 85       	ldd	r31, Y+13	; 0x0d
     cf4:	93 fd       	sbrc	r25, 3
     cf6:	85 91       	lpm	r24, Z+
     cf8:	93 ff       	sbrs	r25, 3
     cfa:	81 91       	ld	r24, Z+
     cfc:	fd 87       	std	Y+13, r31	; 0x0d
     cfe:	ec 87       	std	Y+12, r30	; 0x0c
     d00:	88 23       	and	r24, r24
     d02:	09 f4       	brne	.+2      	; 0xd06 <vfprintf+0x6a>
     d04:	b3 c1       	rjmp	.+870    	; 0x106c <vfprintf+0x3d0>
     d06:	85 32       	cpi	r24, 0x25	; 37
     d08:	41 f4       	brne	.+16     	; 0xd1a <vfprintf+0x7e>
     d0a:	93 fd       	sbrc	r25, 3
     d0c:	85 91       	lpm	r24, Z+
     d0e:	93 ff       	sbrs	r25, 3
     d10:	81 91       	ld	r24, Z+
     d12:	fd 87       	std	Y+13, r31	; 0x0d
     d14:	ec 87       	std	Y+12, r30	; 0x0c
     d16:	85 32       	cpi	r24, 0x25	; 37
     d18:	29 f4       	brne	.+10     	; 0xd24 <vfprintf+0x88>
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	b3 01       	movw	r22, r6
     d1e:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     d22:	e4 cf       	rjmp	.-56     	; 0xcec <vfprintf+0x50>
     d24:	ff 24       	eor	r15, r15
     d26:	ee 24       	eor	r14, r14
     d28:	10 e0       	ldi	r17, 0x00	; 0
     d2a:	10 32       	cpi	r17, 0x20	; 32
     d2c:	b0 f4       	brcc	.+44     	; 0xd5a <vfprintf+0xbe>
     d2e:	8b 32       	cpi	r24, 0x2B	; 43
     d30:	69 f0       	breq	.+26     	; 0xd4c <vfprintf+0xb0>
     d32:	8c 32       	cpi	r24, 0x2C	; 44
     d34:	28 f4       	brcc	.+10     	; 0xd40 <vfprintf+0xa4>
     d36:	80 32       	cpi	r24, 0x20	; 32
     d38:	51 f0       	breq	.+20     	; 0xd4e <vfprintf+0xb2>
     d3a:	83 32       	cpi	r24, 0x23	; 35
     d3c:	71 f4       	brne	.+28     	; 0xd5a <vfprintf+0xbe>
     d3e:	0b c0       	rjmp	.+22     	; 0xd56 <vfprintf+0xba>
     d40:	8d 32       	cpi	r24, 0x2D	; 45
     d42:	39 f0       	breq	.+14     	; 0xd52 <vfprintf+0xb6>
     d44:	80 33       	cpi	r24, 0x30	; 48
     d46:	49 f4       	brne	.+18     	; 0xd5a <vfprintf+0xbe>
     d48:	11 60       	ori	r17, 0x01	; 1
     d4a:	2c c0       	rjmp	.+88     	; 0xda4 <vfprintf+0x108>
     d4c:	12 60       	ori	r17, 0x02	; 2
     d4e:	14 60       	ori	r17, 0x04	; 4
     d50:	29 c0       	rjmp	.+82     	; 0xda4 <vfprintf+0x108>
     d52:	18 60       	ori	r17, 0x08	; 8
     d54:	27 c0       	rjmp	.+78     	; 0xda4 <vfprintf+0x108>
     d56:	10 61       	ori	r17, 0x10	; 16
     d58:	25 c0       	rjmp	.+74     	; 0xda4 <vfprintf+0x108>
     d5a:	17 fd       	sbrc	r17, 7
     d5c:	2e c0       	rjmp	.+92     	; 0xdba <vfprintf+0x11e>
     d5e:	28 2f       	mov	r18, r24
     d60:	20 53       	subi	r18, 0x30	; 48
     d62:	2a 30       	cpi	r18, 0x0A	; 10
     d64:	98 f4       	brcc	.+38     	; 0xd8c <vfprintf+0xf0>
     d66:	16 ff       	sbrs	r17, 6
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <vfprintf+0xde>
     d6a:	8f 2d       	mov	r24, r15
     d6c:	88 0f       	add	r24, r24
     d6e:	f8 2e       	mov	r15, r24
     d70:	ff 0c       	add	r15, r15
     d72:	ff 0c       	add	r15, r15
     d74:	f8 0e       	add	r15, r24
     d76:	f2 0e       	add	r15, r18
     d78:	15 c0       	rjmp	.+42     	; 0xda4 <vfprintf+0x108>
     d7a:	8e 2d       	mov	r24, r14
     d7c:	88 0f       	add	r24, r24
     d7e:	e8 2e       	mov	r14, r24
     d80:	ee 0c       	add	r14, r14
     d82:	ee 0c       	add	r14, r14
     d84:	e8 0e       	add	r14, r24
     d86:	e2 0e       	add	r14, r18
     d88:	10 62       	ori	r17, 0x20	; 32
     d8a:	0c c0       	rjmp	.+24     	; 0xda4 <vfprintf+0x108>
     d8c:	8e 32       	cpi	r24, 0x2E	; 46
     d8e:	21 f4       	brne	.+8      	; 0xd98 <vfprintf+0xfc>
     d90:	16 fd       	sbrc	r17, 6
     d92:	6c c1       	rjmp	.+728    	; 0x106c <vfprintf+0x3d0>
     d94:	10 64       	ori	r17, 0x40	; 64
     d96:	06 c0       	rjmp	.+12     	; 0xda4 <vfprintf+0x108>
     d98:	8c 36       	cpi	r24, 0x6C	; 108
     d9a:	11 f4       	brne	.+4      	; 0xda0 <vfprintf+0x104>
     d9c:	10 68       	ori	r17, 0x80	; 128
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0x108>
     da0:	88 36       	cpi	r24, 0x68	; 104
     da2:	59 f4       	brne	.+22     	; 0xdba <vfprintf+0x11e>
     da4:	ec 85       	ldd	r30, Y+12	; 0x0c
     da6:	fd 85       	ldd	r31, Y+13	; 0x0d
     da8:	93 fd       	sbrc	r25, 3
     daa:	85 91       	lpm	r24, Z+
     dac:	93 ff       	sbrs	r25, 3
     dae:	81 91       	ld	r24, Z+
     db0:	fd 87       	std	Y+13, r31	; 0x0d
     db2:	ec 87       	std	Y+12, r30	; 0x0c
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <vfprintf+0x11e>
     db8:	b8 cf       	rjmp	.-144    	; 0xd2a <vfprintf+0x8e>
     dba:	98 2f       	mov	r25, r24
     dbc:	95 54       	subi	r25, 0x45	; 69
     dbe:	93 30       	cpi	r25, 0x03	; 3
     dc0:	18 f0       	brcs	.+6      	; 0xdc8 <vfprintf+0x12c>
     dc2:	90 52       	subi	r25, 0x20	; 32
     dc4:	93 30       	cpi	r25, 0x03	; 3
     dc6:	38 f4       	brcc	.+14     	; 0xdd6 <vfprintf+0x13a>
     dc8:	24 e0       	ldi	r18, 0x04	; 4
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	a2 0e       	add	r10, r18
     dce:	b3 1e       	adc	r11, r19
     dd0:	3f e3       	ldi	r19, 0x3F	; 63
     dd2:	39 83       	std	Y+1, r19	; 0x01
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <vfprintf+0x158>
     dd6:	83 36       	cpi	r24, 0x63	; 99
     dd8:	31 f0       	breq	.+12     	; 0xde6 <vfprintf+0x14a>
     dda:	83 37       	cpi	r24, 0x73	; 115
     ddc:	81 f0       	breq	.+32     	; 0xdfe <vfprintf+0x162>
     dde:	83 35       	cpi	r24, 0x53	; 83
     de0:	09 f0       	breq	.+2      	; 0xde4 <vfprintf+0x148>
     de2:	5a c0       	rjmp	.+180    	; 0xe98 <vfprintf+0x1fc>
     de4:	22 c0       	rjmp	.+68     	; 0xe2a <vfprintf+0x18e>
     de6:	f5 01       	movw	r30, r10
     de8:	80 81       	ld	r24, Z
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	22 e0       	ldi	r18, 0x02	; 2
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	a2 0e       	add	r10, r18
     df2:	b3 1e       	adc	r11, r19
     df4:	21 e0       	ldi	r18, 0x01	; 1
     df6:	c2 2e       	mov	r12, r18
     df8:	d1 2c       	mov	r13, r1
     dfa:	42 01       	movw	r8, r4
     dfc:	14 c0       	rjmp	.+40     	; 0xe26 <vfprintf+0x18a>
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	29 2e       	mov	r2, r25
     e02:	31 2c       	mov	r3, r1
     e04:	2a 0c       	add	r2, r10
     e06:	3b 1c       	adc	r3, r11
     e08:	f5 01       	movw	r30, r10
     e0a:	80 80       	ld	r8, Z
     e0c:	91 80       	ldd	r9, Z+1	; 0x01
     e0e:	16 ff       	sbrs	r17, 6
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <vfprintf+0x17c>
     e12:	6f 2d       	mov	r22, r15
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <vfprintf+0x180>
     e18:	6f ef       	ldi	r22, 0xFF	; 255
     e1a:	7f ef       	ldi	r23, 0xFF	; 255
     e1c:	c4 01       	movw	r24, r8
     e1e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <strnlen>
     e22:	6c 01       	movw	r12, r24
     e24:	51 01       	movw	r10, r2
     e26:	1f 77       	andi	r17, 0x7F	; 127
     e28:	15 c0       	rjmp	.+42     	; 0xe54 <vfprintf+0x1b8>
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	28 2e       	mov	r2, r24
     e2e:	31 2c       	mov	r3, r1
     e30:	2a 0c       	add	r2, r10
     e32:	3b 1c       	adc	r3, r11
     e34:	f5 01       	movw	r30, r10
     e36:	80 80       	ld	r8, Z
     e38:	91 80       	ldd	r9, Z+1	; 0x01
     e3a:	16 ff       	sbrs	r17, 6
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <vfprintf+0x1a8>
     e3e:	6f 2d       	mov	r22, r15
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x1ac>
     e44:	6f ef       	ldi	r22, 0xFF	; 255
     e46:	7f ef       	ldi	r23, 0xFF	; 255
     e48:	c4 01       	movw	r24, r8
     e4a:	0e 94 55 08 	call	0x10aa	; 0x10aa <strnlen_P>
     e4e:	6c 01       	movw	r12, r24
     e50:	10 68       	ori	r17, 0x80	; 128
     e52:	51 01       	movw	r10, r2
     e54:	13 fd       	sbrc	r17, 3
     e56:	1c c0       	rjmp	.+56     	; 0xe90 <vfprintf+0x1f4>
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <vfprintf+0x1ca>
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	b3 01       	movw	r22, r6
     e60:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     e64:	ea 94       	dec	r14
     e66:	8e 2d       	mov	r24, r14
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	c8 16       	cp	r12, r24
     e6c:	d9 06       	cpc	r13, r25
     e6e:	a8 f3       	brcs	.-22     	; 0xe5a <vfprintf+0x1be>
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <vfprintf+0x1f4>
     e72:	f4 01       	movw	r30, r8
     e74:	17 fd       	sbrc	r17, 7
     e76:	85 91       	lpm	r24, Z+
     e78:	17 ff       	sbrs	r17, 7
     e7a:	81 91       	ld	r24, Z+
     e7c:	4f 01       	movw	r8, r30
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	b3 01       	movw	r22, r6
     e82:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     e86:	e1 10       	cpse	r14, r1
     e88:	ea 94       	dec	r14
     e8a:	08 94       	sec
     e8c:	c1 08       	sbc	r12, r1
     e8e:	d1 08       	sbc	r13, r1
     e90:	c1 14       	cp	r12, r1
     e92:	d1 04       	cpc	r13, r1
     e94:	71 f7       	brne	.-36     	; 0xe72 <vfprintf+0x1d6>
     e96:	e7 c0       	rjmp	.+462    	; 0x1066 <vfprintf+0x3ca>
     e98:	84 36       	cpi	r24, 0x64	; 100
     e9a:	11 f0       	breq	.+4      	; 0xea0 <vfprintf+0x204>
     e9c:	89 36       	cpi	r24, 0x69	; 105
     e9e:	51 f5       	brne	.+84     	; 0xef4 <vfprintf+0x258>
     ea0:	f5 01       	movw	r30, r10
     ea2:	17 ff       	sbrs	r17, 7
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <vfprintf+0x218>
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	a2 81       	ldd	r26, Z+2	; 0x02
     eac:	b3 81       	ldd	r27, Z+3	; 0x03
     eae:	24 e0       	ldi	r18, 0x04	; 4
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <vfprintf+0x228>
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	aa 27       	eor	r26, r26
     eba:	97 fd       	sbrc	r25, 7
     ebc:	a0 95       	com	r26
     ebe:	ba 2f       	mov	r27, r26
     ec0:	22 e0       	ldi	r18, 0x02	; 2
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	a2 0e       	add	r10, r18
     ec6:	b3 1e       	adc	r11, r19
     ec8:	01 2f       	mov	r16, r17
     eca:	0f 76       	andi	r16, 0x6F	; 111
     ecc:	b7 ff       	sbrs	r27, 7
     ece:	08 c0       	rjmp	.+16     	; 0xee0 <vfprintf+0x244>
     ed0:	b0 95       	com	r27
     ed2:	a0 95       	com	r26
     ed4:	90 95       	com	r25
     ed6:	81 95       	neg	r24
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	af 4f       	sbci	r26, 0xFF	; 255
     edc:	bf 4f       	sbci	r27, 0xFF	; 255
     ede:	00 68       	ori	r16, 0x80	; 128
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	a2 01       	movw	r20, r4
     ee6:	2a e0       	ldi	r18, 0x0A	; 10
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__ultoa_invert>
     eee:	d8 2e       	mov	r13, r24
     ef0:	d4 18       	sub	r13, r4
     ef2:	3f c0       	rjmp	.+126    	; 0xf72 <vfprintf+0x2d6>
     ef4:	85 37       	cpi	r24, 0x75	; 117
     ef6:	21 f4       	brne	.+8      	; 0xf00 <vfprintf+0x264>
     ef8:	1f 7e       	andi	r17, 0xEF	; 239
     efa:	2a e0       	ldi	r18, 0x0A	; 10
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	20 c0       	rjmp	.+64     	; 0xf40 <vfprintf+0x2a4>
     f00:	19 7f       	andi	r17, 0xF9	; 249
     f02:	8f 36       	cpi	r24, 0x6F	; 111
     f04:	a9 f0       	breq	.+42     	; 0xf30 <vfprintf+0x294>
     f06:	80 37       	cpi	r24, 0x70	; 112
     f08:	20 f4       	brcc	.+8      	; 0xf12 <vfprintf+0x276>
     f0a:	88 35       	cpi	r24, 0x58	; 88
     f0c:	09 f0       	breq	.+2      	; 0xf10 <vfprintf+0x274>
     f0e:	ae c0       	rjmp	.+348    	; 0x106c <vfprintf+0x3d0>
     f10:	0b c0       	rjmp	.+22     	; 0xf28 <vfprintf+0x28c>
     f12:	80 37       	cpi	r24, 0x70	; 112
     f14:	21 f0       	breq	.+8      	; 0xf1e <vfprintf+0x282>
     f16:	88 37       	cpi	r24, 0x78	; 120
     f18:	09 f0       	breq	.+2      	; 0xf1c <vfprintf+0x280>
     f1a:	a8 c0       	rjmp	.+336    	; 0x106c <vfprintf+0x3d0>
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <vfprintf+0x284>
     f1e:	10 61       	ori	r17, 0x10	; 16
     f20:	14 ff       	sbrs	r17, 4
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <vfprintf+0x29a>
     f24:	14 60       	ori	r17, 0x04	; 4
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <vfprintf+0x29a>
     f28:	14 ff       	sbrs	r17, 4
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <vfprintf+0x2a0>
     f2c:	16 60       	ori	r17, 0x06	; 6
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <vfprintf+0x2a0>
     f30:	28 e0       	ldi	r18, 0x08	; 8
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <vfprintf+0x2a4>
     f36:	20 e1       	ldi	r18, 0x10	; 16
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x2a4>
     f3c:	20 e1       	ldi	r18, 0x10	; 16
     f3e:	32 e0       	ldi	r19, 0x02	; 2
     f40:	f5 01       	movw	r30, r10
     f42:	17 ff       	sbrs	r17, 7
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <vfprintf+0x2b8>
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	44 e0       	ldi	r20, 0x04	; 4
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	06 c0       	rjmp	.+12     	; 0xf60 <vfprintf+0x2c4>
     f54:	60 81       	ld	r22, Z
     f56:	71 81       	ldd	r23, Z+1	; 0x01
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	42 e0       	ldi	r20, 0x02	; 2
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	a4 0e       	add	r10, r20
     f62:	b5 1e       	adc	r11, r21
     f64:	a2 01       	movw	r20, r4
     f66:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__ultoa_invert>
     f6a:	d8 2e       	mov	r13, r24
     f6c:	d4 18       	sub	r13, r4
     f6e:	01 2f       	mov	r16, r17
     f70:	0f 77       	andi	r16, 0x7F	; 127
     f72:	06 ff       	sbrs	r16, 6
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <vfprintf+0x2ec>
     f76:	0e 7f       	andi	r16, 0xFE	; 254
     f78:	df 14       	cp	r13, r15
     f7a:	30 f4       	brcc	.+12     	; 0xf88 <vfprintf+0x2ec>
     f7c:	04 ff       	sbrs	r16, 4
     f7e:	06 c0       	rjmp	.+12     	; 0xf8c <vfprintf+0x2f0>
     f80:	02 fd       	sbrc	r16, 2
     f82:	04 c0       	rjmp	.+8      	; 0xf8c <vfprintf+0x2f0>
     f84:	0f 7e       	andi	r16, 0xEF	; 239
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <vfprintf+0x2f0>
     f88:	1d 2d       	mov	r17, r13
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <vfprintf+0x2f2>
     f8c:	1f 2d       	mov	r17, r15
     f8e:	80 2f       	mov	r24, r16
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	04 ff       	sbrs	r16, 4
     f94:	0c c0       	rjmp	.+24     	; 0xfae <vfprintf+0x312>
     f96:	fe 01       	movw	r30, r28
     f98:	ed 0d       	add	r30, r13
     f9a:	f1 1d       	adc	r31, r1
     f9c:	20 81       	ld	r18, Z
     f9e:	20 33       	cpi	r18, 0x30	; 48
     fa0:	11 f4       	brne	.+4      	; 0xfa6 <vfprintf+0x30a>
     fa2:	09 7e       	andi	r16, 0xE9	; 233
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <vfprintf+0x31c>
     fa6:	02 ff       	sbrs	r16, 2
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <vfprintf+0x31a>
     faa:	1e 5f       	subi	r17, 0xFE	; 254
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <vfprintf+0x31c>
     fae:	86 78       	andi	r24, 0x86	; 134
     fb0:	90 70       	andi	r25, 0x00	; 0
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <vfprintf+0x31c>
     fb6:	1f 5f       	subi	r17, 0xFF	; 255
     fb8:	80 2e       	mov	r8, r16
     fba:	99 24       	eor	r9, r9
     fbc:	03 fd       	sbrc	r16, 3
     fbe:	12 c0       	rjmp	.+36     	; 0xfe4 <vfprintf+0x348>
     fc0:	00 ff       	sbrs	r16, 0
     fc2:	0d c0       	rjmp	.+26     	; 0xfde <vfprintf+0x342>
     fc4:	fd 2c       	mov	r15, r13
     fc6:	1e 15       	cp	r17, r14
     fc8:	50 f4       	brcc	.+20     	; 0xfde <vfprintf+0x342>
     fca:	fe 0c       	add	r15, r14
     fcc:	f1 1a       	sub	r15, r17
     fce:	1e 2d       	mov	r17, r14
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <vfprintf+0x342>
     fd2:	80 e2       	ldi	r24, 0x20	; 32
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	b3 01       	movw	r22, r6
     fd8:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     fdc:	1f 5f       	subi	r17, 0xFF	; 255
     fde:	1e 15       	cp	r17, r14
     fe0:	c0 f3       	brcs	.-16     	; 0xfd2 <vfprintf+0x336>
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <vfprintf+0x350>
     fe4:	1e 15       	cp	r17, r14
     fe6:	10 f4       	brcc	.+4      	; 0xfec <vfprintf+0x350>
     fe8:	e1 1a       	sub	r14, r17
     fea:	01 c0       	rjmp	.+2      	; 0xfee <vfprintf+0x352>
     fec:	ee 24       	eor	r14, r14
     fee:	84 fe       	sbrs	r8, 4
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <vfprintf+0x374>
     ff2:	80 e3       	ldi	r24, 0x30	; 48
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	b3 01       	movw	r22, r6
     ff8:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
     ffc:	82 fe       	sbrs	r8, 2
     ffe:	1f c0       	rjmp	.+62     	; 0x103e <vfprintf+0x3a2>
    1000:	81 fe       	sbrs	r8, 1
    1002:	03 c0       	rjmp	.+6      	; 0x100a <vfprintf+0x36e>
    1004:	88 e5       	ldi	r24, 0x58	; 88
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	10 c0       	rjmp	.+32     	; 0x102a <vfprintf+0x38e>
    100a:	88 e7       	ldi	r24, 0x78	; 120
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0d c0       	rjmp	.+26     	; 0x102a <vfprintf+0x38e>
    1010:	c4 01       	movw	r24, r8
    1012:	86 78       	andi	r24, 0x86	; 134
    1014:	90 70       	andi	r25, 0x00	; 0
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	91 f0       	breq	.+36     	; 0x103e <vfprintf+0x3a2>
    101a:	81 fc       	sbrc	r8, 1
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <vfprintf+0x386>
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <vfprintf+0x388>
    1022:	8b e2       	ldi	r24, 0x2B	; 43
    1024:	07 fd       	sbrc	r16, 7
    1026:	8d e2       	ldi	r24, 0x2D	; 45
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	b3 01       	movw	r22, r6
    102c:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    1030:	06 c0       	rjmp	.+12     	; 0x103e <vfprintf+0x3a2>
    1032:	80 e3       	ldi	r24, 0x30	; 48
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	b3 01       	movw	r22, r6
    1038:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    103c:	fa 94       	dec	r15
    103e:	df 14       	cp	r13, r15
    1040:	c0 f3       	brcs	.-16     	; 0x1032 <vfprintf+0x396>
    1042:	da 94       	dec	r13
    1044:	f2 01       	movw	r30, r4
    1046:	ed 0d       	add	r30, r13
    1048:	f1 1d       	adc	r31, r1
    104a:	80 81       	ld	r24, Z
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	b3 01       	movw	r22, r6
    1050:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    1054:	dd 20       	and	r13, r13
    1056:	a9 f7       	brne	.-22     	; 0x1042 <vfprintf+0x3a6>
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <vfprintf+0x3ca>
    105a:	80 e2       	ldi	r24, 0x20	; 32
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	b3 01       	movw	r22, r6
    1060:	0e 94 ab 08 	call	0x1156	; 0x1156 <fputc>
    1064:	ea 94       	dec	r14
    1066:	ee 20       	and	r14, r14
    1068:	c1 f7       	brne	.-16     	; 0x105a <vfprintf+0x3be>
    106a:	40 ce       	rjmp	.-896    	; 0xcec <vfprintf+0x50>
    106c:	f3 01       	movw	r30, r6
    106e:	86 81       	ldd	r24, Z+6	; 0x06
    1070:	97 81       	ldd	r25, Z+7	; 0x07
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <vfprintf+0x3dc>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	2d 96       	adiw	r28, 0x0d	; 13
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	5f 90       	pop	r5
    10a2:	4f 90       	pop	r4
    10a4:	3f 90       	pop	r3
    10a6:	2f 90       	pop	r2
    10a8:	08 95       	ret

000010aa <strnlen_P>:
    10aa:	fc 01       	movw	r30, r24
    10ac:	05 90       	lpm	r0, Z+
    10ae:	61 50       	subi	r22, 0x01	; 1
    10b0:	70 40       	sbci	r23, 0x00	; 0
    10b2:	01 10       	cpse	r0, r1
    10b4:	d8 f7       	brcc	.-10     	; 0x10ac <strnlen_P+0x2>
    10b6:	80 95       	com	r24
    10b8:	90 95       	com	r25
    10ba:	8e 0f       	add	r24, r30
    10bc:	9f 1f       	adc	r25, r31
    10be:	08 95       	ret

000010c0 <strnlen>:
    10c0:	fc 01       	movw	r30, r24
    10c2:	61 50       	subi	r22, 0x01	; 1
    10c4:	70 40       	sbci	r23, 0x00	; 0
    10c6:	01 90       	ld	r0, Z+
    10c8:	01 10       	cpse	r0, r1
    10ca:	d8 f7       	brcc	.-10     	; 0x10c2 <strnlen+0x2>
    10cc:	80 95       	com	r24
    10ce:	90 95       	com	r25
    10d0:	8e 0f       	add	r24, r30
    10d2:	9f 1f       	adc	r25, r31
    10d4:	08 95       	ret

000010d6 <fgetc>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	20 ff       	sbrs	r18, 0
    10e0:	35 c0       	rjmp	.+106    	; 0x114c <fgetc+0x76>
    10e2:	26 ff       	sbrs	r18, 6
    10e4:	09 c0       	rjmp	.+18     	; 0x10f8 <fgetc+0x22>
    10e6:	2f 7b       	andi	r18, 0xBF	; 191
    10e8:	2b 83       	std	Y+3, r18	; 0x03
    10ea:	8e 81       	ldd	r24, Y+6	; 0x06
    10ec:	9f 81       	ldd	r25, Y+7	; 0x07
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	9f 83       	std	Y+7, r25	; 0x07
    10f2:	8e 83       	std	Y+6, r24	; 0x06
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 c0       	rjmp	.+80     	; 0x1148 <fgetc+0x72>
    10f8:	22 ff       	sbrs	r18, 2
    10fa:	0f c0       	rjmp	.+30     	; 0x111a <fgetc+0x44>
    10fc:	e8 81       	ld	r30, Y
    10fe:	f9 81       	ldd	r31, Y+1	; 0x01
    1100:	80 81       	ld	r24, Z
    1102:	99 27       	eor	r25, r25
    1104:	87 fd       	sbrc	r24, 7
    1106:	90 95       	com	r25
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	19 f4       	brne	.+6      	; 0x1112 <fgetc+0x3c>
    110c:	20 62       	ori	r18, 0x20	; 32
    110e:	2b 83       	std	Y+3, r18	; 0x03
    1110:	1d c0       	rjmp	.+58     	; 0x114c <fgetc+0x76>
    1112:	31 96       	adiw	r30, 0x01	; 1
    1114:	f9 83       	std	Y+1, r31	; 0x01
    1116:	e8 83       	st	Y, r30
    1118:	11 c0       	rjmp	.+34     	; 0x113c <fgetc+0x66>
    111a:	ea 85       	ldd	r30, Y+10	; 0x0a
    111c:	fb 85       	ldd	r31, Y+11	; 0x0b
    111e:	ce 01       	movw	r24, r28
    1120:	19 95       	eicall
    1122:	97 ff       	sbrs	r25, 7
    1124:	0b c0       	rjmp	.+22     	; 0x113c <fgetc+0x66>
    1126:	2b 81       	ldd	r18, Y+3	; 0x03
    1128:	3f ef       	ldi	r19, 0xFF	; 255
    112a:	8f 3f       	cpi	r24, 0xFF	; 255
    112c:	93 07       	cpc	r25, r19
    112e:	11 f4       	brne	.+4      	; 0x1134 <fgetc+0x5e>
    1130:	80 e1       	ldi	r24, 0x10	; 16
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <fgetc+0x60>
    1134:	80 e2       	ldi	r24, 0x20	; 32
    1136:	82 2b       	or	r24, r18
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	08 c0       	rjmp	.+16     	; 0x114c <fgetc+0x76>
    113c:	2e 81       	ldd	r18, Y+6	; 0x06
    113e:	3f 81       	ldd	r19, Y+7	; 0x07
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	3f 83       	std	Y+7, r19	; 0x07
    1146:	2e 83       	std	Y+6, r18	; 0x06
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <fgetc+0x7a>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9f ef       	ldi	r25, 0xFF	; 255
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <fputc>:
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	8c 01       	movw	r16, r24
    1160:	eb 01       	movw	r28, r22
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	81 ff       	sbrs	r24, 1
    1166:	1b c0       	rjmp	.+54     	; 0x119e <fputc+0x48>
    1168:	82 ff       	sbrs	r24, 2
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <fputc+0x30>
    116c:	2e 81       	ldd	r18, Y+6	; 0x06
    116e:	3f 81       	ldd	r19, Y+7	; 0x07
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	64 f4       	brge	.+24     	; 0x1192 <fputc+0x3c>
    117a:	e8 81       	ld	r30, Y
    117c:	f9 81       	ldd	r31, Y+1	; 0x01
    117e:	01 93       	st	Z+, r16
    1180:	f9 83       	std	Y+1, r31	; 0x01
    1182:	e8 83       	st	Y, r30
    1184:	06 c0       	rjmp	.+12     	; 0x1192 <fputc+0x3c>
    1186:	e8 85       	ldd	r30, Y+8	; 0x08
    1188:	f9 85       	ldd	r31, Y+9	; 0x09
    118a:	80 2f       	mov	r24, r16
    118c:	19 95       	eicall
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	31 f4       	brne	.+12     	; 0x119e <fputc+0x48>
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	9f 83       	std	Y+7, r25	; 0x07
    119a:	8e 83       	std	Y+6, r24	; 0x06
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <fputc+0x4c>
    119e:	0f ef       	ldi	r16, 0xFF	; 255
    11a0:	1f ef       	ldi	r17, 0xFF	; 255
    11a2:	c8 01       	movw	r24, r16
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	08 95       	ret

000011ae <__ultoa_invert>:
    11ae:	fa 01       	movw	r30, r20
    11b0:	aa 27       	eor	r26, r26
    11b2:	28 30       	cpi	r18, 0x08	; 8
    11b4:	51 f1       	breq	.+84     	; 0x120a <__ultoa_invert+0x5c>
    11b6:	20 31       	cpi	r18, 0x10	; 16
    11b8:	81 f1       	breq	.+96     	; 0x121a <__ultoa_invert+0x6c>
    11ba:	e8 94       	clt
    11bc:	6f 93       	push	r22
    11be:	6e 7f       	andi	r22, 0xFE	; 254
    11c0:	6e 5f       	subi	r22, 0xFE	; 254
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8f 4f       	sbci	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	af 4f       	sbci	r26, 0xFF	; 255
    11ca:	b1 e0       	ldi	r27, 0x01	; 1
    11cc:	3e d0       	rcall	.+124    	; 0x124a <__ultoa_invert+0x9c>
    11ce:	b4 e0       	ldi	r27, 0x04	; 4
    11d0:	3c d0       	rcall	.+120    	; 0x124a <__ultoa_invert+0x9c>
    11d2:	67 0f       	add	r22, r23
    11d4:	78 1f       	adc	r23, r24
    11d6:	89 1f       	adc	r24, r25
    11d8:	9a 1f       	adc	r25, r26
    11da:	a1 1d       	adc	r26, r1
    11dc:	68 0f       	add	r22, r24
    11de:	79 1f       	adc	r23, r25
    11e0:	8a 1f       	adc	r24, r26
    11e2:	91 1d       	adc	r25, r1
    11e4:	a1 1d       	adc	r26, r1
    11e6:	6a 0f       	add	r22, r26
    11e8:	71 1d       	adc	r23, r1
    11ea:	81 1d       	adc	r24, r1
    11ec:	91 1d       	adc	r25, r1
    11ee:	a1 1d       	adc	r26, r1
    11f0:	20 d0       	rcall	.+64     	; 0x1232 <__ultoa_invert+0x84>
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <__ultoa_invert+0x48>
    11f4:	68 94       	set
    11f6:	3f 91       	pop	r19
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	26 9f       	mul	r18, r22
    11fc:	11 24       	eor	r1, r1
    11fe:	30 19       	sub	r19, r0
    1200:	30 5d       	subi	r19, 0xD0	; 208
    1202:	31 93       	st	Z+, r19
    1204:	de f6       	brtc	.-74     	; 0x11bc <__ultoa_invert+0xe>
    1206:	cf 01       	movw	r24, r30
    1208:	08 95       	ret
    120a:	46 2f       	mov	r20, r22
    120c:	47 70       	andi	r20, 0x07	; 7
    120e:	40 5d       	subi	r20, 0xD0	; 208
    1210:	41 93       	st	Z+, r20
    1212:	b3 e0       	ldi	r27, 0x03	; 3
    1214:	0f d0       	rcall	.+30     	; 0x1234 <__ultoa_invert+0x86>
    1216:	c9 f7       	brne	.-14     	; 0x120a <__ultoa_invert+0x5c>
    1218:	f6 cf       	rjmp	.-20     	; 0x1206 <__ultoa_invert+0x58>
    121a:	46 2f       	mov	r20, r22
    121c:	4f 70       	andi	r20, 0x0F	; 15
    121e:	40 5d       	subi	r20, 0xD0	; 208
    1220:	4a 33       	cpi	r20, 0x3A	; 58
    1222:	18 f0       	brcs	.+6      	; 0x122a <__ultoa_invert+0x7c>
    1224:	49 5d       	subi	r20, 0xD9	; 217
    1226:	31 fd       	sbrc	r19, 1
    1228:	40 52       	subi	r20, 0x20	; 32
    122a:	41 93       	st	Z+, r20
    122c:	02 d0       	rcall	.+4      	; 0x1232 <__ultoa_invert+0x84>
    122e:	a9 f7       	brne	.-22     	; 0x121a <__ultoa_invert+0x6c>
    1230:	ea cf       	rjmp	.-44     	; 0x1206 <__ultoa_invert+0x58>
    1232:	b4 e0       	ldi	r27, 0x04	; 4
    1234:	a6 95       	lsr	r26
    1236:	97 95       	ror	r25
    1238:	87 95       	ror	r24
    123a:	77 95       	ror	r23
    123c:	67 95       	ror	r22
    123e:	ba 95       	dec	r27
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__ultoa_invert+0x86>
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	61 05       	cpc	r22, r1
    1246:	71 05       	cpc	r23, r1
    1248:	08 95       	ret
    124a:	9b 01       	movw	r18, r22
    124c:	ac 01       	movw	r20, r24
    124e:	0a 2e       	mov	r0, r26
    1250:	06 94       	lsr	r0
    1252:	57 95       	ror	r21
    1254:	47 95       	ror	r20
    1256:	37 95       	ror	r19
    1258:	27 95       	ror	r18
    125a:	ba 95       	dec	r27
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__ultoa_invert+0xa2>
    125e:	62 0f       	add	r22, r18
    1260:	73 1f       	adc	r23, r19
    1262:	84 1f       	adc	r24, r20
    1264:	95 1f       	adc	r25, r21
    1266:	a0 1d       	adc	r26, r0
    1268:	08 95       	ret

0000126a <_exit>:
    126a:	f8 94       	cli

0000126c <__stop_program>:
    126c:	ff cf       	rjmp	.-2      	; 0x126c <__stop_program>
